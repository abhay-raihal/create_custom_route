version: '2.2'
services:

  jaeger:
    image: jaegertracing/all-in-one:1.18
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    ports:
      - 16686:16686

  api:
    build:
      context: .
      args:
        CACHEBUST: "test"
      dockerfile: Dockerfile.dev
    image: razorpay:api
    container_name: razorpay-api
    volumes:
      - .:/app
    links:
      - api_db
      - cache
      - es
    ports:
      - 28080:80
    depends_on:
      - api_db
      - cache
      - es
      - statsd_exporter
    environment:
      DB_LIVE_HOST: api_db
      DB_LIVE_USERNAME: root
      DB_LIVE_PASSWORD: 123
      DB_LIVE_MIGRATION_USERNAME: migration_user_name
      DB_LIVE_MIGRATION_PASSWORD: 123
      SLAVE_DB_LIVE_HOST: api_db
      SLAVE_DB_LIVE_USERNAME: root
      SLAVE_DB_LIVE_PASSWORD: 123
      DB_TEST_HOST: api_db
      DB_TEST_USERNAME: root
      DB_TEST_PASSWORD: 123
      DB_TEST_MIGRATION_USERNAME: migration_user_name
      DB_TEST_MIGRATION_PASSWORD: 123
      SLAVE_DB_TEST_HOST: api_db
      SLAVE_DB_TEST_USERNAME: root
      SLAVE_DB_TEST_PASSWORD: 123
      ARCHIVED_REPLICA_DB_LIVE_HOST: api_db
      ARCHIVED_REPLICA_DB_LIVE_USERNAME: root
      ARCHIVED_REPLICA_DB_LIVE_PASSWORD: 123
      ARCHIVED_REPLICA_DB_TEST_HOST: api_db
      ARCHIVED_REPLICA_DB_TEST_USERNAME: root
      ARCHIVED_REPLICA_DB_TEST_PASSWORD: 123
      DB_AUTH_HOST: api_db
      DB_AUTH_USERNAME: root
      DB_AUTH_PASSWORD: 123
      DB_UPI_PAYMENTS_LIVE_HOST: api_db
      DB_UPI_PAYMENTS_LIVE_USERNAME: root
      DB_UPI_PAYMENTS_LIVE_PASSWORD: 123
      SLAVE_DB_UPI_PAYMENTS_LIVE_HOST: api_db
      SLAVE_DB_UPI_PAYMENTS_LIVE_USERNAME: root
      SLAVE_DB_UPI_PAYMENTS_LIVE_PASSWORD: 123
      DB_UPI_PAYMENTS_TEST_HOST: api_db
      DB_UPI_PAYMENTS_TEST_USERNAME: root
      DB_UPI_PAYMENTS_TEST_PASSWORD: 123
      SLAVE_DB_UPI_PAYMENTS_TEST_HOST: api_db
      SLAVE_DB_UPI_PAYMENTS_TEST_USERNAME: root
      SLAVE_DB_UPI_PAYMENTS_TEST_PASSWORD: 123
      DB_UPI_PAYMENTS_MOCKED: "false"
      REDIS_HOST: api_cache
      QUERY_CACHE_REDIS_HOST: api-redis-cluster
      QUERY_CACHE_REDIS_PORT: 7000
      MUTEX_REDIS_HOST: api-redis-cluster
      MUTEX_REDIS_PORT: 7000
      SESSION_REDIS_HOST: api-redis-cluster
      SESSION_REDIS_HOST_V2: api-redis-cluster
      SESSION_REDIS_PORT: 7000
      SESSION_REDIS_PORT_V2: 7000
      SECURE_REDIS_HOST: api_cache
      THROTTLE_REDIS_HOST: api-redis-cluster
      THROTTLE_REDIS_PORT: 7000
      QUEUE_REDIS_HOST: api_cache
      CACHE_DRIVER: redis
      SECURE_CACHE_DRIVER: redis
      ES_HOST: es
      ES_AUDIT_HOST: es
      ES_MOCK: "false"
      ES_AUDIT_MOCK: "false"
      ES_WORKFLOW_ACTION_MOCK: "false"
      HEIMDALL_WORKFLOWS_MOCK: "false"
      MUTEX_MOCK: "false"
      APP_MODE: dev
      JAEGER_HOSTNAME: 'jaeger'
  api_db:
    image: mysql:8
    platform: linux/x86_64
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 23306:3306
    environment:
      MYSQL_ROOT_PASSWORD: 123
      MYSQL_USER: api_user
      MYSQL_PASSWORD: 123
    volumes:
      - ./dockerconf/api_db.sql:/docker-entrypoint-initdb.d/init.sql
  cache:
    image: redis:3-alpine
    ports:
      - 26379:6379
    container_name: api_cache
  es:
    image: elasticsearch:5.2-alpine
    container_name: razorpay-es
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 1g
    cap_add:
      - IPC_LOCK
    ports:
      - 29200:9200
  statsd_exporter:
    image: prom/statsd-exporter:v0.18.0
    container_name: statsd-exporter
    volumes:
      - ./statsd_mapping.yml:/tmp/statsd_mapping.yml
    ports:
      - 29102:9102
      - 29125:9125/udp
    command: ["--statsd.mapping-config=/tmp/statsd_mapping.yml"]

  api-redis-cluster:
    image: grokzen/redis-cluster:5.0.9
    container_name: api-redis-cluster

# in case you want to run tests outside docker but run server inside docker,
# uncomment this container. Refer readme-docker.md for details.

#  redis-cluster:
#    image: grokzen/redis-cluster:5.0.9
#    container_name: redis-cluster
#    ports:
#      - '7000-7050:7000-7050'
#      - '5000-5010:5000-5010'
#    environment:
#      - IP=0.0.0.0
