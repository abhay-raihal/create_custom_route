<?php
# Generated by the protocol buffer compiler (protoc-gen-twirp_php ).  DO NOT EDIT!
# source: credcase/migrate/v1/migrate_api.proto

declare(strict_types=1);

namespace Rzp\Credcase\Migrate\V1;

/**
 * MigrateAPI service exposes RPCs that handle the migration of
 * multiple types of credential data like API keys, user passwords,
 * etc from API service to credcase.
 *
 * !! This is not meant for public exposure !!
 *
 *
 * Generated from protobuf service <code>rzp.credcase.migrate.v1.MigrateAPI</code>
 */
interface MigrateAPI
{
    /**
     * MigrateApiKey enables the migration of a single API key to credcase.
     *
     * This RPC will be purposed for two uses:
     *  1. Migration of existing keys. API will batch migrate keys.
     *  2. Dual-write of new keys that will be created on API.
     *
     *
     * Generated from protobuf method <code>rzp.credcase.migrate.v1.MigrateAPI/MigrateApiKey</code>
     *
     * @throws \Twirp\Error
     */
    public function MigrateApiKey(array $ctx, \Rzp\Credcase\Migrate\V1\MigrateApiKeyRequest $req): \Rzp\Credcase\Migrate\V1\MigrateApiKeyResponse;

    /**
     * ExpireApiKey allows setting of the expiry time of an API key. This allows
     * dual-write of Roll key operations to credcase.
     *
     * During a roll key, API calls credcase twice:
     *  1. ExpireApiKey() - The old key is first expired with time now() or now()+24h
     *  2. MigrateApiKey() - The new key is created.
     *
     *
     * Generated from protobuf method <code>rzp.credcase.migrate.v1.MigrateAPI/ExpireApiKey</code>
     *
     * @throws \Twirp\Error
     */
    public function ExpireApiKey(array $ctx, \Rzp\Credcase\Migrate\V1\ExpireApiKeyRequest $req): \Rzp\Credcase\Migrate\V1\ExpireApiKeyResponse;

    /**
     * RotateApiKey combines the the Expire() + Migrate() RPCs to allow for more
     * reliable dual-write flows.
     * This request is idempotent and can be retried repeatedly, safely.
     *
     *
     * Generated from protobuf method <code>rzp.credcase.migrate.v1.MigrateAPI/RotateApiKey</code>
     *
     * @throws \Twirp\Error
     */
    public function RotateApiKey(array $ctx, \Rzp\Credcase\Migrate\V1\RotateApiKeyRequest $req): \Rzp\Credcase\Migrate\V1\RotateApiKeyResponse;
}
