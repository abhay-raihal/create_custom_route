<?php
/**
 * AdminAPIApi
 * PHP version 5
 *
 * @category Class
 * @package  AuthzAdmin\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * authz/admin/v1/admin_api.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AuthzAdmin\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AuthzAdmin\Client\ApiException;
use AuthzAdmin\Client\Configuration;
use AuthzAdmin\Client\HeaderSelector;
use AuthzAdmin\Client\ObjectSerializer;

/**
 * AdminAPIApi Class Doc Comment
 *
 * @category Class
 * @package  AuthzAdmin\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdminAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminAPICreateAction
     *
     * CreateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Action
     */
    public function adminAPICreateAction($body)
    {
        list($response) = $this->adminAPICreateActionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateActionWithHttpInfo
     *
     * CreateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Action, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateActionWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Action';
        $request = $this->adminAPICreateActionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Action',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateActionAsync
     *
     * CreateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateActionAsync($body)
    {
        return $this->adminAPICreateActionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateActionAsyncWithHttpInfo
     *
     * CreateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateActionAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Action';
        $request = $this->adminAPICreateActionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateAction'
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateActionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateAction'
            );
        }

        $resourcePath = '/v1/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreatePermission
     *
     * CreatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Permission
     */
    public function adminAPICreatePermission($body)
    {
        list($response) = $this->adminAPICreatePermissionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreatePermissionWithHttpInfo
     *
     * CreatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Permission, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreatePermissionWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Permission';
        $request = $this->adminAPICreatePermissionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Permission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreatePermissionAsync
     *
     * CreatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreatePermissionAsync($body)
    {
        return $this->adminAPICreatePermissionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreatePermissionAsyncWithHttpInfo
     *
     * CreatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreatePermissionAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Permission';
        $request = $this->adminAPICreatePermissionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreatePermission'
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreatePermissionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreatePermission'
            );
        }

        $resourcePath = '/v1/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreatePolicy
     *
     * CreatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Policy
     */
    public function adminAPICreatePolicy($body)
    {
        list($response) = $this->adminAPICreatePolicyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreatePolicyWithHttpInfo
     *
     * CreatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Policy, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreatePolicyWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Policy';
        $request = $this->adminAPICreatePolicyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Policy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreatePolicyAsync
     *
     * CreatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreatePolicyAsync($body)
    {
        return $this->adminAPICreatePolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreatePolicyAsyncWithHttpInfo
     *
     * CreatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreatePolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Policy';
        $request = $this->adminAPICreatePolicyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreatePolicy'
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreatePolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreatePolicy'
            );
        }

        $resourcePath = '/v1/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateResource
     *
     * CreateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Resource
     */
    public function adminAPICreateResource($body)
    {
        list($response) = $this->adminAPICreateResourceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateResourceWithHttpInfo
     *
     * CreateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Resource, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateResourceWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Resource';
        $request = $this->adminAPICreateResourceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Resource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateResourceAsync
     *
     * CreateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceAsync($body)
    {
        return $this->adminAPICreateResourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateResourceAsyncWithHttpInfo
     *
     * CreateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Resource';
        $request = $this->adminAPICreateResourceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateResource'
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateResourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateResource'
            );
        }

        $resourcePath = '/v1/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateResourceGroup
     *
     * CreateResourceGroup creates the resource group entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ResourceGroup
     */
    public function adminAPICreateResourceGroup($body)
    {
        list($response) = $this->adminAPICreateResourceGroupWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateResourceGroupWithHttpInfo
     *
     * CreateResourceGroup creates the resource group entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ResourceGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateResourceGroupWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroup';
        $request = $this->adminAPICreateResourceGroupRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ResourceGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateResourceGroupAsync
     *
     * CreateResourceGroup creates the resource group entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceGroupAsync($body)
    {
        return $this->adminAPICreateResourceGroupAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateResourceGroupAsyncWithHttpInfo
     *
     * CreateResourceGroup creates the resource group entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceGroupAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroup';
        $request = $this->adminAPICreateResourceGroupRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateResourceGroup'
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateResourceGroupRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateResourceGroup'
            );
        }

        $resourcePath = '/v1/resource_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateResourceGroupMapping
     *
     * CreateResourceGroupMapping creates the resource group mapping in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroupMapping $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ResourceGroupMapping
     */
    public function adminAPICreateResourceGroupMapping($body)
    {
        list($response) = $this->adminAPICreateResourceGroupMappingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateResourceGroupMappingWithHttpInfo
     *
     * CreateResourceGroupMapping creates the resource group mapping in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroupMapping $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ResourceGroupMapping, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateResourceGroupMappingWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroupMapping';
        $request = $this->adminAPICreateResourceGroupMappingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ResourceGroupMapping',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateResourceGroupMappingAsync
     *
     * CreateResourceGroupMapping creates the resource group mapping in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroupMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceGroupMappingAsync($body)
    {
        return $this->adminAPICreateResourceGroupMappingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateResourceGroupMappingAsyncWithHttpInfo
     *
     * CreateResourceGroupMapping creates the resource group mapping in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroupMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateResourceGroupMappingAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroupMapping';
        $request = $this->adminAPICreateResourceGroupMappingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateResourceGroupMapping'
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroupMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateResourceGroupMappingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateResourceGroupMapping'
            );
        }

        $resourcePath = '/v1/resource_group_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateRole
     *
     * CreateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Role
     */
    public function adminAPICreateRole($body)
    {
        list($response) = $this->adminAPICreateRoleWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateRoleWithHttpInfo
     *
     * CreateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Role, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateRoleWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Role';
        $request = $this->adminAPICreateRoleRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Role',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateRoleAsync
     *
     * CreateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateRoleAsync($body)
    {
        return $this->adminAPICreateRoleAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateRoleAsyncWithHttpInfo
     *
     * CreateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateRoleAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Role';
        $request = $this->adminAPICreateRoleRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateRole'
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateRoleRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateRole'
            );
        }

        $resourcePath = '/v1/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateRolePolicyMapping
     *
     * CreateRolePolicyMapping adds a policy to the given role in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1RolePolicyMapping $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1RolePolicyMapping
     */
    public function adminAPICreateRolePolicyMapping($body)
    {
        list($response) = $this->adminAPICreateRolePolicyMappingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateRolePolicyMappingWithHttpInfo
     *
     * CreateRolePolicyMapping adds a policy to the given role in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1RolePolicyMapping $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1RolePolicyMapping, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateRolePolicyMappingWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1RolePolicyMapping';
        $request = $this->adminAPICreateRolePolicyMappingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1RolePolicyMapping',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateRolePolicyMappingAsync
     *
     * CreateRolePolicyMapping adds a policy to the given role in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1RolePolicyMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateRolePolicyMappingAsync($body)
    {
        return $this->adminAPICreateRolePolicyMappingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateRolePolicyMappingAsyncWithHttpInfo
     *
     * CreateRolePolicyMapping adds a policy to the given role in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1RolePolicyMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateRolePolicyMappingAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1RolePolicyMapping';
        $request = $this->adminAPICreateRolePolicyMappingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateRolePolicyMapping'
     *
     * @param  \AuthzAdmin\Client\Model\V1RolePolicyMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateRolePolicyMappingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateRolePolicyMapping'
            );
        }

        $resourcePath = '/v1/role_policy_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateService
     *
     * CreateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Service
     */
    public function adminAPICreateService($body)
    {
        list($response) = $this->adminAPICreateServiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateServiceWithHttpInfo
     *
     * CreateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Service, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateServiceWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Service';
        $request = $this->adminAPICreateServiceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateServiceAsync
     *
     * CreateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateServiceAsync($body)
    {
        return $this->adminAPICreateServiceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateServiceAsyncWithHttpInfo
     *
     * CreateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateServiceAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Service';
        $request = $this->adminAPICreateServiceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateService'
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateServiceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateService'
            );
        }

        $resourcePath = '/v1/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPICreateSubjectRoleMapping
     *
     * CreateSubjectRoleMapping assigns the role to a subject entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1SubjectRoleMapping $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPICreateSubjectRoleMapping($body)
    {
        list($response) = $this->adminAPICreateSubjectRoleMappingWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPICreateSubjectRoleMappingWithHttpInfo
     *
     * CreateSubjectRoleMapping assigns the role to a subject entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1SubjectRoleMapping $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPICreateSubjectRoleMappingWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPICreateSubjectRoleMappingRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPICreateSubjectRoleMappingAsync
     *
     * CreateSubjectRoleMapping assigns the role to a subject entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1SubjectRoleMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateSubjectRoleMappingAsync($body)
    {
        return $this->adminAPICreateSubjectRoleMappingAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPICreateSubjectRoleMappingAsyncWithHttpInfo
     *
     * CreateSubjectRoleMapping assigns the role to a subject entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1SubjectRoleMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPICreateSubjectRoleMappingAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPICreateSubjectRoleMappingRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPICreateSubjectRoleMapping'
     *
     * @param  \AuthzAdmin\Client\Model\V1SubjectRoleMapping $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPICreateSubjectRoleMappingRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPICreateSubjectRoleMapping'
            );
        }

        $resourcePath = '/v1/subject_role_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteAction
     *
     * DeleteAction deletes the action entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     * @param  string $type type (optional, default to ACTION_TYPE_C)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteAction($id, $name = null, $type = 'ACTION_TYPE_C')
    {
        list($response) = $this->adminAPIDeleteActionWithHttpInfo($id, $name, $type);
        return $response;
    }

    /**
     * Operation adminAPIDeleteActionWithHttpInfo
     *
     * DeleteAction deletes the action entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $type (optional, default to ACTION_TYPE_C)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteActionWithHttpInfo($id, $name = null, $type = 'ACTION_TYPE_C')
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteActionRequest($id, $name, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteActionAsync
     *
     * DeleteAction deletes the action entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $type (optional, default to ACTION_TYPE_C)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteActionAsync($id, $name = null, $type = 'ACTION_TYPE_C')
    {
        return $this->adminAPIDeleteActionAsyncWithHttpInfo($id, $name, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteActionAsyncWithHttpInfo
     *
     * DeleteAction deletes the action entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $type (optional, default to ACTION_TYPE_C)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteActionAsyncWithHttpInfo($id, $name = null, $type = 'ACTION_TYPE_C')
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteActionRequest($id, $name, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteAction'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $type (optional, default to ACTION_TYPE_C)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteActionRequest($id, $name = null, $type = 'ACTION_TYPE_C')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeleteAction'
            );
        }

        $resourcePath = '/v1/actions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeletePermission
     *
     * DeletePermission deletes the permission entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $resource_id resource_id (optional)
     * @param  string $action_id action_id (optional)
     * @param  string $effect effect (optional, default to EFFECT_UNKNOWN)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeletePermission($id, $resource_id = null, $action_id = null, $effect = 'EFFECT_UNKNOWN')
    {
        list($response) = $this->adminAPIDeletePermissionWithHttpInfo($id, $resource_id, $action_id, $effect);
        return $response;
    }

    /**
     * Operation adminAPIDeletePermissionWithHttpInfo
     *
     * DeletePermission deletes the permission entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $resource_id (optional)
     * @param  string $action_id (optional)
     * @param  string $effect (optional, default to EFFECT_UNKNOWN)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeletePermissionWithHttpInfo($id, $resource_id = null, $action_id = null, $effect = 'EFFECT_UNKNOWN')
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeletePermissionRequest($id, $resource_id, $action_id, $effect);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeletePermissionAsync
     *
     * DeletePermission deletes the permission entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $resource_id (optional)
     * @param  string $action_id (optional)
     * @param  string $effect (optional, default to EFFECT_UNKNOWN)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeletePermissionAsync($id, $resource_id = null, $action_id = null, $effect = 'EFFECT_UNKNOWN')
    {
        return $this->adminAPIDeletePermissionAsyncWithHttpInfo($id, $resource_id, $action_id, $effect)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeletePermissionAsyncWithHttpInfo
     *
     * DeletePermission deletes the permission entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $resource_id (optional)
     * @param  string $action_id (optional)
     * @param  string $effect (optional, default to EFFECT_UNKNOWN)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeletePermissionAsyncWithHttpInfo($id, $resource_id = null, $action_id = null, $effect = 'EFFECT_UNKNOWN')
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeletePermissionRequest($id, $resource_id, $action_id, $effect);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeletePermission'
     *
     * @param  string $id (required)
     * @param  string $resource_id (optional)
     * @param  string $action_id (optional)
     * @param  string $effect (optional, default to EFFECT_UNKNOWN)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeletePermissionRequest($id, $resource_id = null, $action_id = null, $effect = 'EFFECT_UNKNOWN')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeletePermission'
            );
        }

        $resourcePath = '/v1/permissions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($resource_id !== null) {
            $queryParams['resourceId'] = ObjectSerializer::toQueryValue($resource_id);
        }
        // query params
        if ($action_id !== null) {
            $queryParams['actionId'] = ObjectSerializer::toQueryValue($action_id);
        }
        // query params
        if ($effect !== null) {
            $queryParams['effect'] = ObjectSerializer::toQueryValue($effect);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeletePolicy
     *
     * DeletePolicy deletes the policy entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     * @param  string $origin_service_id origin_service_id (optional)
     * @param  string $permission_id permission_id (optional)
     * @param  string $type type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  bool $is_assignable is_assignable (optional)
     * @param  bool $is_active is_active (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeletePolicy($id, $name = null, $origin_service_id = null, $permission_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $is_assignable = null, $is_active = null)
    {
        list($response) = $this->adminAPIDeletePolicyWithHttpInfo($id, $name, $origin_service_id, $permission_id, $type, $is_assignable, $is_active);
        return $response;
    }

    /**
     * Operation adminAPIDeletePolicyWithHttpInfo
     *
     * DeletePolicy deletes the policy entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $origin_service_id (optional)
     * @param  string $permission_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  bool $is_assignable (optional)
     * @param  bool $is_active (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeletePolicyWithHttpInfo($id, $name = null, $origin_service_id = null, $permission_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $is_assignable = null, $is_active = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeletePolicyRequest($id, $name, $origin_service_id, $permission_id, $type, $is_assignable, $is_active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeletePolicyAsync
     *
     * DeletePolicy deletes the policy entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $origin_service_id (optional)
     * @param  string $permission_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  bool $is_assignable (optional)
     * @param  bool $is_active (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeletePolicyAsync($id, $name = null, $origin_service_id = null, $permission_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $is_assignable = null, $is_active = null)
    {
        return $this->adminAPIDeletePolicyAsyncWithHttpInfo($id, $name, $origin_service_id, $permission_id, $type, $is_assignable, $is_active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeletePolicyAsyncWithHttpInfo
     *
     * DeletePolicy deletes the policy entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $origin_service_id (optional)
     * @param  string $permission_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  bool $is_assignable (optional)
     * @param  bool $is_active (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeletePolicyAsyncWithHttpInfo($id, $name = null, $origin_service_id = null, $permission_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $is_assignable = null, $is_active = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeletePolicyRequest($id, $name, $origin_service_id, $permission_id, $type, $is_assignable, $is_active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeletePolicy'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $origin_service_id (optional)
     * @param  string $permission_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  bool $is_assignable (optional)
     * @param  bool $is_active (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeletePolicyRequest($id, $name = null, $origin_service_id = null, $permission_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $is_assignable = null, $is_active = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeletePolicy'
            );
        }

        $resourcePath = '/v1/policies/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($origin_service_id !== null) {
            $queryParams['originServiceId'] = ObjectSerializer::toQueryValue($origin_service_id);
        }
        // query params
        if ($permission_id !== null) {
            $queryParams['permissionId'] = ObjectSerializer::toQueryValue($permission_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($is_assignable !== null) {
            $queryParams['isAssignable'] = ObjectSerializer::toQueryValue($is_assignable);
        }
        // query params
        if ($is_active !== null) {
            $queryParams['isActive'] = ObjectSerializer::toQueryValue($is_active);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteResource
     *
     * DeleteResource deletes the resource entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteResource($id, $name = null)
    {
        list($response) = $this->adminAPIDeleteResourceWithHttpInfo($id, $name);
        return $response;
    }

    /**
     * Operation adminAPIDeleteResourceWithHttpInfo
     *
     * DeleteResource deletes the resource entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteResourceWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceRequest($id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteResourceAsync
     *
     * DeleteResource deletes the resource entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceAsync($id, $name = null)
    {
        return $this->adminAPIDeleteResourceAsyncWithHttpInfo($id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteResourceAsyncWithHttpInfo
     *
     * DeleteResource deletes the resource entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceAsyncWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceRequest($id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteResource'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteResourceRequest($id, $name = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeleteResource'
            );
        }

        $resourcePath = '/v1/resources/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteResourceGroup
     *
     * DeleteResourceGroup deletes the resource group entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteResourceGroup($id, $name = null)
    {
        list($response) = $this->adminAPIDeleteResourceGroupWithHttpInfo($id, $name);
        return $response;
    }

    /**
     * Operation adminAPIDeleteResourceGroupWithHttpInfo
     *
     * DeleteResourceGroup deletes the resource group entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteResourceGroupWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceGroupRequest($id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteResourceGroupAsync
     *
     * DeleteResourceGroup deletes the resource group entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceGroupAsync($id, $name = null)
    {
        return $this->adminAPIDeleteResourceGroupAsyncWithHttpInfo($id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteResourceGroupAsyncWithHttpInfo
     *
     * DeleteResourceGroup deletes the resource group entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceGroupAsyncWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceGroupRequest($id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteResourceGroup'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteResourceGroupRequest($id, $name = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeleteResourceGroup'
            );
        }

        $resourcePath = '/v1/resource_groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteResourceGroupMapping
     *
     * DeleteResourceGroupMapping deletes the resource group mapping from AuthZ policy store.
     *
     * @param  string $resource_id resource_id (optional)
     * @param  string $group_id group_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteResourceGroupMapping($resource_id = null, $group_id = null)
    {
        list($response) = $this->adminAPIDeleteResourceGroupMappingWithHttpInfo($resource_id, $group_id);
        return $response;
    }

    /**
     * Operation adminAPIDeleteResourceGroupMappingWithHttpInfo
     *
     * DeleteResourceGroupMapping deletes the resource group mapping from AuthZ policy store.
     *
     * @param  string $resource_id (optional)
     * @param  string $group_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteResourceGroupMappingWithHttpInfo($resource_id = null, $group_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceGroupMappingRequest($resource_id, $group_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteResourceGroupMappingAsync
     *
     * DeleteResourceGroupMapping deletes the resource group mapping from AuthZ policy store.
     *
     * @param  string $resource_id (optional)
     * @param  string $group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceGroupMappingAsync($resource_id = null, $group_id = null)
    {
        return $this->adminAPIDeleteResourceGroupMappingAsyncWithHttpInfo($resource_id, $group_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteResourceGroupMappingAsyncWithHttpInfo
     *
     * DeleteResourceGroupMapping deletes the resource group mapping from AuthZ policy store.
     *
     * @param  string $resource_id (optional)
     * @param  string $group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteResourceGroupMappingAsyncWithHttpInfo($resource_id = null, $group_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteResourceGroupMappingRequest($resource_id, $group_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteResourceGroupMapping'
     *
     * @param  string $resource_id (optional)
     * @param  string $group_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteResourceGroupMappingRequest($resource_id = null, $group_id = null)
    {

        $resourcePath = '/v1/resource_group_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($resource_id !== null) {
            $queryParams['resourceId'] = ObjectSerializer::toQueryValue($resource_id);
        }
        // query params
        if ($group_id !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($group_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteRole
     *
     * DeleteRole deletes the role entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     * @param  string $org_id org_id (optional)
     * @param  string $type type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  string $owner_type owner_type (optional)
     * @param  string $owner_id owner_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteRole($id, $name = null, $org_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $owner_type = null, $owner_id = null)
    {
        list($response) = $this->adminAPIDeleteRoleWithHttpInfo($id, $name, $org_id, $type, $owner_type, $owner_id);
        return $response;
    }

    /**
     * Operation adminAPIDeleteRoleWithHttpInfo
     *
     * DeleteRole deletes the role entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $org_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  string $owner_type (optional)
     * @param  string $owner_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteRoleWithHttpInfo($id, $name = null, $org_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $owner_type = null, $owner_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteRoleRequest($id, $name, $org_id, $type, $owner_type, $owner_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteRoleAsync
     *
     * DeleteRole deletes the role entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $org_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  string $owner_type (optional)
     * @param  string $owner_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteRoleAsync($id, $name = null, $org_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $owner_type = null, $owner_id = null)
    {
        return $this->adminAPIDeleteRoleAsyncWithHttpInfo($id, $name, $org_id, $type, $owner_type, $owner_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteRoleAsyncWithHttpInfo
     *
     * DeleteRole deletes the role entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $org_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  string $owner_type (optional)
     * @param  string $owner_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteRoleAsyncWithHttpInfo($id, $name = null, $org_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $owner_type = null, $owner_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteRoleRequest($id, $name, $org_id, $type, $owner_type, $owner_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteRole'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     * @param  string $org_id (optional)
     * @param  string $type (optional, default to ROLE_POLICY_TYPE_INTERNAL)
     * @param  string $owner_type (optional)
     * @param  string $owner_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteRoleRequest($id, $name = null, $org_id = null, $type = 'ROLE_POLICY_TYPE_INTERNAL', $owner_type = null, $owner_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeleteRole'
            );
        }

        $resourcePath = '/v1/roles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($org_id !== null) {
            $queryParams['orgId'] = ObjectSerializer::toQueryValue($org_id);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($owner_type !== null) {
            $queryParams['ownerType'] = ObjectSerializer::toQueryValue($owner_type);
        }
        // query params
        if ($owner_id !== null) {
            $queryParams['ownerId'] = ObjectSerializer::toQueryValue($owner_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteRolePolicyMapping
     *
     * DeleteRolePolicyMapping deletes a policy from the given role in AuthZ policy store.
     *
     * @param  string $role_id role_id (optional)
     * @param  string $policy_id policy_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteRolePolicyMapping($role_id = null, $policy_id = null)
    {
        list($response) = $this->adminAPIDeleteRolePolicyMappingWithHttpInfo($role_id, $policy_id);
        return $response;
    }

    /**
     * Operation adminAPIDeleteRolePolicyMappingWithHttpInfo
     *
     * DeleteRolePolicyMapping deletes a policy from the given role in AuthZ policy store.
     *
     * @param  string $role_id (optional)
     * @param  string $policy_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteRolePolicyMappingWithHttpInfo($role_id = null, $policy_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteRolePolicyMappingRequest($role_id, $policy_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteRolePolicyMappingAsync
     *
     * DeleteRolePolicyMapping deletes a policy from the given role in AuthZ policy store.
     *
     * @param  string $role_id (optional)
     * @param  string $policy_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteRolePolicyMappingAsync($role_id = null, $policy_id = null)
    {
        return $this->adminAPIDeleteRolePolicyMappingAsyncWithHttpInfo($role_id, $policy_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteRolePolicyMappingAsyncWithHttpInfo
     *
     * DeleteRolePolicyMapping deletes a policy from the given role in AuthZ policy store.
     *
     * @param  string $role_id (optional)
     * @param  string $policy_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteRolePolicyMappingAsyncWithHttpInfo($role_id = null, $policy_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteRolePolicyMappingRequest($role_id, $policy_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteRolePolicyMapping'
     *
     * @param  string $role_id (optional)
     * @param  string $policy_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteRolePolicyMappingRequest($role_id = null, $policy_id = null)
    {

        $resourcePath = '/v1/role_policy_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($role_id !== null) {
            $queryParams['roleId'] = ObjectSerializer::toQueryValue($role_id);
        }
        // query params
        if ($policy_id !== null) {
            $queryParams['policyId'] = ObjectSerializer::toQueryValue($policy_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteService
     *
     * DeleteService deletes the service entity from AuthZ policy store.
     *
     * @param  string $id id (required)
     * @param  string $name name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteService($id, $name = null)
    {
        list($response) = $this->adminAPIDeleteServiceWithHttpInfo($id, $name);
        return $response;
    }

    /**
     * Operation adminAPIDeleteServiceWithHttpInfo
     *
     * DeleteService deletes the service entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteServiceWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteServiceRequest($id, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteServiceAsync
     *
     * DeleteService deletes the service entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteServiceAsync($id, $name = null)
    {
        return $this->adminAPIDeleteServiceAsyncWithHttpInfo($id, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteServiceAsyncWithHttpInfo
     *
     * DeleteService deletes the service entity from AuthZ policy store.
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteServiceAsyncWithHttpInfo($id, $name = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteServiceRequest($id, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteService'
     *
     * @param  string $id (required)
     * @param  string $name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteServiceRequest($id, $name = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminAPIDeleteService'
            );
        }

        $resourcePath = '/v1/services/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteSubject
     *
     * DeleteSubject detaches all roles for the given subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id role_id (optional)
     * @param  string $key_id key_id (optional)
     * @param  string $key_owner_type key_owner_type (optional)
     * @param  string $key_owner_id key_owner_id (optional)
     * @param  string[] $role_names role_names (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteSubject($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        list($response) = $this->adminAPIDeleteSubjectWithHttpInfo($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);
        return $response;
    }

    /**
     * Operation adminAPIDeleteSubjectWithHttpInfo
     *
     * DeleteSubject detaches all roles for the given subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteSubjectWithHttpInfo($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteSubjectRequest($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteSubjectAsync
     *
     * DeleteSubject detaches all roles for the given subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteSubjectAsync($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        return $this->adminAPIDeleteSubjectAsyncWithHttpInfo($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteSubjectAsyncWithHttpInfo
     *
     * DeleteSubject detaches all roles for the given subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteSubjectAsyncWithHttpInfo($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteSubjectRequest($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteSubject'
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteSubjectRequest($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {

        $resourcePath = '/v1/subjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($role_id)) {
            $queryParams['roleId'] = $role_id;
        } else
        if ($role_id !== null) {
            $queryParams['roleId'] = ObjectSerializer::toQueryValue($role_id);
        }
        // query params
        if ($key_id !== null) {
            $queryParams['key.id'] = ObjectSerializer::toQueryValue($key_id);
        }
        // query params
        if ($key_owner_type !== null) {
            $queryParams['key.ownerType'] = ObjectSerializer::toQueryValue($key_owner_type);
        }
        // query params
        if ($key_owner_id !== null) {
            $queryParams['key.ownerId'] = ObjectSerializer::toQueryValue($key_owner_id);
        }
        // query params
        if (is_array($role_names)) {
            $queryParams['roleNames'] = $role_names;
        } else
        if ($role_names !== null) {
            $queryParams['roleNames'] = ObjectSerializer::toQueryValue($role_names);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIDeleteSubjectRoleMapping
     *
     * DeleteSubjectRoleMapping detaches the role from a subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id role_id (optional)
     * @param  string $key_id key_id (optional)
     * @param  string $key_owner_type key_owner_type (optional)
     * @param  string $key_owner_id key_owner_id (optional)
     * @param  string[] $role_names role_names (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIDeleteSubjectRoleMapping($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        list($response) = $this->adminAPIDeleteSubjectRoleMappingWithHttpInfo($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);
        return $response;
    }

    /**
     * Operation adminAPIDeleteSubjectRoleMappingWithHttpInfo
     *
     * DeleteSubjectRoleMapping detaches the role from a subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIDeleteSubjectRoleMappingWithHttpInfo($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteSubjectRoleMappingRequest($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIDeleteSubjectRoleMappingAsync
     *
     * DeleteSubjectRoleMapping detaches the role from a subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteSubjectRoleMappingAsync($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        return $this->adminAPIDeleteSubjectRoleMappingAsyncWithHttpInfo($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIDeleteSubjectRoleMappingAsyncWithHttpInfo
     *
     * DeleteSubjectRoleMapping detaches the role from a subject entity in AuthZ policy store.
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIDeleteSubjectRoleMappingAsyncWithHttpInfo($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIDeleteSubjectRoleMappingRequest($role_id, $key_id, $key_owner_type, $key_owner_id, $role_names);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIDeleteSubjectRoleMapping'
     *
     * @param  string[] $role_id (optional)
     * @param  string $key_id (optional)
     * @param  string $key_owner_type (optional)
     * @param  string $key_owner_id (optional)
     * @param  string[] $role_names (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIDeleteSubjectRoleMappingRequest($role_id = null, $key_id = null, $key_owner_type = null, $key_owner_id = null, $role_names = null)
    {

        $resourcePath = '/v1/subject_role_mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($role_id)) {
            $queryParams['roleId'] = $role_id;
        } else
        if ($role_id !== null) {
            $queryParams['roleId'] = ObjectSerializer::toQueryValue($role_id);
        }
        // query params
        if ($key_id !== null) {
            $queryParams['key.id'] = ObjectSerializer::toQueryValue($key_id);
        }
        // query params
        if ($key_owner_type !== null) {
            $queryParams['key.ownerType'] = ObjectSerializer::toQueryValue($key_owner_type);
        }
        // query params
        if ($key_owner_id !== null) {
            $queryParams['key.ownerId'] = ObjectSerializer::toQueryValue($key_owner_id);
        }
        // query params
        if (is_array($role_names)) {
            $queryParams['roleNames'] = $role_names;
        } else
        if ($role_names !== null) {
            $queryParams['roleNames'] = ObjectSerializer::toQueryValue($role_names);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListAction
     *
     * ListAction returns a list of actions based on the supplied filters.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string $action_name_prefix action_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListActionResponse
     */
    public function adminAPIListAction($pagination_token = null, $action_name_prefix = null)
    {
        list($response) = $this->adminAPIListActionWithHttpInfo($pagination_token, $action_name_prefix);
        return $response;
    }

    /**
     * Operation adminAPIListActionWithHttpInfo
     *
     * ListAction returns a list of actions based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $action_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListActionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListActionWithHttpInfo($pagination_token = null, $action_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListActionResponse';
        $request = $this->adminAPIListActionRequest($pagination_token, $action_name_prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListActionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListActionAsync
     *
     * ListAction returns a list of actions based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $action_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListActionAsync($pagination_token = null, $action_name_prefix = null)
    {
        return $this->adminAPIListActionAsyncWithHttpInfo($pagination_token, $action_name_prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListActionAsyncWithHttpInfo
     *
     * ListAction returns a list of actions based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $action_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListActionAsyncWithHttpInfo($pagination_token = null, $action_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListActionResponse';
        $request = $this->adminAPIListActionRequest($pagination_token, $action_name_prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListAction'
     *
     * @param  string $pagination_token (optional)
     * @param  string $action_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListActionRequest($pagination_token = null, $action_name_prefix = null)
    {

        $resourcePath = '/v1/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if ($action_name_prefix !== null) {
            $queryParams['actionNamePrefix'] = ObjectSerializer::toQueryValue($action_name_prefix);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListPermission
     *
     * ListPermission returns a list of permissions satisfying the filter conditions.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string[] $resource_group_id_list resource_group_id_list (optional)
     * @param  string[] $resource_id_list resource_id_list (optional)
     * @param  string[] $action_id_list action_id_list (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListPermissionResponse
     */
    public function adminAPIListPermission($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $action_id_list = null)
    {
        list($response) = $this->adminAPIListPermissionWithHttpInfo($pagination_token, $resource_group_id_list, $resource_id_list, $action_id_list);
        return $response;
    }

    /**
     * Operation adminAPIListPermissionWithHttpInfo
     *
     * ListPermission returns a list of permissions satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string[] $action_id_list (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListPermissionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListPermissionWithHttpInfo($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $action_id_list = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListPermissionResponse';
        $request = $this->adminAPIListPermissionRequest($pagination_token, $resource_group_id_list, $resource_id_list, $action_id_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListPermissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListPermissionAsync
     *
     * ListPermission returns a list of permissions satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string[] $action_id_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListPermissionAsync($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $action_id_list = null)
    {
        return $this->adminAPIListPermissionAsyncWithHttpInfo($pagination_token, $resource_group_id_list, $resource_id_list, $action_id_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListPermissionAsyncWithHttpInfo
     *
     * ListPermission returns a list of permissions satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string[] $action_id_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListPermissionAsyncWithHttpInfo($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $action_id_list = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListPermissionResponse';
        $request = $this->adminAPIListPermissionRequest($pagination_token, $resource_group_id_list, $resource_id_list, $action_id_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListPermission'
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string[] $action_id_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListPermissionRequest($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $action_id_list = null)
    {

        $resourcePath = '/v1/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if (is_array($resource_group_id_list)) {
            $queryParams['resourceGroupIdList'] = $resource_group_id_list;
        } else
        if ($resource_group_id_list !== null) {
            $queryParams['resourceGroupIdList'] = ObjectSerializer::toQueryValue($resource_group_id_list);
        }
        // query params
        if (is_array($resource_id_list)) {
            $queryParams['resourceIdList'] = $resource_id_list;
        } else
        if ($resource_id_list !== null) {
            $queryParams['resourceIdList'] = ObjectSerializer::toQueryValue($resource_id_list);
        }
        // query params
        if (is_array($action_id_list)) {
            $queryParams['actionIdList'] = $action_id_list;
        } else
        if ($action_id_list !== null) {
            $queryParams['actionIdList'] = ObjectSerializer::toQueryValue($action_id_list);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListPolicy
     *
     * ListPolicy returns a list of policies satisfying the filter conditions.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string[] $resource_group_id_list resource_group_id_list (optional)
     * @param  string[] $resource_id_list resource_id_list (optional)
     * @param  string $role_id DEPRECATED: use role_names and org_id instead. (optional)
     * @param  string[] $service_id_list service_id_list (optional)
     * @param  string[] $permission_id_list permission_id_list (optional)
     * @param  string[] $role_names role_names (optional)
     * @param  string $org_id org_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListPolicyResponse
     */
    public function adminAPIListPolicy($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $role_id = null, $service_id_list = null, $permission_id_list = null, $role_names = null, $org_id = null)
    {
        list($response) = $this->adminAPIListPolicyWithHttpInfo($pagination_token, $resource_group_id_list, $resource_id_list, $role_id, $service_id_list, $permission_id_list, $role_names, $org_id);
        return $response;
    }

    /**
     * Operation adminAPIListPolicyWithHttpInfo
     *
     * ListPolicy returns a list of policies satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string $role_id DEPRECATED: use role_names and org_id instead. (optional)
     * @param  string[] $service_id_list (optional)
     * @param  string[] $permission_id_list (optional)
     * @param  string[] $role_names (optional)
     * @param  string $org_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListPolicyResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListPolicyWithHttpInfo($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $role_id = null, $service_id_list = null, $permission_id_list = null, $role_names = null, $org_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListPolicyResponse';
        $request = $this->adminAPIListPolicyRequest($pagination_token, $resource_group_id_list, $resource_id_list, $role_id, $service_id_list, $permission_id_list, $role_names, $org_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListPolicyAsync
     *
     * ListPolicy returns a list of policies satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string $role_id DEPRECATED: use role_names and org_id instead. (optional)
     * @param  string[] $service_id_list (optional)
     * @param  string[] $permission_id_list (optional)
     * @param  string[] $role_names (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListPolicyAsync($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $role_id = null, $service_id_list = null, $permission_id_list = null, $role_names = null, $org_id = null)
    {
        return $this->adminAPIListPolicyAsyncWithHttpInfo($pagination_token, $resource_group_id_list, $resource_id_list, $role_id, $service_id_list, $permission_id_list, $role_names, $org_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListPolicyAsyncWithHttpInfo
     *
     * ListPolicy returns a list of policies satisfying the filter conditions.
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string $role_id DEPRECATED: use role_names and org_id instead. (optional)
     * @param  string[] $service_id_list (optional)
     * @param  string[] $permission_id_list (optional)
     * @param  string[] $role_names (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListPolicyAsyncWithHttpInfo($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $role_id = null, $service_id_list = null, $permission_id_list = null, $role_names = null, $org_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListPolicyResponse';
        $request = $this->adminAPIListPolicyRequest($pagination_token, $resource_group_id_list, $resource_id_list, $role_id, $service_id_list, $permission_id_list, $role_names, $org_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListPolicy'
     *
     * @param  string $pagination_token (optional)
     * @param  string[] $resource_group_id_list (optional)
     * @param  string[] $resource_id_list (optional)
     * @param  string $role_id DEPRECATED: use role_names and org_id instead. (optional)
     * @param  string[] $service_id_list (optional)
     * @param  string[] $permission_id_list (optional)
     * @param  string[] $role_names (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListPolicyRequest($pagination_token = null, $resource_group_id_list = null, $resource_id_list = null, $role_id = null, $service_id_list = null, $permission_id_list = null, $role_names = null, $org_id = null)
    {

        $resourcePath = '/v1/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if (is_array($resource_group_id_list)) {
            $queryParams['resourceGroupIdList'] = $resource_group_id_list;
        } else
        if ($resource_group_id_list !== null) {
            $queryParams['resourceGroupIdList'] = ObjectSerializer::toQueryValue($resource_group_id_list);
        }
        // query params
        if (is_array($resource_id_list)) {
            $queryParams['resourceIdList'] = $resource_id_list;
        } else
        if ($resource_id_list !== null) {
            $queryParams['resourceIdList'] = ObjectSerializer::toQueryValue($resource_id_list);
        }
        // query params
        if ($role_id !== null) {
            $queryParams['roleId'] = ObjectSerializer::toQueryValue($role_id);
        }
        // query params
        if (is_array($service_id_list)) {
            $queryParams['serviceIdList'] = $service_id_list;
        } else
        if ($service_id_list !== null) {
            $queryParams['serviceIdList'] = ObjectSerializer::toQueryValue($service_id_list);
        }
        // query params
        if (is_array($permission_id_list)) {
            $queryParams['permissionIdList'] = $permission_id_list;
        } else
        if ($permission_id_list !== null) {
            $queryParams['permissionIdList'] = ObjectSerializer::toQueryValue($permission_id_list);
        }
        // query params
        if (is_array($role_names)) {
            $queryParams['roleNames'] = $role_names;
        } else
        if ($role_names !== null) {
            $queryParams['roleNames'] = ObjectSerializer::toQueryValue($role_names);
        }
        // query params
        if ($org_id !== null) {
            $queryParams['orgId'] = ObjectSerializer::toQueryValue($org_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListResource
     *
     * ListResource returns a list of resources based on the supplied filters.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string $resource_group_id resource_group_id (optional)
     * @param  string $resource_group_name_prefix resource_group_name_prefix (optional)
     * @param  string $resource_name_prefix resource_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListResourceResponse
     */
    public function adminAPIListResource($pagination_token = null, $resource_group_id = null, $resource_group_name_prefix = null, $resource_name_prefix = null)
    {
        list($response) = $this->adminAPIListResourceWithHttpInfo($pagination_token, $resource_group_id, $resource_group_name_prefix, $resource_name_prefix);
        return $response;
    }

    /**
     * Operation adminAPIListResourceWithHttpInfo
     *
     * ListResource returns a list of resources based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_id (optional)
     * @param  string $resource_group_name_prefix (optional)
     * @param  string $resource_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListResourceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListResourceWithHttpInfo($pagination_token = null, $resource_group_id = null, $resource_group_name_prefix = null, $resource_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListResourceResponse';
        $request = $this->adminAPIListResourceRequest($pagination_token, $resource_group_id, $resource_group_name_prefix, $resource_name_prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListResourceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListResourceAsync
     *
     * ListResource returns a list of resources based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_id (optional)
     * @param  string $resource_group_name_prefix (optional)
     * @param  string $resource_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListResourceAsync($pagination_token = null, $resource_group_id = null, $resource_group_name_prefix = null, $resource_name_prefix = null)
    {
        return $this->adminAPIListResourceAsyncWithHttpInfo($pagination_token, $resource_group_id, $resource_group_name_prefix, $resource_name_prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListResourceAsyncWithHttpInfo
     *
     * ListResource returns a list of resources based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_id (optional)
     * @param  string $resource_group_name_prefix (optional)
     * @param  string $resource_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListResourceAsyncWithHttpInfo($pagination_token = null, $resource_group_id = null, $resource_group_name_prefix = null, $resource_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListResourceResponse';
        $request = $this->adminAPIListResourceRequest($pagination_token, $resource_group_id, $resource_group_name_prefix, $resource_name_prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListResource'
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_id (optional)
     * @param  string $resource_group_name_prefix (optional)
     * @param  string $resource_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListResourceRequest($pagination_token = null, $resource_group_id = null, $resource_group_name_prefix = null, $resource_name_prefix = null)
    {

        $resourcePath = '/v1/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if ($resource_group_id !== null) {
            $queryParams['resourceGroupId'] = ObjectSerializer::toQueryValue($resource_group_id);
        }
        // query params
        if ($resource_group_name_prefix !== null) {
            $queryParams['resourceGroupNamePrefix'] = ObjectSerializer::toQueryValue($resource_group_name_prefix);
        }
        // query params
        if ($resource_name_prefix !== null) {
            $queryParams['resourceNamePrefix'] = ObjectSerializer::toQueryValue($resource_name_prefix);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListResourceGroup
     *
     * ListResourceGroup returns a list of resource group entities from AuthZ policy store.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string $resource_group_name_prefix resource_group_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListResourceGroupResponse
     */
    public function adminAPIListResourceGroup($pagination_token = null, $resource_group_name_prefix = null)
    {
        list($response) = $this->adminAPIListResourceGroupWithHttpInfo($pagination_token, $resource_group_name_prefix);
        return $response;
    }

    /**
     * Operation adminAPIListResourceGroupWithHttpInfo
     *
     * ListResourceGroup returns a list of resource group entities from AuthZ policy store.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListResourceGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListResourceGroupWithHttpInfo($pagination_token = null, $resource_group_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListResourceGroupResponse';
        $request = $this->adminAPIListResourceGroupRequest($pagination_token, $resource_group_name_prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListResourceGroupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListResourceGroupAsync
     *
     * ListResourceGroup returns a list of resource group entities from AuthZ policy store.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListResourceGroupAsync($pagination_token = null, $resource_group_name_prefix = null)
    {
        return $this->adminAPIListResourceGroupAsyncWithHttpInfo($pagination_token, $resource_group_name_prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListResourceGroupAsyncWithHttpInfo
     *
     * ListResourceGroup returns a list of resource group entities from AuthZ policy store.
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListResourceGroupAsyncWithHttpInfo($pagination_token = null, $resource_group_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListResourceGroupResponse';
        $request = $this->adminAPIListResourceGroupRequest($pagination_token, $resource_group_name_prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListResourceGroup'
     *
     * @param  string $pagination_token (optional)
     * @param  string $resource_group_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListResourceGroupRequest($pagination_token = null, $resource_group_name_prefix = null)
    {

        $resourcePath = '/v1/resource_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if ($resource_group_name_prefix !== null) {
            $queryParams['resourceGroupNamePrefix'] = ObjectSerializer::toQueryValue($resource_group_name_prefix);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListRole
     *
     * ListRole returns a list of roles matching the filter condition.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string $role_name_prefix role_name_prefix (optional)
     * @param  string[] $role_names role_names (optional)
     * @param  string[] $role_ids role_ids (optional)
     * @param  string $org_id org_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListRoleResponse
     */
    public function adminAPIListRole($pagination_token = null, $role_name_prefix = null, $role_names = null, $role_ids = null, $org_id = null)
    {
        list($response) = $this->adminAPIListRoleWithHttpInfo($pagination_token, $role_name_prefix, $role_names, $role_ids, $org_id);
        return $response;
    }

    /**
     * Operation adminAPIListRoleWithHttpInfo
     *
     * ListRole returns a list of roles matching the filter condition.
     *
     * @param  string $pagination_token (optional)
     * @param  string $role_name_prefix (optional)
     * @param  string[] $role_names (optional)
     * @param  string[] $role_ids (optional)
     * @param  string $org_id (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListRoleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListRoleWithHttpInfo($pagination_token = null, $role_name_prefix = null, $role_names = null, $role_ids = null, $org_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListRoleResponse';
        $request = $this->adminAPIListRoleRequest($pagination_token, $role_name_prefix, $role_names, $role_ids, $org_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListRoleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListRoleAsync
     *
     * ListRole returns a list of roles matching the filter condition.
     *
     * @param  string $pagination_token (optional)
     * @param  string $role_name_prefix (optional)
     * @param  string[] $role_names (optional)
     * @param  string[] $role_ids (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListRoleAsync($pagination_token = null, $role_name_prefix = null, $role_names = null, $role_ids = null, $org_id = null)
    {
        return $this->adminAPIListRoleAsyncWithHttpInfo($pagination_token, $role_name_prefix, $role_names, $role_ids, $org_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListRoleAsyncWithHttpInfo
     *
     * ListRole returns a list of roles matching the filter condition.
     *
     * @param  string $pagination_token (optional)
     * @param  string $role_name_prefix (optional)
     * @param  string[] $role_names (optional)
     * @param  string[] $role_ids (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListRoleAsyncWithHttpInfo($pagination_token = null, $role_name_prefix = null, $role_names = null, $role_ids = null, $org_id = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListRoleResponse';
        $request = $this->adminAPIListRoleRequest($pagination_token, $role_name_prefix, $role_names, $role_ids, $org_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListRole'
     *
     * @param  string $pagination_token (optional)
     * @param  string $role_name_prefix (optional)
     * @param  string[] $role_names (optional)
     * @param  string[] $role_ids (optional)
     * @param  string $org_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListRoleRequest($pagination_token = null, $role_name_prefix = null, $role_names = null, $role_ids = null, $org_id = null)
    {

        $resourcePath = '/v1/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if ($role_name_prefix !== null) {
            $queryParams['roleNamePrefix'] = ObjectSerializer::toQueryValue($role_name_prefix);
        }
        // query params
        if (is_array($role_names)) {
            $queryParams['roleNames'] = $role_names;
        } else
        if ($role_names !== null) {
            $queryParams['roleNames'] = ObjectSerializer::toQueryValue($role_names);
        }
        // query params
        if (is_array($role_ids)) {
            $queryParams['roleIds'] = $role_ids;
        } else
        if ($role_ids !== null) {
            $queryParams['roleIds'] = ObjectSerializer::toQueryValue($role_ids);
        }
        // query params
        if ($org_id !== null) {
            $queryParams['orgId'] = ObjectSerializer::toQueryValue($org_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIListService
     *
     * ListService returns a list of services based on the supplied filters.
     *
     * @param  string $pagination_token pagination_token (optional)
     * @param  string $service_name_prefix service_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ListServiceResponse
     */
    public function adminAPIListService($pagination_token = null, $service_name_prefix = null)
    {
        list($response) = $this->adminAPIListServiceWithHttpInfo($pagination_token, $service_name_prefix);
        return $response;
    }

    /**
     * Operation adminAPIListServiceWithHttpInfo
     *
     * ListService returns a list of services based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $service_name_prefix (optional)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ListServiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIListServiceWithHttpInfo($pagination_token = null, $service_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListServiceResponse';
        $request = $this->adminAPIListServiceRequest($pagination_token, $service_name_prefix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ListServiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIListServiceAsync
     *
     * ListService returns a list of services based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $service_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListServiceAsync($pagination_token = null, $service_name_prefix = null)
    {
        return $this->adminAPIListServiceAsyncWithHttpInfo($pagination_token, $service_name_prefix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIListServiceAsyncWithHttpInfo
     *
     * ListService returns a list of services based on the supplied filters.
     *
     * @param  string $pagination_token (optional)
     * @param  string $service_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIListServiceAsyncWithHttpInfo($pagination_token = null, $service_name_prefix = null)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ListServiceResponse';
        $request = $this->adminAPIListServiceRequest($pagination_token, $service_name_prefix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIListService'
     *
     * @param  string $pagination_token (optional)
     * @param  string $service_name_prefix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIListServiceRequest($pagination_token = null, $service_name_prefix = null)
    {

        $resourcePath = '/v1/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token);
        }
        // query params
        if ($service_name_prefix !== null) {
            $queryParams['serviceNamePrefix'] = ObjectSerializer::toQueryValue($service_name_prefix);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIRecon
     *
     * Recon is to be used for reconciliation of policies between MySQL & Consul.
     *
     * @param  \AuthzAdmin\Client\Model\V1Null $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Null
     */
    public function adminAPIRecon($body)
    {
        list($response) = $this->adminAPIReconWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIReconWithHttpInfo
     *
     * Recon is to be used for reconciliation of policies between MySQL & Consul.
     *
     * @param  \AuthzAdmin\Client\Model\V1Null $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIReconWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIReconRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Null',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIReconAsync
     *
     * Recon is to be used for reconciliation of policies between MySQL & Consul.
     *
     * @param  \AuthzAdmin\Client\Model\V1Null $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIReconAsync($body)
    {
        return $this->adminAPIReconAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIReconAsyncWithHttpInfo
     *
     * Recon is to be used for reconciliation of policies between MySQL & Consul.
     *
     * @param  \AuthzAdmin\Client\Model\V1Null $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIReconAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Null';
        $request = $this->adminAPIReconRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIRecon'
     *
     * @param  \AuthzAdmin\Client\Model\V1Null $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIReconRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIRecon'
            );
        }

        $resourcePath = '/v1/recon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdateAction
     *
     * UpdateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Action
     */
    public function adminAPIUpdateAction($body)
    {
        list($response) = $this->adminAPIUpdateActionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdateActionWithHttpInfo
     *
     * UpdateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Action, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdateActionWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Action';
        $request = $this->adminAPIUpdateActionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Action',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdateActionAsync
     *
     * UpdateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateActionAsync($body)
    {
        return $this->adminAPIUpdateActionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdateActionAsyncWithHttpInfo
     *
     * UpdateAction creates the action entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateActionAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Action';
        $request = $this->adminAPIUpdateActionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdateAction'
     *
     * @param  \AuthzAdmin\Client\Model\V1Action $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdateActionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdateAction'
            );
        }

        $resourcePath = '/v1/actions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdatePermission
     *
     * UpdatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Permission
     */
    public function adminAPIUpdatePermission($body)
    {
        list($response) = $this->adminAPIUpdatePermissionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdatePermissionWithHttpInfo
     *
     * UpdatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Permission, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdatePermissionWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Permission';
        $request = $this->adminAPIUpdatePermissionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Permission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdatePermissionAsync
     *
     * UpdatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdatePermissionAsync($body)
    {
        return $this->adminAPIUpdatePermissionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdatePermissionAsyncWithHttpInfo
     *
     * UpdatePermission creates the permission entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdatePermissionAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Permission';
        $request = $this->adminAPIUpdatePermissionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdatePermission'
     *
     * @param  \AuthzAdmin\Client\Model\V1Permission $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdatePermissionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdatePermission'
            );
        }

        $resourcePath = '/v1/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdatePolicy
     *
     * UpdatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Policy
     */
    public function adminAPIUpdatePolicy($body)
    {
        list($response) = $this->adminAPIUpdatePolicyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdatePolicyWithHttpInfo
     *
     * UpdatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Policy, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdatePolicyWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Policy';
        $request = $this->adminAPIUpdatePolicyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Policy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdatePolicyAsync
     *
     * UpdatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdatePolicyAsync($body)
    {
        return $this->adminAPIUpdatePolicyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdatePolicyAsyncWithHttpInfo
     *
     * UpdatePolicy creates the policy entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdatePolicyAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Policy';
        $request = $this->adminAPIUpdatePolicyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdatePolicy'
     *
     * @param  \AuthzAdmin\Client\Model\V1Policy $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdatePolicyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdatePolicy'
            );
        }

        $resourcePath = '/v1/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdateResource
     *
     * UpdateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Resource
     */
    public function adminAPIUpdateResource($body)
    {
        list($response) = $this->adminAPIUpdateResourceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdateResourceWithHttpInfo
     *
     * UpdateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Resource, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdateResourceWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Resource';
        $request = $this->adminAPIUpdateResourceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Resource',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdateResourceAsync
     *
     * UpdateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateResourceAsync($body)
    {
        return $this->adminAPIUpdateResourceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdateResourceAsyncWithHttpInfo
     *
     * UpdateResource creates the resource entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateResourceAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Resource';
        $request = $this->adminAPIUpdateResourceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdateResource'
     *
     * @param  \AuthzAdmin\Client\Model\V1Resource $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdateResourceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdateResource'
            );
        }

        $resourcePath = '/v1/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdateResourceGroup
     *
     * UpdateResourceGroup updates the given resource group entity.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1ResourceGroup
     */
    public function adminAPIUpdateResourceGroup($body)
    {
        list($response) = $this->adminAPIUpdateResourceGroupWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdateResourceGroupWithHttpInfo
     *
     * UpdateResourceGroup updates the given resource group entity.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1ResourceGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdateResourceGroupWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroup';
        $request = $this->adminAPIUpdateResourceGroupRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1ResourceGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdateResourceGroupAsync
     *
     * UpdateResourceGroup updates the given resource group entity.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateResourceGroupAsync($body)
    {
        return $this->adminAPIUpdateResourceGroupAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdateResourceGroupAsyncWithHttpInfo
     *
     * UpdateResourceGroup updates the given resource group entity.
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateResourceGroupAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1ResourceGroup';
        $request = $this->adminAPIUpdateResourceGroupRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdateResourceGroup'
     *
     * @param  \AuthzAdmin\Client\Model\V1ResourceGroup $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdateResourceGroupRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdateResourceGroup'
            );
        }

        $resourcePath = '/v1/resource_groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdateRole
     *
     * UpdateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Role
     */
    public function adminAPIUpdateRole($body)
    {
        list($response) = $this->adminAPIUpdateRoleWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdateRoleWithHttpInfo
     *
     * UpdateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Role, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdateRoleWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Role';
        $request = $this->adminAPIUpdateRoleRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Role',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdateRoleAsync
     *
     * UpdateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateRoleAsync($body)
    {
        return $this->adminAPIUpdateRoleAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdateRoleAsyncWithHttpInfo
     *
     * UpdateRole creates the role entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateRoleAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Role';
        $request = $this->adminAPIUpdateRoleRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdateRole'
     *
     * @param  \AuthzAdmin\Client\Model\V1Role $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdateRoleRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdateRole'
            );
        }

        $resourcePath = '/v1/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAPIUpdateService
     *
     * UpdateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AuthzAdmin\Client\Model\V1Service
     */
    public function adminAPIUpdateService($body)
    {
        list($response) = $this->adminAPIUpdateServiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation adminAPIUpdateServiceWithHttpInfo
     *
     * UpdateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \AuthzAdmin\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AuthzAdmin\Client\Model\V1Service, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAPIUpdateServiceWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Service';
        $request = $this->adminAPIUpdateServiceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\V1Service',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AuthzAdmin\Client\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAPIUpdateServiceAsync
     *
     * UpdateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateServiceAsync($body)
    {
        return $this->adminAPIUpdateServiceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAPIUpdateServiceAsyncWithHttpInfo
     *
     * UpdateService creates the service entity in AuthZ policy store.
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAPIUpdateServiceAsyncWithHttpInfo($body)
    {
        $returnType = '\AuthzAdmin\Client\Model\V1Service';
        $request = $this->adminAPIUpdateServiceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAPIUpdateService'
     *
     * @param  \AuthzAdmin\Client\Model\V1Service $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adminAPIUpdateServiceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling adminAPIUpdateService'
            );
        }

        $resourcePath = '/v1/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
