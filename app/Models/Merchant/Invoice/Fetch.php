<?php

namespace RZP\Models\Merchant\Invoice;

use RZP\Base\Fetch as BaseFetch;
use RZP\Http\BasicAuth\Type as AuthType;
use RZP\Exception\BadRequestValidationFailureException;

class Fetch extends BaseFetch
{
    const RULES = [
        self::DEFAULTS => [
            Entity::ID             => 'sometimes|public_id|size:19',
            Entity::MERCHANT_ID    => 'sometimes|unsigned_id',
            Entity::INVOICE_NUMBER => 'sometimes|size:16',
            Entity::GSTIN          => 'sometimes|string|size:15',
            Entity::MONTH          => 'sometimes|integer|min:1|max:12',
            Entity::YEAR           => 'sometimes|digits:4',
        ],
        AuthType::PROXY_AUTH => [
            Entity::TYPE => 'sometimes',
        ],
    ];

    const ACCESSES = [
        AuthType::PROXY_AUTH => [
            Entity::YEAR,
            Entity::TYPE,
            Entity::MONTH,
        ],
        AuthType::ADMIN_AUTH => [
            Entity::ID,
            Entity::MERCHANT_ID,
            Entity::INVOICE_NUMBER,
            Entity::GSTIN,
        ],
    ];

    protected function validateAdditional(array $param)
    {
        parent::validateAdditional($param); // TODO: Change the autogenerated stub

        $month = $param[Entity::MONTH] ?? null;

        $year = $param[Entity::YEAR] ?? null;

        if($this->auth->isAdminAuth() === true)
        {
            $merchantId = $param[Entity::MERCHANT_ID] ?? null;

            if (!empty($month))
            {
                if(empty($year) or empty($merchantId))
                {
                    throw new BadRequestValidationFailureException(
                        'Year and merchant_id should be sent with month or only year can be sent with merchant_id',
                        $month,
                        $param
                    );
                }
            }
            else if(!empty($year) and empty($merchantId))
            {
                throw new BadRequestValidationFailureException(
                    'Only year not allowed . Year should be sent with merchant_id',
                    $year,
                    $param
                );
            }
        }
        else if($this->auth->isProxyAuth() === true)
        {
            if (!empty($month) and empty($year))
            {
                throw new BadRequestValidationFailureException(
                    'Only month not allowed . Year should be sent with month or only year can be sent',
                    $month,
                    $param
                );
            }
        }
    }
}
