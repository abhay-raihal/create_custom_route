<?php

namespace RZP\Models\Merchant\Invoice\EInvoice;

use RZP\Base\Fetch as BaseFetch;
use RZP\Http\BasicAuth\Type as AuthType;
use RZP\Exception\BadRequestValidationFailureException;

class Fetch extends BaseFetch
{
    const RULES = [
        self::DEFAULTS => [
            Entity::ID              => 'sometimes|public_id|size:19',
            Entity::MERCHANT_ID     => 'sometimes|unsigned_id',
            Entity::MONTH           => 'sometimes|integer|min:1|max:12',
            Entity::YEAR            => 'sometimes|digits:4',
            Entity::TYPE            => 'sometimes|string|in:PG,BANKING',
            Entity::STATUS          => 'sometimes|string',
        ],
    ];

    const ACCESSES = [
        AuthType::ADMIN_AUTH => [
            Entity::ID,
            Entity::MERCHANT_ID,
            Entity::MONTH,
            Entity::YEAR,
            Entity::TYPE,
            Entity::STATUS,
        ],
    ];

    protected function validateAdditional(array $param)
    {
        parent::validateAdditional($param); // TODO: Change the autogenerated stub

        $month = $param[Entity::MONTH] ?? null;

        $year = $param[Entity::YEAR] ?? null;

        if($this->auth->isAdminAuth() === true)
        {
            $merchantId = $param[Entity::MERCHANT_ID] ?? null;

            if (empty($month) === false)
            {
                if((empty($year) === true) or (empty($merchantId) === true))
                {
                    throw new BadRequestValidationFailureException(
                        'Year and merchant_id should be sent with month or only year can be sent with merchant_id',
                        $month,
                        $param
                    );
                }
            }
            else if((empty($month) === false) and (empty($merchantId) === true))
            {
                throw new BadRequestValidationFailureException(
                    'Only month not allowed . Month should be sent with merchant_id',
                    $year,
                    $param
                );
            }
        }
    }
}
