<?php

namespace RZP\Gateway\FirstData;

/**
 * FirstData returns approval code string in most of responses,
 * we parse for error and auth code from this string.
 * Format :
 *     Success : Y:<auth_code>:<suffix>
 *     Failure : N:<code>:<error message>
 *
 * Class ApprovalCode
 * @package RZP\Gateway\FirstData
 */
class ApprovalCode
{
    /**
     * Database only accepts 100 characters
     */
    const MAX_APPROVAL_CODE_LENGTH = 100;

    const MAX_ERROR_CODE_LENGTH    = 100;

    /**
     * Actual approval code from bank
     *
     * @var string
     */
    protected $approvalCode;

    /**
     * First character of approval code i.e Y or N
     * Decides whether it's for success or failure
     *
     * @var bool
     */
    protected $success = false;

    /**
     * If failure, error code is generated by
     * concatenating first and second part
     *
     * @var string
     */
    protected $errorCode;

    /**
     * If failure anything after error code is considered error message
     *
     * @var string
     */
    protected $errorMessage;

    /**
     * For success, the second part of approval_code is authCode
     *
     * @var string
     */
    protected $authCode;

    /**
     * Approval Code is sent as a concatenation of the code ('N:224')
     * and the reason ('Timed out') separated by a ':'.
     * Eg. "N:87:Bad Track Data" or "Y:100000:XYZ:ABC"
     * In success scenario where code starts with Y
     * The second field is auth_code
     *
     * @param string $approvalCode
     * @return array
     */
    public function __construct(string $approvalCode)
    {
        $this->approvalCode = $approvalCode;

        $exploded = explode(':', $approvalCode);

        if ($exploded[0] === 'Y')
        {
            $this->success = true;

            if (isset($exploded[1]) === true)
            {
                $this->authCode = $exploded[1];
            }
        }
        else if ($exploded[0] === 'N')
        {
            $this->errorCode     = implode(':', array_slice($exploded, 0, 2));

            $this->errorMessage  = implode(':', array_slice($exploded, 2));
        }
        else
        {
            $this->errorCode = $approvalCode;
        }
    }

    public function isSuccess(): bool
    {
        return $this->success;
    }

    public function getFormattedCode()
    {
        return substr($this->approvalCode, 0, self::MAX_APPROVAL_CODE_LENGTH);
    }

    public function getErrorCode()
    {
        return substr($this->errorCode, 0, self::MAX_ERROR_CODE_LENGTH);
    }

    public function getErrorMessage()
    {
        return $this->errorMessage;
    }

    public function getAuthCode()
    {
        return $this->authCode;
    }
}
