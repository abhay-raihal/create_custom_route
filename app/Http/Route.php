<?php

namespace RZP\Http;

use ApiResponse;
use RZP\Constants\Mode;
use RZP\Constants\Entity;
use Illuminate\Routing\Router;
use RZP\Models\IdempotencyKey;
use RZP\Http\Request\Requests;
use RZP\Foundation\Application;
use RZP\Http\BasicAuth\BasicAuth;
use RZP\Models\Feature\Constants as Feature;
use RZP\Models\Admin\Permission\Name as Permission;
use RZP\Base\Database\LagChecker\HeartbeatLagChecker;

class Route
{
    protected $namespace = 'RZP\Http\Controllers';

    protected static $apiRoutes = [
        'customAction'                                            => ['post',      'customroute',                                          'PayoutController@newController'],


        'payments_rearch_backfill'                          => ['post',     'payments/backfill',                                    'PaymentController@callCpsForBackfilling'                           ],
        'merchant_nc_revamp_eligibility_admin'              => ['get',      'merchant/activation/{id}/clarifications/eligibility',  'MerchantController@getMerchantNcRevampEligibility'                 ],
        'merchant_nc_revamp_eligibility'                    => ['get',      'merchant/activation/clarifications/eligibility',       'MerchantController@getMerchantNcRevampEligibility'                 ],
        'merchant_activation_clarifications_save_admin'     => ['post',     'merchant/activation/{id}/clarifications',              'MerchantController@postMerchantClarificationDetails'               ],
        'merchant_activation_clarifications_fetch_admin'    => ['get',      'merchant/activation/{id}/clarifications',              'MerchantController@getMerchantClarificationDetails'                ],
        'merchant_activation_clarifications_save'           => ['post',     'merchant/activation/clarifications',                   'MerchantController@postMerchantResponseToClarifications'           ],
        'merchant_activation_clarifications_fetch'          => ['get',      'merchant/activation/clarifications',                   'MerchantController@getMerchantClarificationDetails'                ],
        'merchant_activation_clarifications_fetch_internal' => ['get',      'merchant/internal/activation/{id}/clarifications',     'MerchantController@getMerchantClarificationDetails'                ],
        'merchant_activation_clarifications_save_internal'  => ['post',     'merchant/internal/activation/{id}/clarifications',     'MerchantController@postMerchantResponseToClarifications'           ],
        'merchant_nc_revamp_eligibility_internal'           => ['get',      'merchant/internal/activation/{id}/clarifications/eligibility', 'MerchantController@getMerchantNcRevampEligibility'         ],
        'payments_api_backfill'                             => ['post',     'payments/api/backfill',                                    'PaymentController@callApiForBackfilling',                      ],

        // internal
        'internal_create'    => ['post', 'internal', 'InternalController@create'],
        'internal_fail'      => ['post', 'internal/{id}/fail', 'InternalController@fail'],
        'internal_reconcile' => ['patch', 'internal/{id}/reconcile', 'InternalController@reconcile'],
        'internal_receive'   => ['patch', 'internal/{id}/receive', 'InternalController@receive'],

        //friend buy
        'friend_buy_reward_validation'  =>  ['post',    'friendbuy/reward_validation',  'ReferralController@performRewardValidation' ],

        //mailmodo
        'mailmodo_l1_form_submission'  =>  ['post',    'mailmodo/l1_form',  'AMPEmailController@submitMailModoL1Form' ],

        // Dev routes
        'inspector_view_get'                      => ['get',      '_inspector',                                      'GenericController@getInspectorIndex'                               ],

        // ------------------------------ Checkout Order Routes - START ------------------------------
        'create_checkout_order'                    => ['post',      'checkout/order',                               'CheckoutOrderController@create'    ],
        'close_checkout_order'                     => ['delete',    'checkout/order/{id}',                          'CheckoutOrderController@close'     ],
        'checkout_orders_partition_cron'           => ['post',      'checkout/orders/partition',                    'CheckoutOrderController@createCheckoutOrdersPartition'              ],
        // ------------------------------ Checkout Order Routes - END ------------------------------

        //qr code cutoff config
        'qr_configs_create'                        => ['post',      '/payment/qr_codes/configs/create',             'QrCodeConfigController@create'                                      ],
        'qr_configs_fetch'                         => ['get',       '/payment/qr_codes/configs',                    'QrCodeConfigController@fetchConfigsForMerchant'                     ],
        'qr_configs_delete'                        => ['delete',    '/payment/qr_codes/configs',                    'QrCodeConfigController@delete'                                      ],
        'qr_configs_update'                        => ['post',      '/payment/qr_codes/configs/update',             'QrCodeConfigController@update'                                      ],
        //qr code demo
        //'qr_code_demo'                             => ['post',     'payments/qr_codes/demo',                         'QrCodeController@qrDemo'                                           ],
        //'qr_code_demo_cors'                        => ['options',  'payments/qr_codes/demo',                         'QrCodeController@qrDemoCors'                                       ],
        // qr code search
        'qr_code_fetch_multiple'                   => ['get',      'payments/qr_codes',                              'QrCodeController@list'                                             ],
        'qr_payments_fetch_multiple'               => ['get',      'payments/qr_payments',                           'QrPaymentController@fetchMultiplePayments'                         ],
        'qr_payment_fetch_for_qr_code'             => ['get',      'payments/qr_codes/{id}/payments',                'QrPaymentController@fetchQrCodePayments'                           ],
        // App routes
        'account'                                  => ['get',      'account',                                        'PublicController@getAccount'                                       ],
        'checkout'                                 => ['get',      'checkout',                                       'MerchantController@getCheckout'                                    ],
        'checkout_public'                          => ['get',      'checkout/public',                                'MerchantController@getCheckoutPublic'                              ],
        'checkout_public_canary'                   => ['get',      'checkout/public/canary',                         'MerchantController@getCheckoutPublic'                              ],
        'fetch_payment_config'                     => ['get',      'payment/config/{type}',                          'ConfigController@fetchPaymentConfig'                               ],
        'fetch_payment_config_checkout_internal'   => ['get',      'internal/payment/config/checkout',               'ConfigController@fetchPaymentConfigForCheckout'                    ],
        'fetch_payment_config_admin'               => ['get',      'admin/payment/config/{type}',                    'ConfigController@fetchPaymentConfig'                               ],
        'create_payment_config'                    => ['post',     'payment/config',                                 'ConfigController@createPaymentConfig'                              ],
        'create_payment_config_bulk'               => ['post',     'payment/config/bulk',                            'ConfigController@createPaymentConfigBulk'                          ],
        'create_payment_config_bulk'.
        '_via_batch'                               => ['post',     'payment/config/bulk/batch',                      'ConfigController@createPaymentConfigBulk'                          ],
        'create_payment_config_admin'              => ['post',     'admin/payment/config',                           'ConfigController@createPaymentConfig'                              ],
        'update_payment_config'                    => ['patch',    'payment/config',                                 'ConfigController@updatePaymentConfig'                              ],
        'update_payment_config_admin'              => ['patch',    'admin/payment/config',                           'ConfigController@updatePaymentConfig'                              ],
        'get_irctc_settlement_file_admin'          => ['get',      'admin/irctc/settlement/{date}',                   'SettlementController@getIrctcSettlementFile'                              ],
        'delete_payment_config'                    => ['delete',   'payment/config',                                 'ConfigController@deletePaymentConfig'                              ],
        'update_late_auth_config_admin_bulk'       => ['patch',    'admin/lateauth/config/bulk',                     'ConfigController@updateLateAuthConfigBulk'                         ],
        'sync_pg_router_order_bulk'                => ['post',     'bulk/sync/orders',                               'OrderController@bulkSyncOrderToPgRouter'                          ],
        // callback_url case handler for automatic checkout
        'checkout_onyx'                            => ['post',     'checkout/onyx',                                  'PublicController@postCallbackUrlWithParams'                        ],

        // hosted checkout for IRCTC and Bescom
        'checkout_embedded'                        => ['post',     'checkout/embedded',                              'PublicController@renderEmbedded'                                   ],
        'checkout_embedded_get'                    => ['get',     'checkout/embedded',                              'PublicController@renderEmbedded'                                   ],
        'checkout_hdfcvas'                         => ['post',     'checkout/hdfcvas',                               'PublicController@renderHdfcVas'                                    ],
        'checkout_hosted'                          => ['post',     'checkout/hosted',                                'PublicController@renderCheckoutHosted'                             ],
        'checkout_hosted_get'                      => ['get',      'checkout/hosted',                                'PublicController@renderCheckoutHosted'                             ],
        // TODO: Check Splunk and remove the write here
        'merchant_methods'                         => ['get',      'methods',                                        'MerchantController@getPaymentMethods'                              ],
        'merchant_methods_offers_checkout_internal'=> ['post',     'internal/methods_offers/checkout',               'MerchantController@getPaymentMethodsWithOffersForCheckout'         ],
        'merchant_methods_hdfc_debit_emi'         => ['post',      'methods/hdfc_debit_emi',                         'MerchantController@updateHdfcDebitEmiPaymentMethods'                              ],
        'affordability_methods_migration'         =>  ['post',     'affordability_methods/migration',                'AffordabilityMigrationController@updateAffordabilityPaymentMethods'                              ],

        'merchant_methods_downtime'                => ['get',      'methods/downtime',                               'MerchantController@getPublicGatewayDowntimeData'                   ],
        'merchant_checkout_preferences'            => ['get',      'preferences',                                    'MerchantController@getCheckoutPreferences'                         ],
        'internal_merchant_checkout_preferences'   => ['get',      'internal/preferences/{merchant_id}',             'MerchantController@getInternalCheckoutPreferences'                 ],
        'internal_merchant_auto_disabled_methods'  => ['get',      'internal/auto_disabled_methods/{merchant_id}',   'MerchantController@getAutoDisabledMethods'                         ],
        'merchant_autokyc_soft_limit'              => ['post',     'merchants/auto-kyc-cron/soft-limit',             'MerchantController@postSoftLimitBreachOnAutoKYC'                 ],
        'merchant_autokyc_hard_limit'              => ['post',     'merchants/auto-kyc-cron/hard-limit',             'MerchantController@postHardLimitBreachOnAutoKYC'                 ],
        'merchant_autokyc_escalation'              => ['post',     'merchants/auto-kyc-cron/escalations',            'MerchantController@handleAutoKycEscalationCron'                  ],

        'merchant_store_add'                       => ['post',     'merchants/config/store',                                'MerchantController@updateMerchantStore'   ],
        'merchant_store_fetch'                     => ['get',      'merchants/config/store',                                'MerchantController@fetchMerchantStore'    ],
        'merchant_activation_eligibilty'           => ['get',      'merchant/{id}/activation/eligibility',                  'MerchantController@getMerchantActivationEligibility'    ],


        'm2m_referral_link_get'         => ['get',  'merchants/onboarding/m2m_referral', 'ReferralController@fetchReferralDetails' ],
        'm2m_referral_link_get_public'  => ['get',  'm2m_referral',  'ReferralController@fetchPublicReferralDetails' ],

        'merchant_report'                          => ['post',     'merchants/admin/report',                         'MerchantController@handleReport'                     ],
        'merchant_onboarding_escalations'          => ['post',     'merchants/onboarding/escalations',               'MerchantController@handleOnboardingEscalationsCron'  ],
        'banking_org_merchant_onboarding_escalations'=> ['post',   'merchants/banking_org_onboarding/escalations',   'MerchantController@handleBankingOrgOnboardingEscalationsCron'  ],
        'merchant_onboarding_cron_jobs'            => ['post',     'merchants/onboarding/cron_jobs',                  'MerchantController@handleOnboardingCronjobs'  ],
        'merchant_onboarding_crons'                => ['post',     'merchants/onboarding/{cronType}/crons',          'MerchantController@handleOnboardingCrons'            ],
        'merchant_risk_crons'                      => ['post',     'merchants/risk/crons/{cronType}',                'MerchantController@handleOnboardingCrons'            ],
        'merchant_popular_products_cron'           => ['post',     'merchant_popular_products/cron',                 'MerchantController@postMerchantPopularProductsCron'  ],
        'xpress_onboarding_escalations'            => ['post',     'merchants/xp_onboarding/escalations',            'MerchantController@handleNoDocOnboardingEscalationsCron'  ],
        'fetch_merchant_escalation'                => ['get',      'merchants/onboarding/escalations',               'MerchantController@fetchOnboardingEscalations'       ],
        'merchant_card_networks_onboarding_bulk'   => ['post',     'merchants/onboarding/networks/bulk',             'MerchantController@onboardMerchantOnNetworkBulk'],
        'payment_create'                           => ['post',     'payments',                                       'PaymentCreateController@postCreatePayment'           ],
        'internal_transactions'                    => ['post',     'internal/transactions',                          'TransactionController@postInternalTransaction'       ],
        'internal_transactions_cron'               => ['post',     'internal/transactions/cron',                          'TransactionController@postInternalTransactionCron'       ],
        'payments_notify_cron'                      => ['post',     'payments/notify/cron',                          'PaymentController@sendNotificationCron'       ],
        // @todo: Require feature S2S for payment_create_private route.
        'payment_create_private'                   => ['post',     'payments/create',                                'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_private_json'              => ['post',     'payments/create/json',                           'PaymentCreateController@postCreateS2SJsonPayment'                  ],
        'payment_create_checkout_json'              => ['post',    'payments/create/checkout/json',                  'PaymentCreateController@postCreateCheckoutJsonPayment'                  ],
        'payment_create_aeps'                      => ['post',     'payments/create/aeps',                           'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_subscriptions'             => ['post',     'payments/create/subscriptions',                  'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_recurring'                 => ['post',     'payments/create/recurring',                      'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_nach_register'             => ['post',     'payments/create/nach/file',                      'PaymentCreateController@postCreateS2SNachRegisterPayment'          ],
        'payment_create_private_old'               => ['post',     'payments/create/redirect',                       'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_checkout'                  => ['post',     'payments/create/checkout',                       'PaymentCreateController@postCreatePaymentCheckoutCallback'         ],
        'payment_create_checkout_get'              => ['get',      'payments/create/checkout/{payment_id}',          'PaymentCreateController@getCreatePaymentCheckoutCallback'          ],
        'payment_create_jsonp'                     => ['get',      'payments/create/jsonp',                          'PaymentCreateController@getCreatePaymentJsonp'                     ],
        'payment_create_ajax'                      => ['post',     'payments/create/ajax',                           'PaymentCreateController@postAJAX'                                  ],
        'payment_create_fees'                      => ['post',     'payments/create/fees',                           'PaymentCreateController@postCreatePaymentFees'                     ],
        'payment_create_pos'                       => ['post',     'payments/create/pos',                            'PaymentCreateController@postCreatePosPayment'                      ],
        'payment_calculate_fees'                   => ['post',     'payments/calculate/fees',                        'PaymentCreateController@postCalculatePaymentFees'                  ],
        'payment_fees'                             => ['post',     'payments/fees',                                  'PaymentCreateController@postPaymentFees'                           ],
        'payment_create_wallet'                    => ['post',     'payments/create/wallet',                         'PaymentCreateController@postCreateWalletPayment'                   ],
        'payment_create_upi'                       => ['post',     'payments/create/upi',                            'PaymentCreateController@postCreateUpiPayment'                      ],
        'payment_create_openwallet'                => ['post',     'payments/create/openwallet',                     'PaymentCreateController@postCreateS2SPayment'                      ],
        'payment_create_razorpaywallet'            => ['post',     'payments/razorpaywallet',                        'PaymentCreateController@postCreateRazorpayWalletPayment'           ],
        'payment_create_upi_unexpected'            => ['post',     'payments/create/upi/unexpected',                 'PaymentCreateController@postCreateUpiUnexpectedPayment'            ],
        'payment_update_and_redirect'              => ['post',     'payments/{id}/updateAndRedirect',                'PaymentCreateController@postUpdateAndRedirectToAuthorize'          ],
        'payment_redirect_to_dcc_info'             => ['get',      'payments/{id}/dcc_info',                         'PaymentCreateController@getRedirectToDCCInfo'                     ],
        'payment_redirect_to_address_collect'      => ['get',      'payments/{id}/address_collect',                  'PaymentCreateController@getRedirectToAddressCollect'               ],
        'payment_redirect_to_authorize'            => ['get',      'payments/{id}/redirect',                         'PaymentCreateController@postRedirectToAuthorize'                   ],
        'payment_authorize_post'                   => ['post',     'payments/{id}/authorize',                        'PaymentCreateController@postAuthorize'                             ],
        'payment_charge_token'                     => ['post',     'payments/tokens/charge',                         'PaymentCreateController@chargeToken'                               ],
        'recurring_token_pre_debit_notify'         => ['post',     'tokens/{id}/pre_debit/notify',                   'TokenController@recurringTokenPreDebitNotify'                      ],
        'payment_redirect_to_authenticate_get'     => ['get',      'payments/{id}/authenticate',                     'PaymentCreateController@postRedirectToAuthorize'                   ],
        'payment_get_authenticate_url'             => ['get',      'payments/{id}/authenticate/url',                 'PaymentCreateController@getAutenticateUrl'                         ],
        'payment_redirect_to_authenticate_post'    => ['post',     'payments/{id}/authenticate',                     'PaymentCreateController@postRedirectToAuthorize'                   ],
        'payment_mandate_hq_redirect_authenticate' => ['get',      'payments/{id}/mandate_hq/authenticate/{hash}',   'PaymentCreateController@redirectToAuthorizeFromMandateHQ'          ],
        'payment_get_authentication_entity'        => ['get',      'payments/authentication/{id}',                   'PaymentController@getPaymentAuthenticationEntity'                  ],
        'payment_get_authorization_entity'         => ['get',      'payments/authorization/{id}',                    'PaymentController@getPaymentAuthorizationEntity'                   ],
        'payment_callback_ajax_with_key_get'       => ['get',      'payments/{x_entity_id}/callback/ajax/{hash}/{key_id}',   'PaymentCreateController@postAJAXCallback'                  ],
        'payment_callback_post'                    => ['post',     'payments/{x_entity_id}/callback/{hash}',         'PaymentCreateController@postCallback'                              ],
        'payment_callback_get'                     => ['get',      'payments/{x_entity_id}/callback/{hash}',         'PaymentCreateController@postCallback'                              ],
        'payment_callback_ajax_get'                => ['get',      'payments/{x_entity_id}/callback/ajax/{hash}',    'PaymentCreateController@postAJAXCallback'                          ],
        'payment_callback_with_key_post'           => ['post',     'payments/{x_entity_id}/callback/{hash}/{key_id}',      'PaymentCreateController@postCallback'                        ],
        'payment_callback_with_key_get'            => ['get',      'payments/{x_entity_id}/callback/{hash}/{key_id}',      'PaymentCreateController@postCallback'                        ],
        'payment_get_status'                       => ['get',      'payments/{x_entity_id}/status',                  'PaymentController@getPaymentStatusForAsyncPayments'                ],
        'payment_otp_submit'                       => ['post',     'payments/{x_entity_id}/otp_submit/{hash}',       'PaymentCreateController@postOtpSubmit'                             ],
        'payment_otp_submit_private'               => ['post',     'payments/{x_entity_id}/otp/submit',              'PaymentCreateController@postOtpSubmitPrivate'                      ],
        'payment_otp_resend'                       => ['post',     'payments/{x_entity_id}/otp_resend',              'PaymentCreateController@postOtpResend'                             ],
        'payment_otp_resend_json'                  => ['post',     'payments/{x_entity_id}/otp_resend/json',         'PaymentCreateController@postOtpResendS2SJson'                      ],
        'payment_otp_generate'                     => ['post',     'payments/{x_entity_id}/otp_generate',            'PaymentCreateController@postOtpGenerate'                           ],
        'payment_otp_resend_private'               => ['post',     'payments/{x_entity_id}/otp/resend',              'PaymentCreateController@postOtpResendPrivate'                      ],
        'payment_topup_ajax'                       => ['post',     'payments/{x_entity_id}/topup/ajax',              'PaymentCreateController@postTopupAjax'                             ],
        'payment_topup_post'                       => ['post',     'payments/{x_entity_id}/topup',                   'PaymentCreateController@postTopup'                                 ],
        'payment_redirect_callback'                => ['post',     'payments/{x_entity_id}/redirect_callback',       'PaymentCreateController@postRedirectCallback'                      ],
        'payment_redirect_3ds'                     => ['post',     'payments/{x_entity_id}/authentication/redirect', 'PaymentCreateController@postRedirect3ds'                           ],
        'payment_redirect_3ds_get'                 => ['get',      'payments/{x_entity_id}/authentication/redirect', 'PaymentCreateController@postRedirect3ds'                           ],
        'payment_refund'                           => ['post',     'payments/{id}/refund',                           'PaymentController@postRefund'                                      ],
        'payment_refund_internal'                  => ['post',     'payments/{id}/refund/internal',                  'PaymentController@postRefund'                                      ],
        'payment_payout'                           => ['post',     'payments/{id}/payouts',                          'PaymentController@postPayout'                                      ],
        'payment_get_flows'                        => ['get',      'payment/flows',                                  'PaymentController@getPaymentFlows'                                 ],
        'payment_get_flows_private'                => ['post',     'payment/flows',                                  'PaymentController@getPaymentFlowsPrivate'                          ],
        'payment_get_iin_details'                  => ['get',      'payment/iin',                                    'IinController@getIinDetails'                                       ],
        'payment_notify'                           => ['post',     'payments/notify',                                'PaymentController@sendNotification'                                ],
        'get_issuer_from_iin'                      => ['get',      'mandate_hq/iin/{id}',                            'IinController@getIssuerDetails'                                    ],
        'mandate_hq_callback'                      => ['post',     'mandate_hq/callback',                            'PaymentCreateController@handleMandateHQCallback'                   ],
        'sihub_update_webhook'                     => ['post',     'recurring/billdesk/enrolment/modify',            'PaymentCreateController@handleSihubWebhook'                        ],
        'sihub_delete_webhook'                     => ['post',     'recurring/billdesk/enrolment/delete',            'PaymentCreateController@handleSihubWebhook'                        ],
        'payment_bank_transfer_fetch'              => ['get',      'payments/{id}/bank_transfer',                    'BankTransferController@fetchBankTransferForPayment'                ],
        'payments_dual_write_sync'                 => ['post',     'payments/dual_write/sync',                       'PaymentController@postPaymentsDualWriteSync'                       ],
        'payments_downtime'                        => ['get',      'payments/downtimes',                             'DowntimeController@getMethodDowntimeData'                          ],
        'refresh_payments_ongoing_downtimes_cron'  => ['get',      'payments/downtimes/ongoing/refresh_cache_cron',  'DowntimeController@refreshOngoingDowntimesCache'                   ],
        'refresh_payments_resolved_downtimes_cron' => ['get',      'payments/downtimes/resolved/refresh_cache_cron', 'DowntimeController@refreshHistoricalDowntimeCache'                 ],
        'refresh_payments_scheduled_downtimes_cron'=> ['get',      'payments/downtimes/scheduled/refresh_cache_cron', 'DowntimeController@refreshScheduledDowntimesCache'                ],
        'refresh_payments_ongoing_downtimes'       => ['get',      'payments/downtimes/ongoing/refresh_cache',       'DowntimeController@refreshOngoingDowntimesCache'                   ],
        'refresh_payments_resolved_downtimes'      => ['get',      'payments/downtimes/resolved/refresh_cache',      'DowntimeController@refreshHistoricalDowntimeCache'                 ],
        'refresh_payments_scheduled_downtimes'     => ['get',      'payments/downtimes/scheduled/refresh_cache',      'DowntimeController@refreshScheduledDowntimesCache'                ],
        'fetch_payments_ongoing_downtimes'         => ['get',      'payments/downtimes/ongoing',                     'DowntimeController@fetchOngoingDowntimes'                          ],
        'fetch_payments_resolved_downtimes'        => ['get',      'payments/downtimes/resolved',                    'DowntimeController@fetchResolvedDowntimes'                         ],
        'fetch_payments_scheduled_downtimes'       => ['get',      'payments/downtimes/scheduled',                   'DowntimeController@fetchScheduledDowntimes'                        ],
        'payments_downtime_by_id'                  => ['get',      'payments/downtimes/{id}',                        'DowntimeController@getMethodDowntimeDataByID'                      ],
        'payments_downtime_trigger_cron'           => ['post',     'payments/downtimes/trigger/{status}',            'DowntimeController@triggerDowntimes'                               ],
        'batch_create'                             => ['post',     'batches',                                        'BatchController@createBatch'                                       ],
        'batch_create_admin'                       => ['post',     'admin/batches',                                  'AdminController@createAdminBatch'                                  ],
        'update_admin_through_batch'               => ['post',     'admin/update_admin_through_batch',               'AdminController@updateAdminThroughBatch'                           ],
        'validate_file_name'                       => ['get',      'batches/validateFileName',                       'BatchController@validateFileName'                                  ],
        'batch_validate_file'                      => ['post',     'batches/validate',                               'BatchController@validateFile'                                      ],
        'batch_validate_file_admin'                => ['post',     'admin/batches/validate',                         'AdminController@validateFile'                                      ],
        'batch_send_mail'                          => ['post',     'batch/sendmail',                                 'BatchController@sendMail'                                          ],
        'batch_send_sms'                           => ['post',     'batch/sendsms',                                  'BatchController@sendSMS'                                           ],
        'batch_upload_form_get'                    => ['get',      'batches/upload',                                 'BatchController@renderBatchUploadForm'                             ],
        'batch_upload_form_validate_file'          => ['post',     'batches/upload/validate',                        'BatchController@validateBatchFile'                                 ],
        'batch_fetch_multiple'                     => ['get',      'batches',                                        'BatchController@getBatches'                                        ],
        'batch_fetch_by_id'                        => ['get',      'batches/{id}',                                   'BatchController@getBatchById'                                      ],
        'batch_process_file'                       => ['post',     'batches/process',                                'BatchController@processBatches'                                    ],
        'batch_process_by_id'                      => ['post',     'batches/{id}/process',                           'BatchController@processBatch'                                      ],
        // To be removed since all batches migrated. Removing permission as of now.
        'batch_retry_output_file'                  => ['post',     'batches/{id}/retry_output_file',                 'BatchController@retryBatchOutputFile'                              ],
        'batch_download_file'                      => ['get',      'batches/{id}/download',                          'BatchController@downloadBatch'                                     ],
        'batch_stats'                              => ['get',      'batches/{id}/stats',                             'BatchController@getStats'                                          ],
        'bulk_submerchant_assign'                  => ['post',     'submerchant/assign/bulk',                        'MerchantController@bulkSubmerchantAssign'                          ],
        'mozart_gateway_action'                    => ['post',     'mozart/gateway/action',                          'AdminController@getPvtResponse'                                    ],
        'file_upload_admin'                        => ['post',     'admin/files/{type}',                             'AdminController@uploadFileAdmin'                                   ],
        'payment_capture'                          => ['post',     'payments/{id}/capture',                          'PaymentController@postCapture'                                     ],
        'payment_bulk_capture'                     => ['post',     'payments/capture/bulk',                          'PaymentController@postBulkCapture'                                 ],
        'release_submerchant_payment'              => ['post',     'payments/{id}/settle',                           'PaymentController@releaseSubmerchantPayment'                       ],
        'payment_fetch_transfers'                  => ['get',      'payments/{id}/transfers',                        'PaymentController@getTransfers'                                    ],
        'payment_transfer'                         => ['post',     'payments/{id}/transfers',                        'PaymentController@postTransfer'                                    ],
        'payment_transfer_batch'                   => ['post',     'payments/{id}/transfers/batch',                  'PaymentController@createTransferFromBatch'                         ],
        'payment_verify'                           => ['get',      'payments/{id}/verify',                           'PaymentController@getVerify'                                       ],
        'barricade_payment_verify'                 => ['get',      'payments/barricade/{id}/verify',                 'PaymentController@getVerifyBarricade'                                       ],
        'payment_force_authorize'                  => ['post',     'payments/{id}/force_authorize',                  'PaymentController@postForceAuthorize'                              ],
        'payment_cancel'                           => ['get',      'payments/{x_entity_id}/cancel',                  'PaymentController@postCancel'                                      ],
        'payment_authorize_failed'                 => ['post',     'payments/{id}/authorize_failed',                 'PaymentController@postAuthorizeFailedPayment'                      ],
        'payment_fix_attempted_orders'             => ['post',     'payments/fix_attempted_orders',                  'PaymentController@postFixAttemptedOrders'                          ],
        'payment_fix_authorize_at'                 => ['post',     'payments/fix_authorized_at',                     'PaymentController@postFixAuthorizedAt'                             ],
        'internal_payment_authorize_refund'        => ['post',     'internal/payments/{id}/authorize_refund',         'PaymentController@postRefundAuthorizedInternal'                            ],
        'payment_authorize_refund'                 => ['post',     'payments/{id}/authorize_refund',                 'PaymentController@postRefundAuthorized'                            ],
        'payments_multiple_authorize_refund'       => ['post',     'payments/authorize_refund/bulk',                 'PaymentController@postRefundAuthorizedInBulk'                      ],
        'payment_add_metadata'                     => ['post',     'payments/{x_entity_id}/metadata',                'PaymentController@postPaymentMetadata'                             ],
        'payment_edit'                             => ['patch',    'payments/{id}',                                  'PaymentController@update'                                          ],
        'payment_fetch_by_id'                      => ['get',      'payments/{id}',                                  'PaymentController@getPayment'                                      ],
        'payment_fetch_by_id_internal'             => ['get',      'payments_internal/{id}',                         'PaymentController@getPaymentById'                              ],
        'payment_upi_authorize_failed'             => ['post',     'payments/authorize/upi/failed',                  'PaymentController@postAuthorizeFailedUpiPayment'                   ],
        'payment_card_authorize_failed'            => ['post',     'payments/authorize/card/failed',                 'PaymentController@postAuthorizeFailedCardPayment'                   ],
        'payment_card_recon_create_transaction'    => ['post',     'payments/recon/create/transaction',              'PaymentController@postReconCreateTransaction'                       ],
        'payment_nbplus_authorize_failed'          => ['post',     'payments/authorize/nbplus/failed',               'PaymentController@postAuthorizeFailedNetbankingPayment'            ],
        'subscription_payment_fetch_by_id'         => ['get',      'payments/{paymentId}/subscriptions/{subId}',     'PaymentController@getPaymentForSubscription'                       ],
        'subscription_fetch_by_id'                 => ['get',      'payments//subscriptions/{subId}',                 'PaymentController@getPaymentwithSubscription'                       ],

        // TODO:remove after migration,
        // Temporary route to copy email and contact in subscriptions table from payments table.
        'subscription_fetch_by_id_data_fix'        => ['get',      'payments/data_fix/subscriptions/{subId}',        'PaymentController@getPaymentwithSubscriptionEmailAndContactNotNull'],
        'payment_fetch_multiple'                   => ['get',      'payments',                                       'PaymentController@getPayments'                                     ],
        'payment_status_count'                     => ['get',      'payments/transaction/count',                     'PaymentController@getPaymentsStatusCount'                                     ],
        'payment_validate_vpa_internal'            => ['post',     'payments/validate_internal/vpa',                 'PaymentController@postPaymentValidateVpaInternal'                 ],
        'payment_fetch_card_details'               => ['get',      'payments/{id}/card',                             'PaymentController@getCardForPayment'                               ],
        'payment_fetch_card_metadata'              => ['get',      'payments/{id}/card/metadata',                    'PaymemtController@getCardMetadataForPayment'                       ],
        'payment_fetch_refunds'                    => ['get',      'payments/{id}/refunds',                          'PaymentController@getRefundsForPayment'                            ],
        'payment_fetch_refund_by_id'               => ['get',      'payments/{paymentId}/refunds/{rfndId}',          'PaymentController@getRefundByRefundAndPaymentId'                   ],
        'payment_fetch_transaction'                => ['get',      'payments/{id}/transaction',                      'PaymentController@getTransactionForPayment'                        ],
        'payment_timeout'                          => ['post',     'payments/timeout',                               'PaymentController@postTimeout'                                     ],
        'payment_timeout_new'                      => ['post',     'payments/{id}/timeout_new',                      'PaymentController@postTimeoutNew'                                     ],
        'payment_auth_timeout'                     => ['post',     'payments/auth/timeout',                          'PaymentController@postAuthTimeout'                                 ],
        'payment_auto_capture'                     => ['post',     'payments/autocapture',                           'PaymentController@postAutoCapture'                                 ],
        'payment_auto_capture_email'               => ['get',      'payments/autocapture/email',                     'PaymentController@getAutoCaptureEmail'                             ],
        'payment_verify_all'                       => ['post',     'payments/verify/all',                            'PaymentController@postVerifyAllPayments'                           ],
        'add_verify_disabled_gateway'              => ['post',     'payments/verify/disabled/gateway',               'PaymentController@postVerifyDisabledGateway'                           ],
        'payment_new_verify_all'                   => ['post',     'payments/verify/new_cron',                       'PaymentController@postVerifyAllPaymentsNewRoute'                  ],
        'payment_new_verify_bulk'                  => ['post',     'payments/verify/new_bulk',                       'PaymentController@postVerifyPaymentsBulkNewRoute'                 ],
        'payment_verify_bulk'                      => ['post',     'payments/verify/bulk',                           'PaymentController@postVerifyPaymentsBulk'                          ],
        'payment_verify_captured'                  => ['post',     'payments/captured/verify',                       'PaymentController@postVerifyCapturedPayments'                              ],
        'payment_verify_multiple'                  => ['post',     'payments/verify/{filter}',                       'PaymentController@postVerifyPayments'                              ],
        'payment_capture_reminder'                 => ['get',      'payments/all/reminder',                          'PaymentController@sendReminderMailForAuthorizedPayments'           ],
        'payment_refund_authorized'                => ['post',     'payments/refund/authorized',                     'PaymentController@postRefundOldAuthorizedPayments'                 ],
        'payment_refund_at_bulk_update'            => ['post',     'payments/update_refund_at/bulk',                 'PaymentController@postUpdateRefundAtForPayments'                   ],
        'payment_capture_verify'                   => ['post',     'payments/{id}/verify/capture',                   'PaymentController@postCaptureVerify'                               ],
        'payment_capture_gateway_multiple'         => ['post',     'payments/gateway/capture',                       'PaymentController@postPendingGatewayCapture'                       ],
        'payment_capture_gateway_manual'           => ['post',     'payments/{id}/gateway/capture',                  'PaymentController@postManualGatewayCapture'                        ],
        'payment_acknowledge'                      => ['post',     'payments/{id}/acknowledge',                      'PaymentController@postAcknowledge'                                 ],
        'payment_authorize_time_out'               => ['post',     'payments/authorize/timeout/{ids}',               'PaymentController@postAuthorizeLockTimeOut'                        ],
        'payment_validate_vpa_old'                 => ['post',     'payment/validate/vpa',                           'PaymentController@postPaymentValidateVpa'                          ],
        'payment_validate_vpa'                     => ['post',     'payments/validate/vpa',                          'PaymentController@postPaymentValidateVpa'                          ],
        'payment_validate_account'                 => ['post',     'payments/validate/account',                      'PaymentController@postPaymentValidateEntity'                       ],
        'payment_meta_search'                      => ['post',     'payments/meta/reference',                        'PaymentController@postPaymentMetaReference'                        ],
        'payment_meta_fetch_by_payment_id_action'  => ['get',      'payments/meta/{payment_id}/{action_type}',       'PaymentController@getPaymentMetaByPaymentIdAction'                 ],
        'refund_create'                            => ['post',     'refunds',                                        'RefundController@postRefundCreate'                                 ],
        'refund_edit_status'                       => ['put',      'refunds/{id}/status',                            'RefundController@putRefundStatus'                                  ],
        'refund_edit'                              => ['patch',    'refunds/{id}',                                   'ScroogeController@updateRefund'                                    ],
        'refund_edit_internal'                     => ['patch',    'refunds/internal/{id}',                          'RefundController@updateRefundInternal'                             ],
        'refund_mark_processed_bulk'               => ['put',      'refunds/status/processed',                       'RefundController@putRefundMarkProcessedBulk'                       ],
        'refund_fetch_by_id'                       => ['get',      'refunds/{id}',                                   'RefundController@getRefund'                                        ],
        'refund_fetch_multiple'                    => ['get',      'refunds',                                        'RefundController@getRefunds'                                       ],
        'refund_fetch_fee'                         => ['get',      'refunds/fee',                                    'RefundController@getRefundFee'                                     ],
        'refund_scrooge_fetch_fee'                 => ['get',      'refunds/scrooge_fetch_fee',                      'RefundController@scroogeFetchRefundFee'                            ],
        'refund_scrooge_payment_update'            => ['post',     'refunds/payment_update',                         'RefundController@scroogeRefundsPaymentUpdate'                      ],
        'refund_scrooge_transaction_create'        => ['post',     'refunds/transaction_create',                     'RefundController@scroogeRefundsTransactionCreate'                  ],
        'refund_fetch_creation_data'               => ['get',      'refunds/fetch_creation_data',                    'RefundController@fetchRefundCreationData'                          ],
        'refund_generate_excel'                    => ['post',     'refunds/excel',                                  'RefundController@generateRefunds'                                  ],
        'refund_verify_multiple'                   => ['post',     'refunds/{ids}/verify',                           'RefundController@postRefundVerifyMultiple'                         ],
        'refund_verify_failed'                     => ['post',     'refunds/{id}/retry',                             'RefundController@postRefundRetry'                                  ],
        'refund_verify_failed_bulk'                => ['post',     'refunds/retry/bulk',                             'RefundController@postRefundRetryBulk'                              ],
        'refund_retry_bulk_via_fta'                => ['post',     'refunds/fta_initiate/bulk',                      'RefundController@postRefundRetryBulkViaFTA'                        ],
        'refund_without_verify_bulk'               => ['post',     'refunds/retry/direct/bulk',                      'RefundController@postRefundDirectRetryBulk'                        ],
        'refund_verify'                            => ['get',      'refunds/{id}/verify',                            'RefundController@postRefundVerify'                                 ],
        'refund_verify_bulk'                       => ['post',     'refunds/verify/bulk',                            'RefundController@postVerifyRefundsBulk'                            ],
        'refund_set_unprocessed_config'            => ['put',      'refunds/set_unprocessed_config',                 'RefundController@setUnprocessedRefundsConfig'                      ],
        // We will change this in the future when we want to update more things than just marking it as processed.
        'refund_update_status'                     => ['put',      'refunds/{id}/update_status',                     'RefundController@updateScroogeRefundStatus'                        ],
        'refund_fetch_status'                      => ['get',      'refunds/{id}/status',                            'RefundController@getRefundEntity'                                  ],
        'refund_cancel_batch'                      => ['post',     'refunds/batch/{batchId}/cancel',                 'RefundController@cancelRefundsBatch'                               ],
        // Both the following routes refund_verify_call, refund_gateway_call must always point to master DB
        'refund_gateway_call'                      => ['post',     'refunds/{id}/gateway_refund',                    'RefundController@postGatewayRefundCall'                            ],
        'refund_verify_call'                       => ['post',     'refunds/{id}/gateway_verify',                    'RefundController@postGatewayVerifyRefundCall'                      ],
        'scrooge_verify_refund_call'               => ['post',     'refunds/{id}/verify_refund',                     'RefundController@postScroogeVerifyRefundCall'                      ],
        'scrooge_refund_create'                    => ['post',     'refunds/{id}/scrooge_create',                    'RefundController@scroogeRefundCreate'                              ],
        'scrooge_refund_replay'                    => ['post',     'refunds/scrooge_replay',                         'RefundController@scroogeRefundCreateBulk'                          ],
        'scrooge_refund_create_bulk'               => ['post',     'refunds/scrooge_create/bulk',                    'RefundController@scroogeRefundCreateBulk'                          ],
        'scrooge_refund_verify_bulk'               => ['post',     'refunds/scrooge_verify/bulk',                    'RefundController@scroogeRefundVerifyBulk'                          ],
        'api_refunds_retry_without_verify'         => ['post',     'refunds/scrooge_retry_without_verify',           'RefundController@postRetryScroogeRefundsWithoutVerify'             ],
        'scrooge_entities_fetch'                   => ['post',     'scrooge/entities_fetch',                         'RefundController@scroogeFetchEntitiesV2'                           ],
        'scrooge_public_entities_fetch'            => ['post',     'scrooge/fetch/public_entities',                  'RefundController@scroogeFetchPublicEntities'                       ],
        'scrooge_refund_back_write'                => ['post',     'scrooge/back_write_refund',                      'RefundController@scroogeBackWriteRefund'                           ],
        'refund_create_batch_service'              => ['post',     'refunds/batch_service',                          'RefundController@postCreateBatchRefund'                            ],
        'scrooge_fetch_refund_email_data'          => ['post',     'scrooge/fetch_refund_email_data',                'RefundController@scroogeFetchRefundEmailData'                      ],
        'scrooge_fetch_refund_transaction_data'    => ['get',      'scrooge/fetch_refund_transaction_data',          'RefundController@scroogeFetchRefundtransactionData'                 ],
        'raw_address_create_batch_service'         => ['post',     'raw_address/batch_service',                      'RawAddressController@postCreateBatch'                              ],
        'raw_address_create_bulk'                       => ['post',     'raw_address/create/bulk',                             'RawAddressController@createAddressBulk'                              ],
        //'raw_address_kafka_consume_test'          => ['post',     'raw_address/kafka_consume',                     'RawAddressController@consumeAddressFromKafka'                      ],

        'fulfillment_order_update'                 => ['post',     'fulfillment_order/batch_service',             'FulfillmentOrderController@updateOrder'                             ],

        // TODO: Add rate limiting on this route!
        'refund_fetch_for_customer'                => ['get',      'customer/refund',                                'RefundController@getRefundDetailsForCustomer'                      ],
        'refunds_fetch_for_customer'               => ['get',      'customer/refunds',                               'RefundController@getRefundsDetailsForCustomer'                     ],
        'card_check_recurring'                     => ['get',      'cards/recurring',                                'PaymentController@getCardRecurring'                                ],
        'card_fetch_by_id'                         => ['get',      'cards/{id}',                                     'PaymentController@getCard'                                         ],
        'card_fetch_multiple'                      => ['get',      'cards',                                          'PaymentController@getCards'                                        ],
        'card_update_saved'                        => ['put',      'cards/saved',                                    'CardController@updateSavedCards'                                   ],
        'card_issuer_validate'                     => ['post',     'cards/validate',                                 'IinController@validateIinIssuer'                                   ],
        'iin_list_by_flow'                         => ['get',      'iins/list',                                      'IinController@getIinsList'                                         ],
        'iin_get'                                  => ['get',      'iins/{id}',                                      'IinController@getIin'                                              ],
        'iin_add'                                  => ['post',     'iins',                                           'IinController@postIin'                                             ],
        'iin_upload'                               => ['post',     'iins/upload',                                    'IinController@uploadIin'                                           ],
        'iin_range_upload'                         => ['post',     'iins/range/upload',                              'IinController@rangeUploadIin'                                      ],
        'iin_edit'                                 => ['put',      'iins/{id}',                                      'IinController@editIin'                                             ],
        'iin_edit_bulk'                            => ['patch',    'iins/bulk',                                      'IinController@editIinBulk'                                         ],
        'iin_generate_post'                        => ['post',     'iins/import/generate',                           'IinController@postIinGenerate'                                     ],
        'iin_batch_process_record'                 => ['post',     'iins/{type}/process',                            'IinController@processRecords'                                       ],
        'merchant_public_get_banks'                => ['get',      'banks',                                          'MerchantController@getBanksPublic'                                 ],
        'merchant_secret'                          => ['get',      'keys/{id}/secret',                               'MerchantController@getKeySecret'                                   ],
        'merchant_get_banks'                       => ['get',      'merchants/{id}/banks',                           'MerchantController@getBanks'                                       ],
        'merchant_get_disabled_banks'              => ['get',      'disabled_banks',                                 'MerchantController@getDisabledBanks'                                 ],
        'merchant_get_org_details'                 => ['get',      'merchants/{id}/org',                             'MerchantController@getOrg'                                         ],
        'merchant_tnc_popup_status'                => ['get',      'merchant/tnc_popup_status',                      'MerchantController@getTermsAndConditionPopupStatus'                     ],
        'merchant_set_banks'                       => ['post',     'merchants/{id}/banks',                           'MerchantController@setBanks'                                       ],
        'merchant_daily_report'                    => ['post',     'merchants/report',                               'MerchantController@sendDailyReport'                                ],
        'merchant_create'                          => ['post',     'merchants',                                      'MerchantController@postCreateMerchant'                             ],
        'merchant_product_switch'                  => ['post',     'merchants/product-switch',                       'MerchantController@postSwitchProductMerchant'                      ],
        // Below route is a temporary route and should be deleted after the migration is completed
        'migration_multi_va_on_x'                  => ['post',     'merchants/banking-va-migration',                 'MerchantController@migrationBankingVAs'                            ],
        'affordability_widget_trial_period_update' => ['put',      'affordability/widget/trial_period',              'AffordabilityController@updateWidgetTrialPeriod'                        ],
        'merchant_fetch'                           => ['get',      'merchants/{id}',                                 'MerchantController@getMerchant'                                    ],
        'merchant_fetch_internal'                  => ['get',      'merchants_internal/{id}',                        'MerchantController@getMerchant'                                    ],
        'merchant_edit'                            => ['put',      'merchants/{id}',                                 'MerchantController@putMerchant'                                    ],
        'merchant_edit_risk_attributes'            => ['put',      'merchants/{id}/risk_attributes',                 'MerchantController@putMerchantRiskAttributes'                      ],
        'merchant_edit_config'                     => ['put',      'account/config',                                 'MerchantController@putMerchantConfig'                              ],
        'merchant_edit_email2fa'                   => ['post',     'account/config/email',                              'MerchantController@postMerchantEmail2fa' ],
        'merchant_edit_config_logo'                => ['post',     'account/config/logo',                            'MerchantController@postMerchantConfigLogo'                         ],
        'merchant_delete_config_logo'              => ['delete',   'account/config/logo',                            'MerchantController@deleteMerchantConfigLogo'                       ],
        'merchant_sub_create'                      => ['post',     'submerchants',                                   'MerchantController@postCreateSubMerchant'                          ],
        'merchant_sub_create_batch'                => ['post',     'submerchants/batch',                             'MerchantController@postCreateSubMerchantViaBatch'                  ],
        'merchant_bulk_onboarding_admin'           => ['post',     'submerchants_bulk_onboard/batch',                'MerchantController@bulkOnboardSubMerchantViaBatch'                 ],
        'merchant_sub_send_password_link'          => ['post',     'submerchants/{id}/reset_password',               'MerchantController@sendSubmerchantPasswordResetLink'               ],
        'merchant_pre_signup_details'              => ['get',      'pre_signup',                                     'MerchantController@getPreSignupDetails'                            ],
        'merchant_edit_pre_signup_details'         => ['put',      'pre_signup',                                     'MerchantController@putPreSignupDetails'                            ],
        'merchant_fetch_config'                    => ['get',      'account/config',                                 'MerchantController@getAccountConfig'                               ],
        'merchant_fetch_config_internal'           => ['get',      'internal/account/config',                        'MerchantController@getAccountConfigInternal'                       ],
        'merchant_fetch_config_for_checkout_internal' => ['get',   'internal/account/config/checkout',               'MerchantController@getAccountConfigForCheckoutInternal'            ],
        'merchant_validate_public_auth_over_internal_auth' => ['get', 'internal/checkout/auth',                        'MerchantController@validatePublicAuthOverInternalAuth'             ],
        'merchant_edit_email'                      => ['put',      'merchants/{id}/email',                           'MerchantController@putMerchantEmail'                               ],
        'update_merchant_mobile_number'            => ['put',      'merchants/{id}/mobile',                          'MerchantController@putMerchantContact'                             ],
        'email_user_status_for_email_update'       => ['post',     'merchants/email_user/status',                    'MerchantController@getUserStatusForEmailUpdateSelfServe'           ],
        'merchant_edit_email_self_serve'           => ['put',      'merchants/email/update',                         'MerchantController@putEditEmailAndTransferOwnershipToEmailUser'    ],
        'merchant_edit_email_create_user'          => ['post',     'merchants/email/update/create_user',             'MerchantController@putCreateNewUserAndTransferOwnerShip'           ],
        'merchant_billing_label_suggestions'       => ['get',      'merchants/billing_label/suggestions',            'MerchantController@getBillingLabelSuggestions'                     ],
        'merchant_billing_label_update'            => ['patch',    'merchants/billing_label/update',                 'MerchantController@patchMerchantBillingLabelAndDba'                ],
        'merchant_fetch_payment_failure_analysis'  => ['get',      'merchants/payments/failure_analysis',            'MerchantController@getPaymentFailureAnalysis'                      ],
        // TODO : Remove this route after permanent fix is deployed.
        'correct_merchant_owners_products'         => ['put',      'merchants/{id}/correct_owner'   ,                'MerchantController@correctMerchantOwnerForBanking'                 ],
        // Razorpay App Store APIs
        'merchant_install_app_on_appstore'         => ['post',     'merchants/app_store/install',                    'MerchantController@postInstallAppOnAppStore'                       ],
        'merchant_get_apps_on_appstore'            => ['get',      'merchants/{mid}/app_store/apps',                 'MerchantController@getInstalledAppsOnAppStore'                     ],
        'merchant_delete_additional_email'         => ['delete',   'merchants/{id}/additionalemail/{type}',          'MerchantEmailController@deleteMerchantEmails'                      ],
        'merchant_fetch_additional_email'          => ['get',      'merchants/{id}/additionalemail/{type}',          'MerchantEmailController@fetchMerchantEmailByType'                  ],
        'merchant_create_additional_email'         => ['post',     'merchants/{id}/additionalemail',                 'MerchantEmailController@postMerchantEmails'                        ],
        'proxy_merchant_get_support_details'       => ['get',      'proxy/merchants/supportdetails',                 'MerchantEmailController@proxyGetSupportDetails'                    ],
        'proxy_merchant_create_support_details'    => ['post',     'proxy/merchants/supportdetails',                 'MerchantEmailController@proxyCreateSupportDetails'                 ],
        'proxy_merchant_edit_support_details'      => ['put',      'proxy/merchants/supportdetails',                 'MerchantEmailController@proxyEditSupportDetails'                   ],
        'merchant_fetch_all_additional_email'      => ['get',      'merchants/{id}/additionalemail',                 'MerchantEmailController@fetchMerchantEmails'                       ],
        'merchant_edit_email_la'                   => ['put',      'la-merchants/email',                             'MerchantController@updateLinkedAccountMerchantEmail'               ],
        'merchant_edit_config_la'                  => ['post',     'la-merchants/config',                            'MerchantController@updateLinkedAccountConfig'                      ],
        'merchant_fetch_multiple'                  => ['get',      'merchants',                                      'MerchantController@getMerchants'                                   ],
        'merchant_fire_hubspot_event'              => ['post',     'merchants/fire_hubspot_event',                   'MerchantController@fireHubspotEventFromDashboard'                  ],
        'merchant_create_lead_to_salesforce'       => ['post',     'merchants/lead_to_salesforce',                   'MerchantController@createSalesforceLeadFromDashboard'              ],
        'merchant_create_lead_to_salesforce_admin' => ['post',     'admin/merchants/lead_to_salesforce',             'MerchantController@createSalesforceLeadFromDashboard'              ],
        'merchant_create_lead_to_salesforce_admin_for_one_ca' => ['post',     'admin/merchants/one_ca_lead_to_salesforce',        'MerchantController@createSalesforceLeadFromDashboard'              ],
        'salesforce_converge_get_merchant_details' => ['get',      'merchants/{id}/sf_converge_get_merchant_details','MerchantController@getMerchantDetailsForSFConverge'               ],
        'salesforce_converge_get_terminal_details' => ['get',      'merchants/{id}/sf_converge_get_terminal_details','MerchantController@getTerminalDetailsForSFConverge'               ],
        'merchant_assign_pricing'                  => ['post',     'merchants/{id}/pricing',                         'MerchantController@postAssignPricingPlan'                          ],
        'merchant_assign_pricing_internal'         => ['post',     'internal/merchants/{id}/pricing',                'MerchantController@postAssignPricingPlan'                          ],
        'merchant_get_pricing'                     => ['get',      'merchants/{id}/pricing',                         'MerchantController@getPricingPlan'                                 ],
        'proxy_merchant_get_pricing'               => ['get',      'proxy/merchants/pricing',                        'MerchantController@proxyGetPricingPlan'                            ],
        'merchant_bank_account_create'             => ['post',     'merchants/bank_account',                         'MerchantController@postBankAccount'                                ],
        'org_bank_account_create'                  => ['post',     'org/bank_account',                               'OrganizationController@createOrgBankAccount'                       ],
        'org_fetch_bank_account'                   => ['get',      'org/{id}/bank_account',                          'OrganizationController@getOrgBankAccount'                          ],
        'org_update_bank_account'                  => ['put',      'org/{id}/bank_account',                          'OrganizationController@updateOrgBankAccount'                       ],
        'merchant_bank_account_update'             => ['post',     'merchants/bank_account/update',                  'MerchantController@putBankAccountUpdate',                          ],
        'merchant_bank_account_file_upload'        => ['post',     'merchants/bank_account/file/upload',             'MerchantController@postBankAccountFileUpload',                      ],
        'merchant_edit_bank_account'               => ['put',      'bank_accounts/{id}',                             'MerchantController@putBankAccount'                                 ],
        'merchant_bank_account_change_status'      => ['get',      'merchants/{id}/bank_account_change/status',      'MerchantController@getBankAccountChangeStatus'                     ],
        'merchant_fetch_bank_account'              => ['get',      'merchants/{id}/bank_account',                    'MerchantController@getBankAccount'                                 ],
        'merchant_generate_test_bank_acnt'         => ['post',     'merchants/bank_account/generate/test',           'MerchantController@postGenerateTestBankAccounts'                   ],
        'merchant_create_terminal'                 => ['post',     'merchants/{id}/terminals',                       'MerchantController@postCreateTerminal'                             ],
        'merchant_create_terminal_internal'        => ['post',     'merchants/{id}/terminals/internal',              'MerchantController@postCreateTerminalWithId',                      ],
        'merchant_get_terminals'                   => ['get',      'merchants/{id}/terminals',                       'MerchantController@getTerminals'                                   ],
        'proxy_merchant_get_terminals'             => ['get',      'proxy/merchant/terminals',                       'MerchantController@proxyGetTerminals'                              ],
        'admin_merchant_get_terminals'             => ['post',     'admin/merchant/terminals',                       'TerminalController@proxyV2TerminalService'                        ],
        'terminals_proxy_gateway_terminal_status'  => ['get',      'proxy/terminal/onboard/status',                  'TerminalController@proxyGetTerminalsGatewayStatus'                 ],
        'merchant_onboard_terminal'                => ['post',     'merchants/{id}/terminals/onboard',               'MerchantController@onboardMerchantOnGateway'                       ],
        'merchant_onboard_external_org_terminal'   => ['post',     'merchants/{id}/external_org/terminals/onboard',  'MerchantController@onboardMerchantOnGateway'                       ],
        'merchant_get_terminal'                    => ['get',      'merchants/{mid}/terminals/{tid}',                'MerchantController@getTerminal'                                    ],
        'merchant_delete_terminal'                 => ['delete',   'merchants/{mid}/terminals/{tid}',                'MerchantController@deleteTerminal'                                 ],
        'merchant_validate_delete_terminal_v3'     => ['post',     'merchants/{mid}/terminals/{tid}/validatedeletev3', 'MerchantController@validateDeleteTerminalv3'                     ],
        'merchant_delete_terminal_v3'              => ['delete',   'merchants/{mid}/terminals/{tid}/v3',             'MerchantController@deleteTerminalv3'                               ],
        'merchant_modify_terminal'                 => ['put',      'merchants/{mid}/terminals/{tid}',                'MerchantController@putTerminal'                                    ],
        'merchant_put_payment_methods'             => ['put',      'merchants/{mid}/methods',                        'MerchantController@putMethods'                                     ],
        'merchant_methods_edit'                    => ['put',      'merchant/methods',                               'MerchantController@editMethods'                                    ],
        'merchant_methods_edit_internal'           => ['patch',    'merchants/{mid}/methods',                        'MerchantController@editMerchantMethods'                            ],
        'merchant_fetch_methods'                   => ['get',      'merchant/methods',                               'MerchantController@getPaymentMethods'                              ],
        'merchant_fetch_methods_internal'          => ['get',      'merchant/methods/{id}',                          'MerchantController@getPaymentMethodsById'                          ],
        'merchant_send_activation_mail'            => ['post',     'merchants/activation_mail',                      'MerchantController@postSendActivationMail'                         ],
        'merchant_live_enable'                     => ['post',     'merchants/{id}/live/enable',                     'MerchantController@postLiveEnable'                                 ],
        'merchant_live_disable'                    => ['post',     'merchants/{id}/live/disable',                    'MerchantController@postLiveDisable'                                ],
        'merchant_actions'                         => ['put',      'merchants/{id}/action',                          'MerchantController@putAction'                                      ],
        'merchant_fetch_referrals'                 => ['get',      'referrals',                                      'MerchantController@getReferredMerchants'                           ],
        'merchant_get_tags'                        => ['get',      'merchants/{id}/tags',                            'MerchantController@getTags'                                        ],
        'merchant_get_capital_tags'                => ['get',      'merchants/tags/capital',                         'MerchantController@getCapitalTags'                                        ],
        'merchant_tag_add'                         => ['post',     'merchants/{id}/tags',                            'MerchantController@addTags'                                        ],
        'merchant_tag_delete'                      => ['delete',   'merchants/{id}/tags/{tagName}',                  'MerchantController@deleteTag'                                      ],
        'merchant_update_key_access'               => ['put',      'merchants/{id}/update_key_access',               'MerchantController@updateKeyAccess'                                ],
        'merchant_edit_free_credits'               => ['post',     'merchants/{id}/credits',                         'MerchantController@postAmountCredits',                             ],
        'merchant_fetch_users'                     => ['get',      'merchants-users',                                'MerchantController@getUsers',                                      ],
        'merchant_fetch_internal_users'            => ['get',      'merchants/{id}/internal-users',                  'MerchantController@getInternalUsers',                              ],
        'merchant_fetch_schedule_tasks'            => ['get',      'schedule_tasks/{type}',                          'ScheduleController@getScheduleTasks',                              ],
        'merchant_user_reset_password'             => ['put',      'users/{id}/password',                            'UserController@resetUserPassword',                                 ],
        'merchant_patch_beneficiary_code'          => ['patch',    'merchants/beneficiary/code',                     'MerchantController@patchMerchantBeneficiaryCode'                   ],
        'merchant_beneficiary_file'                => ['post',     'merchants/beneficiary/file/{channel}',           'MerchantController@getMerchantBeneficiary'                         ],
        'merchant_post_beneficiary_file'           => ['post',     'merchants/beneficiary/file/bank/{channel}',      'MerchantController@postMerchantBeneficiary'                        ],
        'merchant_post_beneficiary_api'            => ['post',     'merchants/beneficiary/api/{channel}',            'MerchantController@postMerchantBeneficiaryThroughApi'              ],
        'merchant_notify_holiday'                  => ['post',     'merchants/notify/holiday',                       'MerchantController@postMerchantsNotifyHoliday'                     ],
        'get_merchant_partner_status'              => ['get',      'merchant/partner_status',                        'MerchantController@getMerchantPartnerStatus'                       ],
        'merchant_invoice_update_gstin'            => ['put',      'merchants/{id}/invoice/gstin',                   'MerchantInvoiceController@updateGstin'                             ],
        'merchant_create_invoice_entities'         => ['post',     'merchants/invoice/create',                       'MerchantInvoiceController@postCreateInvoiceEntities'               ],
        'merchant_invoice_entities_verify'         => ['get',      'merchants/invoice/verify',                       'MerchantInvoiceController@verify'                                  ],
        'merchant_invoice_fetch_multiple'          => ['get',      'merchants/banking/invoices',                     'MerchantInvoiceController@getBankingInvoices'                      ],
        'merchant_invoice_pdf_control'             => ['post',     'merchants/invoice/pdf_control',                  'MerchantInvoiceController@pdfControl'                              ],
        'merchant_invoice_control'                 => ['post',     'merchants/invoice/control',                      'MerchantInvoiceController@generationControl'                       ],
        'merchant_invoice_entity_create_admin'     => ['post',     'merchants/invoice/entity/create',                'MerchantInvoiceController@entityCreateAdmin'                       ],
        'mailing_list_remove_suspended_merchant'   => ['post',     'merchant/remove/suspended',                      'MerchantController@deleteSuspendedMerchantsFromMailingList'        ],
        'merchant_details_fetch'                   => ['get',      'merchants/details',                              'MerchantController@getMerchantDetails'                             ],
        'internal_merchant_details_fetch'          => ['get',      'internal/merchants/{id}/details',                'MerchantController@internalGetMerchantDetails'                             ],
        'account_receivables_merchant_details_fetch' => ['get',    'account_receivables/merchants/details',          'MerchantController@fetchMerchantDetailsForAccountReceivables'                             ],
        'smart_dashboard_merchant_details_fetch'   => ['get',      'smart_dashboard/merchants/details',              'MerchantController@getSmartDashboardMerchantDetails'               ],
        'merchant_details_patch'                   => ['patch',    'merchants/details',                              'MerchantController@patchMerchantDetails'                           ],
        'smart_dashboard_merchant_details_patch'   => ['post',     'smart_dashboard/merchants/details',              'MerchantController@patchSmartDashboardMerchantDetails'             ],
        'external_merchant_composite_details_fetch'=> ['get',      'external_org/merchants/composite_details/{mid}', 'MerchantController@externalGetMerchantCompositeDetails'                             ],
        'merchant_details_suggested_update'        => ['post',     'merchants/details/suggested_update',             'MerchantController@updateSuggestedMerchantDetails'                 ],
        'internal_merchants_fetch'                 => ['get',      'internal/merchants',                             'MerchantController@getMerchantBulk'                                ],
        'internal_merchant_fetch'                  => ['get',      'internal/merchants/{id}',                        'MerchantController@internalGetMerchant'                            ],
        'merchant_nc_count_admin'                  => ['get',      'merchants/{id}/nc_count',                        'MerchantController@getMerchantNcCount'                            ],
        'internal_payment_instruments_fetch'       => ['get',      'internal/payment_instruments_fetch',             'MerchantController@internalGetPaymentInstruments'                            ],
        'internal_merchants_fetch_by_params'       => ['get',      'internal/iir/merchants',                         'MerchantController@fetchMerchantsByparams'                         ],
        'internal_merchant_submission_date'        => ['get',      'internal/merchants/{id}/submission_date',       'MerchantController@internalGetMerchantSubmissionDate'               ],
        'internal_send_merchant_email'             => ['post',     'internal/merchants/{id}/send_email',             'MerchantController@sendMerchantEmail'                            ],
        'internal_merchant_get_rejection_reasons'  => ['get',      'internal/merchants/{id}/rejection_reasons',      'MerchantController@internalGetMerchantRejectionReasons'          ],
        'merchant_invoice_add_bulk'                => ['post',     'merchants/invoice/bulk',                         'MerchantInvoiceController@postMultipleEntities'                    ],
        'merchant_get_app_access_mapping'          => ['get',      'merchants/{id}/applications',                    'MerchantController@getConnectedApplications'                       ],
        'merchant_create_app_access_mapping'       => ['post',     'merchants/{id}/applications',                    'MerchantController@postMapOAuthApplication'                        ],
        'merchant_delete_app_access_mapping'       => ['delete',   'merchants/{id}/applications/{appId}',            'MerchantController@deleteMapOAuthApplication'                      ],
        'admin_access_maps_bootstrap_cache'        => ['post',     'admin/access_maps/bootstrap_cache_of_stork',     'MerchantController@bootstrapAccessMapsCacheOfStork'                ],
        'merchant_tags_bulk'                       => ['post',     'merchants/tags/bulk',                            'MerchantController@bulkTagMerchants'                               ],
        'merchant_tags_batch'                      => ['post',     'merchants/tags/batch',                           'MerchantController@batchTagMerchants'                               ],
        'merchant_schedule_bulk'                   => ['post',     'merchants/schedules/bulk',                       'MerchantController@bulkAssignSchedule'                             ],
        'merchant_schedule_reset'                  => ['post',     'merchants/schedule/reset',                       'MerchantController@resetSettlementSchedule'                        ],
        'merchant_bulk_update_pricing_cron'        => ['post',     'merchants/pricing/bulk/update',                  'MerchantController@bulkUpdatePricingPlanOnEligibilityCron' ],
        'merchant_pricing_bulk'                    => ['post',     'merchants/pricing/bulk',                         'MerchantController@bulkAssignPricing'                              ],
        'merchant_ip_config_fetch'                 => ['get',      'merchant/ip_whitelist',                          'MerchantController@fetchMerchantIpConfig'                          ],
        'merchant_ip_config_create'                => ['post',     'merchant/ip_whitelist',                          'MerchantController@createMerchantIpConfig'                         ],
        'merchant_ip_config_fetch_admin'           => ['get',      'admin/merchant/{id}/ip_whitelist',               'MerchantController@fetchMerchantIpConfigForAdmin'                  ],
        'merchant_ip_config_create_admin'          => ['post',     'admin/merchant/ip_whitelist',                    'MerchantController@createMerchantIpConfig'                         ],
        'merchant_ip_config_opt_status_admin'      => ['post',     'admin/merchant/ip_whitelist/opt_status',         'MerchantController@editOptStatusForMerchantIPConfig'               ],
        'create_submerchant_user'                  => ['post',     'submerchant/user/{id}',                          'MerchantController@postSubMerchantUser'                            ],
        'collect_info_merchant_details_internal'   => ['post',     'internal/collect_info/merchant/{id}/details',    'MerchantController@CollectInfoMerchantDetailsPatch'                ],
        'collect_info_merchant_details_patch'      => ['post',     'terminals/proxy/collect_info/merchant/details',          'TerminalController@proxyV2TerminalService'                 ],
        'admin_collect_info_merchant_details_patch'=> ['post',     'terminals/proxy/collect_info/merchant/{id}/details/admin',    'TerminalController@proxyV2TerminalService'            ],

        // sub balance adjustment route
        'sub_balance_adjustment'                   => ['post', 'sub_balance/adjustment',                             'AdjustmentController@subBalanceAdjustment'],
        //sub balance creation route
        'create_sub_balances'                      => ['post', 'create_sub_balance',                                 'SubBalanceMapController@createSubBalance'],

        'balance_fetch'                            => ['get',      'balance',                                        'MerchantController@getAccountBalance'                              ],
        'merchant_balance_fetch'                   => ['get',      'balances',                                       'MerchantController@getAccountBalances'                             ],
        'merchant_primary_balance_fetch'           => ['get',      'primary_balance',                                'MerchantController@getPrimaryBalance'                              ],
        'internal_balance_fetch_by_merchant_id'    => ['get',      'internal_merchants/{id}/balance',                'MerchantController@getBalanceByMerchantId'                         ],
        'internal_balance_fetch_by_merchant_id_old'=> ['get',      'balances/{id}',                                  'MerchantController@getBalanceByMerchantId'                         ],
        'internal_balance_fetch_by_id'             => ['get',      'internal_balances/{id}',                         'BalanceController@fetchBalanceByIdAndParams'                       ],
        'merchant_balance_fetch_by_id'             => ['get',      'balance/{id}',                                   'BalanceController@fetchBalanceById'                                ],
        'internal_balance_fetch_multiple_by_ids'   => ['get',      'internal_balances_multiple',                     'BalanceController@fetchBalanceMultiple'                            ],
        'internal_balances_queued'                 => ['get',      'internal_balances_queued',                       'BalanceController@fetchBalancesForBalanceIds'                      ],
        'internal_balances_fetch_by_merchant_ids'  => ['get',      'internal_balances',                    'BalanceController@fetchBalancesFoMerchantIds'                      ],
        'merchant_balance_create'                  => ['post',     'capital_balances',                               'BalanceController@createCapitalBalance'                            ],
        'merchant_balance_fetch_admin'             => ['get',      'admin_balances',                                 'MerchantController@getAccountBalances'                             ],
        'credits_create'                           => ['post',     'merchants/{id}/credits_log',                     'MerchantController@postCreateCreditsLog'                           ],
        'credits_create_bulk'                      => ['post',     'merchants/credits/bulk',                         'MerchantController@bulkCreateMerchantCredits'                      ],
        'credits_create_bulk_internal'             => ['post',     'internal/merchants/credits/bulk',                'MerchantController@bulkCreateMerchantCredits'                      ],
        'credits_create_bulk_batch'                => ['post',     'merchants/credits/bulk/batch',                   'MerchantController@bulkCreateMerchantCreditsBatch'                 ],
        'fund_addition_tpv'                        => ['post',     'fund_addition/initialize',                       'MerchantController@fundAdditionTPV'                                 ],
        'fund_addition_webhook'                    => ['post',     'fund_addition/{type}/webhook',                   'MerchantController@addFundsViaWebhook'                             ],
        'merchant_balance_bulk_backfill_ids'       => ['post',     'merchants/balances/backfill',                    'MerchantController@bulkRegenerateBalanceIds'                       ],
        'credits_edit'                             => ['put',      'merchants/{mid}/credits/{id}',                   'MerchantController@putCreditsLog'                                  ],
        'credits_fetch_by_id'                      => ['get',      'credits/{id}',                                   'MerchantController@getCreditsLog'                                  ],
        'credits_fetch_multiple'                   => ['get',      'credits',                                        'MerchantController@getCreditsLogs'                                 ],
        'merchant_credits_balance_fetch'           => ['get',      'merchants/credits/balance/{product}',            'MerchantController@getCreditsBalancesOfMerchantForProduct'         ],
        'merchant_features_fetch'                  => ['get',      'merchants/me/features',                          'MerchantController@getMerchantFeatures'                            ],
        'merchant_features_update'                 => ['post',     'merchants/me/features',                          'MerchantController@updateMerchantFeatures'                         ],
        'merchant_partner_configs_fetch'           => ['get',      'merchants/me/partner/configs',                   'PartnerConfigController@fetchConfigByPartner'                      ],
        'merchants_update_bulk'                    => ['put',      'merchants/bulk',                                 'MerchantController@updateMerchantsBulk'                            ],
        'merchant_action_notification_cron'        => ['post',     'merchants/action/notification',                  'MerchantController@handleMerchantActionNotificationCron'           ],
        'merchants_update_channel'                 => ['put',      'merchants/channel/bulk',                         'MerchantController@updateChannelForMultipleMerchants'              ],
        'merchants_update_bank_account'            => ['put',      'merchants/bank_account/bulk',                    'MerchantController@updateBankAccountForMultipleMerchants'          ],
        'merchant_update_fraud_type'               => ['post',     'merchant/update_fraud_type',                     'MerchantController@updateMerchantFraudType'                        ],
        'methods_update_merchants'                 => ['put',      'methods/bulkupdate',                             'MerchantController@updateMethodsForMultipleMerchants'              ],
        'methods_update_merchants_internal'        => ['put',      'internal/methods/bulkupdate',                    'MerchantController@updateMethodsForMultipleMerchants'              ],
        'gratis_postpaid_transactions'             => ['post',     'merchants/gratis/postpaid',                      'MerchantController@markGratisTransactionPostpaid'                  ],
        'internal_fetch_config_by_id'              => ['get',      'internal/config/{id}',                           'ConfigController@internalFetchConfigById'                          ],
        'internal_fetch_configs'                   => ['get',      'internal/config',                                'ConfigController@internalFetchConfigs'                             ],
        'terminal_delete'                          => ['delete',   'terminals/{id}',                                 'TerminalController@deleteTerminal'                                 ],
        'terminal_edit'                            => ['put',      'terminals/{id}',                                 'TerminalController@putTerminal'                                    ],
        'terminal_edit_god_mode'                   => ['put',      'terminals/god_mode_edit/{id}',                   'TerminalController@putTerminal'                                    ],// Only the permission is different thant terminal_edit
        'terminal_fetch_editable_fields'           => ['get',      'terminals/editable_fields',                       'TerminalController@getEditableFields'                              ],
        'buy_pricing_assign_bulk'                  => ['post',     'buy_pricing/assign/bulk',                        'TerminalController@postBulkAssignBuyPricingPlans'                  ],
        'terminal_edit_internal'                   => ['put',      'terminals/{id}/internal',                        'TerminalController@putTerminal'                                    ],
        'terminal_edit_external_org'               => ['put',      'terminals/{id}/external_org',                    'TerminalController@putTerminal'                                    ],
        'terminal_restore'                         => ['put',      'terminals/{id}/restore',                         'TerminalController@restoreTerminal',                               ],
        'terminal_toggle'                          => ['put',      'terminals/{id}/toggle',                          'TerminalController@toggleTerminal'                                 ],
        'terminal_toggle_internal'                 => ['post' ,    'terminals/toggle/{id}/{action}',                 'TerminalController@toggleTerminalInternal'                         ],
        'terminal_fill_enabled_wallets'            => ['patch',    'terminals/fill/enabled_wallets',                 'TerminalController@fillEnabledWallets',                           ],
        'terminal_update_bulk'                     => ['patch',    'terminals/bulk',                                 'TerminalController@updateTerminalsBulk',                           ],
        'terminal_add_merchant'                    => ['put',      'terminals/{id}/merchants/{mid}',                 'TerminalController@addMerchant'                                    ],
        'terminal_remove_merchant'                 => ['delete',   'terminals/{id}/merchants/{mid}',                 'TerminalController@removeMerchant'                                 ],
        'terminal_reassign_merchant'               => ['put',      'terminals/{id}/reassign',                        'TerminalController@reassignMerchant'                               ],
        'terminal_check_encrypted_value'           => ['post',     'terminals/{id}/secret',                          'TerminalController@postCheckTerminalEncryptedValue'                ],
        'terminal_get_banks'                       => ['get',      'terminals/{id}/banks',                           'TerminalController@getBanks'                                       ],
        'terminal_set_banks'                       => ['patch',    'terminals/{id}/banks',                           'TerminalController@setBanks'                                       ],
        'terminal_get_wallets'                     => ['get',      'terminals/{id}/wallets',                         'TerminalController@getWallets'                                       ],
        'terminal_set_wallets'                     => ['patch',    'terminals/{id}/wallets',                         'TerminalController@setWallets'                                       ],
        'terminal_migrate_cron'                    => ['post',     'terminals/migrate_cron',                         'TerminalController@postTerminalsMigrateCron'                       ],
        'hitachi_terminal_currency_update_cron'    => ['post',     'hitachi_terminals/update_cron',                  'TerminalController@postHitachiTerminalsCurrencyUpdateCron'         ],
        'terminal_create_bulk'                     => ['post',     'terminals/bulk',                                 'TerminalController@postTerminalsBulk'                              ],
        'terminal_service_sync_delete'             => ['post',     'terminals/sync/deleted',                         'TerminalController@syncDeletedTerminalsOnTerminalService'          ],
        'upi_terminal_onboarding_bulk'             => ['post',     'upi_terminal_onboarding/bulk',                   'TerminalOnboardingController@postUpiTerminalOnboardingBulk'                  ],
        'upi_onboarded_terminal_edit_bulk'         => ['post',     'upi_onboarded_terminal_edit/bulk',               'TerminalOnboardingController@postUpiOnboardedTerminalEditBulk'                  ],
        // terminal service proxies
        'terminals_proxy_delete_submerchant'       => ['delete',   'terminals/proxy/terminal/submerchant',           'TerminalController@proxyV1TerminalService'                         ],
        'terminals_proxy_create_submerchant'       => ['post',     'terminals/proxy/terminal/submerchant',           'TerminalController@proxyV1TerminalService'                         ],
        'terminals_proxy_update_recurring'         => ['post',     'terminals/proxy/recurring/terminals/update',     'TerminalController@proxyV1TerminalService'                         ],
        'terminals_proxy_create_gateway_credential'=> ['post',     'terminals/proxy/gateway_credentials',            'TerminalController@proxyV2TerminalService'                         ],
        'terminals_proxy_fetch_gateway_credential' => ['get',      'terminals/proxy/gateway_credentials/{gateway}',  'TerminalController@proxyV2TerminalService'                         ],
        'terminals_proxy_delete_gateway_credential'=> ['delete',   'terminals/proxy/gateway_credentials/{id}',       'TerminalController@proxyV2TerminalService'                         ],
        'terminals_proxy_fetch_terminals_credentials'=> ['post',   'terminals/credentials',                          'TerminalController@fetchTerminalsCredentials'                      ],
        'terminals_proxy_fetch_terminals_org'      => ['post',     'merchants/terminals',                            'TerminalController@fetchMerchantsTerminals'                      ],

        // terminal service optimizer related proxies
        'terminals_proxy_get_optimizer_gateways'            =>  ['get',     'terminals/proxy/optimizer/supported_gateways',          'TerminalController@proxyV2TerminalService'             ],
        'terminals_proxy_add_optimizer_provider'            =>  ['post',    'terminals/proxy/optimizer/mid/provider',                'TerminalController@proxyV2TerminalService'             ],
        'terminals_proxy_update_optimizer_provider'         =>  ['put',     'terminals/proxy/optimizer/mid/provider',                'TerminalController@proxyV2TerminalService'             ],
        'terminals_proxy_get_merchant_optimizer_provider'   =>  ['get',     'terminals/proxy/optimizer/list/mid/provider',           'TerminalController@proxyV2TerminalService'             ],
        'terminals_proxy_get_optimizer_merchant_methods'    =>  ['get',     'terminals/proxy/optimizer/merchant/mid/methods',                 'TerminalController@proxyV2TerminalService'             ],

        // Automatic terminal testing
        'execute_terminal_test_run'                => ['post',     'terminals/proxy/terminal_test_run',                              'TerminalController@proxyV2TerminalService'                         ],
        'fetch_terminal_test_run'                  => ['get',      'terminals/proxy/terminal_test_run',                              'TerminalController@proxyV2TerminalService'                         ],
        'fetch_terminal_test_run_by_params'        => ['post',     'terminal_test_run_fetch',                                        'TerminalController@fetchTerminalTestRun'                           ],
        'create_terminal_test_instrument'          => ['post',     'terminals/proxy/terminal_test_instrument',                       'TerminalController@proxyV2TerminalService'                         ],
        'delete_terminal_test_instrument'          => ['delete',   'terminals/proxy/terminal_test_instrument/{id}',                  'TerminalController@proxyV2TerminalService'                         ],
        'get_templates'                            => ['get',      'terminals/proxy/templates/internal_instrument_request',          'TerminalController@proxyV2TerminalService'                         ],
        'get_method_templates'                     => ['get',      'terminals/proxy/method_templates/internal_instrument_request',   'TerminalController@proxyV2TerminalService'                         ],

        'terminal_test_save_otp'                   => ['post',     'terminal_test_otp',                              'TerminalController@postTerminalTestOtp'                            ],
        'terminal_enable'                          => ['put',      'terminals/{id}/enable',                          'TerminalOnboardingController@putTerminalEnable'                    ],
        'terminal_disable'                         => ['put',      'terminals/{id}/disable',                         'TerminalOnboardingController@putTerminalDisable'                   ],
        'terminal_enable_bulk'                     => ['put',      'terminals/enable/bulk',                          'TerminalOnboardingController@putTerminalEnableBulk'                ],
        'terminal_fetch'                           => ['get',      'terminals',                                      'TerminalOnboardingController@fetchTerminals'                       ],
        'terminal_fetch_by_id_internal'            => ['get',      'terminals/{id}',                                 'TerminalController@fetchTerminalById'                              ],
        'terminal_onboard'                         => ['post',     'terminals',                                      'TerminalOnboardingController@postCreateTerminal'                   ],
        'initiate_terminal_onboarding'             => ['post',     'terminals/onboard',                              'TerminalOnboardingController@postInitiateOnboarding'               ],
        'terminal_onboard_callback'                => ['post',     'terminals/onboard/{gateway}/callback/{mode}',    'TerminalOnboardingController@postTerminalOnboardCallback'          ],
        'bank_transfer_process'                    => ['post',     'ecollect/validate',                              'BankTransferController@processBankTransfer'                        ],
        'bank_transfer_process_internal'           => ['post',     'ecollect/validate/internal',                     'BankTransferController@processBankTransferInternal'                ],
        'bank_transfer_process_yesbank_internal'   => ['post',     'ecollect/validate/yesbank/internal',             'BankTransferController@processYesbankBankTransfer'                 ],
        'bank_transfer_process_icici'              => ['post',     'ecollect/validate/icici',                        'BankTransferController@processIciciBankTransferCallback'           ],
        'bank_transfer_process_icici_internal'     => ['post',     'ecollect/validate/icici/internal',               'BankTransferController@processIciciBankTransfer'                   ],
        'process_pending_bank_transfer'            => ['post',     'admin/process_pending_bank_transfer',            'BankTransferController@processPendingBankTransfer'                 ],
        'bank_transfer_process_hdfc_ecms'          => ['post',     'ecollect/validate/hdfc/ecms',                    'BankTransferController@processHdfcEcmsBankTransfer'                ],
        'offline_challan_validate'                 => ['post',     'validate/ecollect/offline',                      'VirtualAccountController@validateBankOfflineChallanRequest'        ],
        'bank_transfer_process_file'               => ['post',     'ecollect/validate/file',                         'BankTransferController@processBankTransferFile'                    ],
        'bank_transfer_process_file_rbl'           => ['post',     'ecollect/validate/file/rbl',                     'BankTransferController@processBankTransferFileRbl'                 ],
        'bank_transfer_process_file_yesbank'       => ['post',     'ecollect/validate/file/yesbank',                 'BankTransferController@processBankTransferFileYesbank'             ],
        'bank_transfer_process_rbl'                => ['post',     'ecollect/validate/rbl',                          'BankTransferController@processRblBankTransferLive'                 ],
        'bank_transfer_process_rbl_test'           => ['post',     'ecollect/validate/rbl/test',                     'BankTransferController@processRblBankTransferTest'                 ],
        'bank_transfer_process_rbl_internal'       => ['post',     'ecollect/validate/rbl/internal',                 'BankTransferController@processRblBankTransferInternal'             ],
        'bank_transfer_process_test'               => ['post',     'ecollect/validate/test',                         'BankTransferController@processBankTransfer'                        ],
        'bank_transfer_process_test_x_demo_cron'   => ['post',     'ecollect/validate/test/x-demo-cron',             'BankTransferController@processBankTransferXDemoCron'                        ],
        'bank_transfer_notify'                     => ['post',     'ecollect/pay',                                   'BankTransferController@notifyBankTransfer'                         ],
        'bank_transfer_refund_retry'               => ['post',     'bank_transfers/refunds/retry',                   'BankTransferController@retryBankTransferRefund'                    ],
        'bank_transfer_edit_payer_account'         => ['put',      'bank_transfers/{id}/payer_bank_account',         'BankTransferController@editPayerBankAccount'                       ],
        'bank_transfer_edit_payer_account_internal'=> ['post',     'bank_transfers/{id}/payer_bank_account/internal','BankTransferController@editPayerBankAccount'                       ],
        'bank_transfer_strip_payer_accounts'       => ['put',      'bank_transfers/payer_bank_account/strip',        'BankTransferController@stripPayerBankAccounts'                     ],
        'bank_transfer_insert'                     => ['post',     'bank_transfers/{provider}',                      'BankTransferController@insertBankTransfer'                         ],
        'bank_transfer_payment_receiver_backfill'  => ['post',     'payment/bank_transfer_backfill',                 'PaymentController@updateReceiverData'                              ],
        'offline_payment_credit'                   => ['post',     'credit/ecollect/offline',                        'OfflinePaymentController@processOfflinePayment'                    ],
        'payment_card_vault_migrate'               => ['post',     'payments/cards',                                 'PaymentController@paymentCardVaultMigrate'                         ],
        'payments_card_es_sync_cron'               => ['post',     'payments_cards/payments/es_sync',                'PaymentController@paymentsCardEsSyncCron'                          ],
        'refund_processed_at_backfill'             => ['post',     'refunds/processed_at_backfill',                  'RefundController@updateProcessedAt'                                ],
        'refund_reference1_bulk_update'            => ['post',     'refunds/reference1_bulk_update',                 'RefundController@bulkUpdateRefundsReference1'                      ],
        // Added new route with same controller to avoid auth issues as same route is needed from admin auth and internal auth
        'scrooge_refund_reference1_bulk_update'    => ['post',     'refunds/scrooge_reference1_bulk_update',         'RefundController@bulkUpdateRefundsReference1'                      ],
        'fund_transfer_attempt_bulk_update'        => ['patch',    'fund_transfer_attempts',                         'FundTransferAttemptController@bulkUpdate'                          ],
        'fund_transfer_attempt_recon_report'       => ['get',      'fund_transfer_attempts/recon_report',            'FundTransferAttemptController@sendFTAReconReport'                  ],
        'fund_transfer_attempt_modes'              => ['get',      'fund_transfer_attempts/modes',                   'FundTransferAttemptController@getSupportedModes'                   ],
        'fund_transfer_attempt_reconcile'          => ['post',     'fund_transfer_attempts/reconcile/{channel}',     'FundTransferAttemptController@reconcileFundTransfers',             ],
        'fund_transfer_attempt_process'            => ['post',     'fund_transfer_attempts/initiate/{channel}',      'FundTransferAttemptController@initiateFundTransfers',              ],
        'fund_transfer_attempt_initiate_action'    => ['post',     'fund_transfer_attempts/initiate_action/{channel}','FundTransferAttemptController@initiateFundTransfers',             ],
        'fund_transfer_attempts_process_fts'       => ['post',     'fund_transfer_attempts/fts/process/{channel}',   'FundTransferAttemptController@processFundTransfersUsingFts'        ],

        'fts_dashboard_fund_transfer_update'                => ['patch',    'fts/dashboard/fund_transfer_update',                               'FTSController@updateBulkFtsAttempts'                               ],
        'fts_dashboard_fund_transfer_status_bulk'           => ['post',     'fts/dashboard/fund_transfer_status/bulk',                          'FTSController@getBulkTransferStatus'                               ],
        'fts_dashboard_fund_transfer_check_status'          => ['post',     'fts/dashboard/fund_transfer_status/check',                         'FTSController@checkTransferStatus'                                 ],
        'fts_dashboard_raw_bank_status'                     => ['post',     'fts/dashboard/fund_transfer_status/raw',                           'FTSController@getRawBankStatus'                                    ],
        'fts_dashboard_pending_transfers_get'               => ['post',     'fts/dashboard/fund_transfer_status/pending',                       'FTSController@getPendingFundTransfers'                             ],
        'fts_dashboard_source_account_create'               => ['post',     'fts/dashboard/source_account/create',                              'FTSController@createSourceAccount'                                 ],
        'fts_dashboard_source_account_copy'                 => ['post',     'fts/dashboard/source_account/copy',                                'FTSController@createSourceAccountCopy'                             ],
        'fts_dashboard_source_account_delete'               => ['post',     'fts/dashboard/source_account/delete',                              'FTSController@deleteSourceAccount'                                 ],
        'fts_dashboard_source_account_update'               => ['patch',    'fts/dashboard/source_account/update',                              'FTSController@updateSourceAccount'                                 ],
        'fts_dashboard_source_account_graceful_update'      => ['patch',    'fts/dashboard/source_account/graceful_update',                     'FTSController@updateSourceAccount'                                 ],
        'fts_dashboard_transfer_force_retry'                => ['post',     'fts/dashboard/fund_transfer/retry',                                'FTSController@forceRetryFTSTransfer'                               ],
        'fts_dashboard_bulk_status_get'                     => ['post',     'fts/dashboard/fund_transfer_status/bulk_get',                      'FTSController@getBulkStatus'                                       ],
        'fts_dashboard_new_channel_health_stats'            => ['get',      'fts/dashboard/new_channel_health_stats',                           'FTSController@getNewChannelHealthStats'                            ],
        'fts_dashboard_trigger_health_status'               => ['get',      'fts/dashboard/trigger_health_status',                              'FTSController@getTriggerHealthStatus'                              ],
        'fts_dashboard_sa_mappings_create'                  => ['post',     'fts/dashboard/source_account_mappings',                            'FTSController@createSourceAccountMappings'                         ],
        'fts_dashboard_sa_mappings_delete'                  => ['delete',   'fts/dashboard/source_account_mappings',                            'FTSController@deleteSourceAccountMappings'                         ],
        'fts_dashboard_direct_account_routing_rules_get'    => ['get',      'fts/dashboard/direct_account_routing_rules',                       'FTSController@getDirectAccountRoutingRules'                        ],
        'fts_dashboard_direct_account_routing_rules_create' => ['post',     'fts/dashboard/direct_account_routing_rules',                       'FTSController@createDirectAccountRoutingRules'                     ],
        'fts_dashboard_direct_account_routing_rules_delete' => ['delete',   'fts/dashboard/direct_account_routing_rules',                       'FTSController@deleteDirectAccountRoutingRules'                     ],
        'fts_dashboard_pr_weights_create'                   => ['post',     'fts/dashboard/preferred_routing_weights',                          'FTSController@createPreferredRoutingWeights'                       ],
        'fts_dashboard_pr_weights_delete'                   => ['delete',   'fts/dashboard/preferred_routing_weights',                          'FTSController@deletePreferredRoutingWeights'                       ],
        'fts_dashboard_account_mappings_create'             => ['post',     'fts/dashboard/account_type_mappings',                              'FTSController@createAccountTypeMappings'                           ],
        'fts_dashboard_account_mappings_delete'             => ['delete',   'fts/dashboard/account_type_mappings',                              'FTSController@deleteAccountTypeMappings'                           ],
        'fts_dashboard_fail_queued_transfer_bulk'           => ['patch',     'fts/dashboard/fail_queued_transfer/bulk',                         'FTSController@failQueuedTransferBulk'                              ],
        'fts_dashboard_fail_queued_transfer'                => ['patch',     'fts/dashboard/fail_queued_transfer',                              'FTSController@failQueuedTransfer'                                  ],
        'fts_bulk_attempts_initiate'                        => ['post',     'fts/initiate/attempts',                                            'FTSController@initiateBulkFtsAttempts'                             ],
        'fts_bulk_beneficiary_initiate'                     => ['post',     'fts/initiate/beneficiary',                                         'FTSController@initiateBulkBeneficiary'                             ],
        'fts_one_off_db_migrate_cron'                       => ['patch',    'fts/one_off_db_migrate_cron',                                      'FTSController@oneOffDbMigrateCron'                                 ],
        'fts_bulk_transfer_publish'                         => ['post',     'fts/publish/transfer',                                             'FTSController@publishBulkTransfers'                                ],
        'fts_channel_notification'                          => ['post',     'fts/channel/notify',                                               'FTSController@channelNotify'                                       ],
        'fts_account_balance_alert'                         => ['post',     'fts/account/balance',                                              'FTSController@lowBalanceAlert'                                     ],
        'fts_dashboard_fetch_account_balance'               => ['post',     'fts/dashboard/account/fetch_balance',                              'FTSController@fetchAccountBalance'                                 ],
        'fts_dashboard_schedule_create'                     => ['post',     'fts/dashboard/schedules',                                          'FTSController@createSchedule'                                      ],
        'fts_dashboard_schedule_delete'                     => ['delete',   'fts/dashboard/schedules',                                          'FTSController@deleteSchedule'                                      ],
        'fts_dashboard_schedule_update'                     => ['patch',    'fts/dashboard/schedules',                                          'FTSController@updateSchedule'                                      ],
        'fts_dashboard_manual_override'                     => ['post',    'fts/dashboard/manual_override',                                     'FTSController@manualOverride'                                      ],
        'fts_dashboard_merchant_configurations_create'      => ['post',     'fts/dashboard/merchant_configurations',                            'FTSController@createMerchantConfigurations'                        ],
        'fts_dashboard_merchant_configurations_delete'      => ['delete',   'fts/dashboard/merchant_configurations',                            'FTSController@deleteMerchantConfigurations'                        ],
        'fts_dashboard_merchant_configurations_patch'       => ['patch',    'fts/dashboard/merchant_configurations',                            'FTSController@patchMerchantConfigurations'                         ],
        'fts_dashboard_fail_fast_status_manual_update'      => ['post',     'fts/dashboard/fail_fast_status/manual_update',                     'FTSController@failFastStatusManualUpdate'                          ],
        'fts_dashboard_key_value_store_patch'               => ['patch',    'fts/dashboard/key_value_store',                                    'FTSController@patchKeyValuePair'                                   ],
        'fts_dashboard_key_value_store_post'                => ['post',     'fts/dashboard/key_value_store',                                    'FTSController@postKeyValuePair'                                   ],

        'nodal_file_upload_retry'                  => ['post',     'nodal_file_upload/retry',                        'FundTransferAttemptController@nodalFileUploadThroughBeam',         ],
        'channel_health_check'                     => ['post',     'channel_health_check/{channel}',                 'FundTransferAttemptController@healthCheck',                        ],
        'set_channel_action'                       => ['put',      'set_channel/{channel}/{action}',                 'FundTransferAttemptController@setChannelState',                    ],
        'get_channel_action'                       => ['get',      'get_channel_state',                              'FundTransferAttemptController@getChannelState',                    ],
        'gateway_payment_callback_bharatqr'        => ['post',     'payment/callback/bharatqr/{gateway}',            'BharatQrController@processBharatQrPayment'                         ],
        'payment_callback_bharatqr_internal'       => ['post',     'payment/callback/bharatqr/{gateway}/internal',   'BharatQrController@processBharatQrPaymentInternal'                 ],
        'bharat_qr_pay_test'                       => ['post',     'bharatqr/pay/test',                              'BharatQrController@processBharatQrTestPayment'                     ],
        'gateway_payment_validate_bharatqr'        => ['post',     'payment/validate/bharatqr/{gateway}',            'BharatQrController@processBharatQrValidatePayment'                 ],
        'qr_code_download_live'                    => ['get',      'l/qrcode/{id}',                                  'QrCodeController@fetchLiveQrCode'                                  ],
        'qr_code_download_test'                    => ['get',      't/qrcode/{id}',                                  'QrCodeController@fetchTestQrCode'                                  ],
        'qr_code_fetch'                            => ['get',      'payments/qr_codes/{id}',                         'QrCodeController@get'                                              ],
        'qr_code_close'                            => ['post',     'payments/qr_codes/{id}/close',                   'QrCodeController@closeQrCode'                                      ],
        'qr_code_create'                           => ['post',     'payments/qr_codes',                              'QrCodeController@create'                                           ],
        //'qr_code_checkout_create'                  => ['post',     'checkout/qr_codes',                              'QrCodeController@createForCheckout'                                           ],
        'qr_code_fetch_payment_status'             => ['get',      'checkout/qr_code/{id}/payment/status',           'QrPaymentController@fetchCheckoutPaymentStatusByQrCodeId'          ],
        'virtual_account_create'                   => ['post',     'virtual_accounts',                               'VirtualAccountController@create'                                   ],
        'virtual_account_create_for_internal'      => ['post',     'virtual_accounts/internal',                      'VirtualAccountController@createForInternal'                        ],
        'virtual_account_order_create'             => ['post',     'orders/{id}/virtual_accounts',                   'VirtualAccountController@createForOrder'                           ],
        'virtual_account_edit'                     => ['patch',    'virtual_accounts/{id}',                          'VirtualAccountController@update'                                   ],
        'merchant_virtual_account_edit'            => ['patch',    'merchant/virtual_accounts/{id}',                 'VirtualAccountController@merchantVAupdate'                         ],
        'virtual_account_edit_bulk'                => ['post',     'virtual_accounts/edit/bulk',                     'VirtualAccountController@editVirtualAccountBulk'                   ],
        'virtual_account_close'                    => ['post',     'virtual_accounts/{id}/close',                    'VirtualAccountController@closeVirtualAccount'                      ],
        'virtual_account_fetch'                    => ['get',      'virtual_accounts/{id}',                          'VirtualAccountController@get'                                      ],
        'virtual_account_fetch_multiple'           => ['get',      'virtual_accounts',                               'VirtualAccountController@list'                                     ],
        'virtual_account_banking_fetch_multiple'   => ['get',      'virtual_accounts/banking/account',               'VirtualAccountController@list'                                     ],
        'virtual_account_fetch_payments'           => ['get',      'virtual_accounts/{id}/payments',                 'VirtualAccountController@getPayments'                              ],
        'virtual_account_close_cron'               => ['post',     'virtual_accounts/close',                         'VirtualAccountController@closeVirtualAccountsByCloseBy'            ],
        'virtual_account_add_receivers'            => ['post',     'virtual_accounts/{id}/receivers',                'VirtualAccountController@addReceivers'                             ],
        'virtual_account_add_allowed_payer'        => ['post',     'virtual_accounts/{id}/allowed_payers',           'VirtualAccountController@addAllowedPayer'                          ],
        'virtual_account_delete_allowed_payer'     => ['delete',   'virtual_accounts/{id}/allowed_payers/{tpv_id}',  'VirtualAccountController@deleteAllowedPayer'                       ],
        'virtual_account_configs'                  => ['get',      'virtual_account/configs',                        'VirtualAccountController@getReceiverConfigs'                       ],
        'virtual_account_create_for_banking'       => ['post',     'virtual_accounts/banking',                       'VirtualAccountController@createForBanking'                         ],
        'virtual_account_bulk_create_for_banking'  => ['post',     'virtual_accounts/banking/bulk',                  'VirtualAccountController@bulkCreateForBanking'                     ],
        'virtual_account_bulk_close_for_banking'   => ['post',     'virtual_accounts/banking/close/bulk',            'VirtualAccountController@bulkCloseForBanking'                      ],
        'virtual_account_validate_vpa'             => ['post',     'live/ecollect/validate/{gateway}/{vpa_root}',    'VirtualAccountController@validateVpa'                              ],
        'virtual_account_validate_vpa_test'        => ['post',     'test/ecollect/validate/{gateway}/{vpa_root}',    'VirtualAccountController@validateVpa'                              ],
        'virtual_account_debug'                    => ['post',     'virtual_account_debug',                          'VirtualAccountController@debugVA'                                  ],
        'virtual_account_expiry_setting_upsert'    => ['post',     'virtual_accounts/setting/expiry',                'VirtualAccountController@addDefaultVirtualAccountExpiryForMerchant'],
        'virtual_account_number_setting_upsert'    => ['post',     'virtual_accounts/setting/account_number',        'VirtualAccountController@addCustomAccountNumberSettingForMerchant' ],
        'virtual_account_expiry_setting_get'       => ['get',      'virtual_accounts/setting/expiry',                'VirtualAccountController@getMerchantDefaultVirtualAccountExpiry'   ],
        'admin_va_expiry_setting_upsert'           => ['post',     'admins/virtual_accounts/setting/expiry',         'VirtualAccountController@addDefaultVirtualAccountExpiryForMerchant'],
        'admin_va_setting_get'                     => ['get',      'admins/virtual_accounts/setting/expiry',         'VirtualAccountController@getMerchantDefaultVirtualAccountExpiry'   ],
        'virtual_accounts_close_bulk'              => ['post',     'virtual_accounts/close/bulk',                    'VirtualAccountController@bulkCloseVirtualAccount'                  ],
        'virtual_accounts_close_inactive_cron'     => ['post',     'virtual_accounts/close/inactive',                'VirtualAccountController@autoCloseInactiveVirtualAccounts'         ],
        'upi_transfer_process'                     => ['post',     'live/upi/callback/{acquirer}/{gateway}',         'UpiTransferController@processUpiTransferPayment'                   ],
        'upi_transfer_process_internal'            => ['post',     'callback/upi/{gateway}/internal',                'UpiTransferController@processUpiTransferPaymentInternal'                   ],
        'upi_transfer_process_test'                => ['post',     'test/upi/callback/{acquirer}/{gateway}',         'UpiTransferController@processUpiTransferPayment'                   ],
        'payment_upi_transfer_fetch'               => ['get',      'payments/{id}/upi_transfer',                     'UpiTransferController@fetchForPayment'                             ],
        'virtual_vpa_prefix_validate'              => ['get',      'virtual_vpa_prefixes/validate',                  'VirtualVpaPrefixController@validatePrefix'                         ],
        'virtual_vpa_prefix_save'                  => ['post',     'virtual_vpa_prefixes',                           'VirtualVpaPrefixController@savePrefix'                             ],
        'webhook_create'                           => ['post',     'webhooks',                                       'WebhookV2Controller@create'                                        ],
        'webhook_delete'                           => ['delete',   'webhooks/{id}',                                  'WebhookV2Controller@delete'                                        ],
        'webhook_edit'                             => ['put',      'webhooks/{id}',                                  'WebhookV2Controller@update'                                        ],
        'webhook_fetch'                            => ['get',      'webhooks/{id}',                                  'WebhookV2Controller@get'                                           ],
        'webhook_fetch_events'                     => ['get',      'webhooks/events/all',                            'WebhookV2Controller@getWebhookEvents'                              ],
        'webhook_fetch_multiple'                   => ['get',      'webhooks',                                       'WebhookV2Controller@list'                                          ],
        'webhook_analytics'                        => ['get',      'webhooks/{id}/analytics',                        'WebhookV2Controller@getAnalytics'                                  ],
        'webhook_list_events'                      => ['post',     'webhooks/list_events',                           'WebhookV2Controller@listWebhookEvents'                             ],
        'sms_set_ratelimit_threshold'              => ['post',     'stork/sms/set_ratelimit_threshold',              'StorkController@setMerchantTemplateRateLimitThreshold'             ],
        'sms_delete_ratelimit_threshold'           => ['post',     'stork/sms/delete_ratelimit_threshold',           'StorkController@deleteMerchantTemplateRateLimitThreshold'          ],
        'suppression_list_remove'                  => ['post',     'stork/remove_suppression_entry',                 'StorkController@removeSuppressionListEntry'                        ],
        'oauth_app_webhook_create'                 => ['post',     'oauth/applications/{id}/webhooks',               'WebhookV2Controller@createForOAuthApp'                             ],
        'webhook_send_email'                       => ['post',     'webhooks-email/{emailType}',                     'WebhookV2Controller@sendEmail'                                     ],
        'admin_webhook_email_stork_recon'          => ['post',     'admin/webhooks/email/recon',                     'WebhookV2Controller@webhookEmailStorkRecon'                        ],
        'admin_process_webhook_events_csv'         => ['post',     'admin/webhooks/process_events_csv',              'WebhookV2Controller@processWebhookEventsFromCsv'                   ],
        'admin_process_webhook_events_by_ids'      => ['post',     'admin/webhooks/process_events_by_ids',           'WebhookV2Controller@processWebhookEventsByIds'                     ],
        'merchant_create_key'                      => ['post',     'keys',                                           'KeyController@postCreateKeys'                                      ],
        'merchant_create_key_with_otp'             => ['post',     'keys/otp',                                       'KeyController@postCreateKeysWithOtp'                               ],
        'merchant_fetch_keys'                      => ['get',      'keys',                                           'KeyController@getKeys'                                             ],
        'merchant_replace_key'                     => ['put',      'keys/{id}',                                      'KeyController@putKeys'                                             ],
        'merchant_replace_key_with_otp'            => ['put',      'keys/otp/{id}',                                  'KeyController@putKeysWithOtp'                                      ],
        'admin_key_migrate_to_credcase'            => ['post',     'admin/keys/migrate_to_credcase',                 'KeyController@migratetoCredcase'                                   ],
        'bulk_regenerate_api_keys'                 => ['post',     'regenerate-api-key/bulk',                        'KeyController@bulkRegenerateApiKey'                                ],
        'admin_key_migrate_impersonation_grants'   => ['post',     'admin/keys/migrate_impersonation_grants',        'MerchantController@migrateImpersonationGrants'                     ],
        'admin_consumer_migrate_apps_to_credcase'  => ['post',     'admin/consumers/migrate_apps_to_credcase',       'ConsumerController@migrateInternalApplicationsToCredcase'          ],
        'merchant_gst_fetch'                       => ['get',      'merchant/gst',                                   'MerchantController@getGSTDetails'                                  ],
        'merchant_gst_edit'                        => ['patch',    'merchant/gst',                                   'MerchantController@editGSTDetails'                                 ],
        'merchant_gstin_self_serve_status'         => ['get',      'merchant/gstin_self_serve',                      'MerchantController@getGstinSelfServeStatus'                        ],
        'merchant_gstin_self_serve_update'         => ['post',     'merchant/gstin_self_serve',                      'MerchantController@postGstinSelfServe'                             ],
        'merchant_international_toggle'            => ['patch',    'merchant/international',                         'MerchantController@toggleInternational'                            ],
        'merchant_save_business_website'           => ['post',     'merchant/save_business_website/{urlType}',       'MerchantController@postSaveBusinessWebsite'                        ],
        'business_website_status'                  => ['get',      'merchant/business_website_status',               'MerchantController@getWebsiteSelfServeWorkflowDetails'             ],
        'decrypt_merchant_website_comment'         => ['get',      'merchant/{actionId}/decrypt_website_comment',    'MerchantController@getDecryptedWebsiteCommentForWebsiteSelfServe'  ],
        'merchant_activation_details'              => ['get',      'merchant/activation',                            'MerchantController@getActivationDetails'                           ],
        'accounting_integration_merchant_details'  => ['get',      'accounting-integration/merchant/details',        'MerchantController@fetchMerchantDetailsForAccountingIntegrations'  ],
        'merchant_enhanced_activation_details'     => ['get',      'merchant/enhancedactivation/{merchantId}',       'MerchantController@getEnhancedMerchantActivationDetails'           ],
        'merchant_activation_save'                 => ['post',     'merchant/activation',                            'MerchantController@postSaveActivationDetails'                      ],
        'merchant_activation_otp_send'             => ['post',     'merchant/activation/otp/send',                   'MerchantController@otpSendViaEmail' ],
        'is_admin_as_merchant'                     => ['get',      'merchant/is_admin_as_merchant',                  'MerchantController@isAdminLoggedInAsMerchant'                      ],
        'merchant_activation_upload_file'          => ['post',     'merchant/activation/upload',                     'MerchantController@postUploadActivationFile'                       ],
        'merchant_activation_reviewers'            => ['get',      'merchant/activation/reviewers',                  'MerchantController@getMerchantActivationReviewers'                 ],
        'merchant_activation_bulk_assign_reviewer' => ['post',     'merchant/activation/bulk_assign_reviewer',       'MerchantController@bulkAssignReviewer'                             ],
        'merchant_activation_update_website'       => ['put',      'merchant/activation/update_website_details',     'MerchantController@updateWebsiteDetails'                           ],
        'merchant_activation_update_website_status'=> ['get',      'merchant/activation/websites/status',            'MerchantController@getWebsiteStatus'                               ],
        'merchant_activation_business_categories'  => ['get',      'merchant/activation/business_categories',        'MerchantController@getBusinessCategories'                          ],
        'merchant_activation_business_categories_v2' => ['get',    'merchant/activation/business_categories_v2',     'MerchantController@getBusinessCategoriesV2'                        ],
        'merchant_activation_business_details'     => ['get',      'merchant/activation/business_details',           'MerchantController@getBusinessDetails'                             ],
        'merchant_activation_company_search'       => ['get',      'merchant/activation/company_search',             'MerchantController@getCompanySearchList'                           ],
        'merchant_activation_gst_details'          => ['get',      'merchant/activation/gst_details',                'MerchantController@getGstInList'                                   ],
        'merchant_business_types'                  => ['get',      'merchant/onboarding/business_types',             'MerchantController@getBusinessTypes'                               ],
        'merchant_business_types_admin'            => ['get',      'merchant/onboarding/business_types/admin',        'MerchantController@getBusinessTypes'                              ],
        'merchant_supported_plugins'               => ['get',      'onboarding/merchant/supported_plugins',          'MerchantController@getMerchantSupportedPlugins'                    ],
        'merchant_info'                            => ['get',      'merchant/{id}/info',                             'MerchantController@getMerchantInfo'                                ],
        'merchant_entities_info'                   => ['get',      'merchant_entities_info',                         'MerchantController@fetchAllMerchantEntitiesRelatedInfo'            ],
        'merchant_plugin_fetch'                    => ['get',      'onboarding/merchants/{id}/plugin',               'MerchantController@getMerchantPlugin'                              ],
        'merchant_logs_search'                     => ['post',     'merchant/logs',                                  'MerchantController@createLogSearch'                                ],
        'merchant_logs_fetch'                      => ['get',      'merchant/logs',                                  'MerchantController@getMerchantLogs'                                ],
        'merchant_audit_info'                      => ['get',      'audit/info/merchant/{id}',                       'AuditingController@getMerchantAuditInfo'                           ],
        'entity_audit_info'                        => ['get',      'audit_logs/{entity}/{id}',                       'AuditingController@getAuditInfo'                                   ],
        'get_audit_entities'                       => ['get',      'audit_logs/entities',                            'AuditingController@getAuditEntities'                               ],
        'merchant_activation_needs_clarification'  => ['get',      'merchant/activation/clarification_reasons',      'MerchantController@getNeedsClarificationReasons'                   ],
        'merchant_activation_files'                => ['get',      'merchant/activation/{id}/files',                 'MerchantController@getActivationFiles'                             ],
        'merchant_activation_upload_file_admin'    => ['post',     'merchant/activation/{id}/files',                 'MerchantController@postUploadActivationFileAdmin'                  ],
        'merchant_activation_update'               => ['put',      'merchant/activation/{id}/update',                'MerchantController@putEditMerchantDetailsAfterLock'                ],
        'merchant_coupons_apply'                   => ['post',     'merchant/activation/coupons/apply',              'MerchantController@postApplyCoupon'                                ],

        //Digilocker redirect flow
        'merchant_identity_verification'           => ['post',     'merchant/identity/verification',                 'MerchantController@merchantIdentityVerification'                   ],
        'merchant_process_verification_details'    => ['post',     'merchant/process/identity/verificationDetails',  'MerchantController@processIdentityVerificationDetails'            ],

        'merchant_activation_send_notification'         => ['post',     'merchant/activation/{id}/send_whatsapp_notification',     'MerchantController@sendWhatsappNotification'         ],
        'merchant_activation_get_request_document_list' => ['get',      'merchant/activation/whatsapp_notification_document_list', 'MerchantController@getRequestDocumentList'           ],

        // Api for creating merchant using raw file
        'merchant_upload'                          => ['post',     'merchant/upload',                                'MerchantController@uploadMerchant'                ],
        'merchant_upload_miq_admin'                => ['post',     'merchant/upload_miq/batch',                      'MerchantController@uploadMiqBatch'                                 ],

        'merchant_activation_migrate'              => ['post',     'merchant/activation/migrate',                    'MerchantController@postMerchantDetailMigrate'                      ],
        'merchant_activation_archive'              => ['patch',    'merchant/activation/{id}/archive',               'MerchantController@updateActivationArchive'                        ],
        'merchant_activation_document_type'        => ['get',      'merchant/activation/document_types',              'MerchantController@getNCAdditionalDocuments'                       ],
        'merchant_activation_status'               => ['patch',    'merchant/activation/{id}/activation_status',     'MerchantController@updateActivationStatus'                         ],
        'internal_merchant_activation_status'      => ['patch',    'merchant/activation/{id}/activation_status/internal', 'MerchantController@updateActivationStatusInternal'            ],
        'merchant_activation_status_change_log'    => ['get',      'merchant/activation/{id}/status_change_log',     'MerchantController@getActivationStatusChangeLog'                   ],
        'merchant_get_rejection_reasons'           => ['get',      'merchant/activation/rejection_reasons',          'MerchantController@getRejectionReasons'                            ],
        'merchant_aov_config'                      => ['get',      'merchant/aov-config',                            'MerchantController@getAovConfig'                                   ],

        'merchant_tnc_details'                     => ['get',      'merchant/tnc/{id}',                              'MerchantController@getMerchantTnc'                                 ],
        'merchant_tnc_details_by_mid'              => ['get',      'merchant/{mid}/tnc',                             'MerchantController@getMerchantTncByMerchantId'                     ],
        'merchant_tnc_save'                        => ['post',     'merchant/tnc',                                   'MerchantController@postMerchantTnc'                                ],

        'merchant_website_section_download'        => ['get',      'merchant/{id}/website/{section_name}/download', 'MerchantController@getWebsiteSectionDownload'                                ],
        'merchant_website_section_action'          => ['post',     'merchant/website/section/action',               'MerchantController@postWebsiteSectionAction'                                ],
        'merchant_website_section_save'            => ['post',     'merchant/website/section',                      'MerchantController@saveMerchantWebsiteSection'                                ],
        'merchant_website_section_fetch'           => ['get',      'merchant/website/section',                      'MerchantController@getMerchantWebsiteSection'                                ],
        'merchant_website_section_page_load'       => ['get',      'merchant/policy/{section_name}',                'MerchantController@getMerchantWebsiteSectionPage'                                ],
        'public_merchant_website_section_page_load'=> ['get',      'merchant/policy/{section_name}/{id}',           'MerchantController@getPublicWebsiteSectionPage'                                ],
        'public_merchant_website_section_pages'    => ['get',      'merchant/policies/{id}',                          'MerchantController@getPublicWebsiteSectionPageLinks'                                ],
        'merchant_policy_details'                  => ['get',      'merchant/policy_details',                       'MerchantController@getMerchantPolicyDetails'                       ],

        'admin_website_section_action'             => ['post',     'merchant/{id}/website/section/action',          'MerchantController@postAdminSectionAction'                                ],
        'admin_website_section_save'               => ['post',     'merchant/{id}/website/section',                 'MerchantController@saveAdminWebsiteSection'                                ],
        'admin_website_section_fetch'              => ['get',      'merchant/{id}/website/section',                 'MerchantController@getAdminWebsiteSection'                                ],

        'merchant_consents_admin_fetch'            => ['get',       'merchant/consents/{mid}',                      'MerchantController@getMerchantConsents'                            ],
        'merchant_consents_save'                   => ['post',      'merchant/consents',                            'MerchantController@saveMerchantConsents'                           ],

        'merchant_website_plugin_save'             => ['post',      'onboarding/merchants/{mid}/plugin',             'MerchantController@saveWebsitePlugin'                              ],

        'appsflyer_attribution_details'            => ['post',     'appsflyer/attribution-details',                  'MerchantController@postAppsflyerAttributionDetails'],
        'merchant_checkout_details_save'           => ['post',     'merchant/checkout_details',                      'MerchantController@postMerchantCheckoutDetail'                     ],
        'merchant_checkout_details'                => ['get',      'merchant/checkout_details',                      'MerchantController@getMerchantCheckoutDetail'                      ],
        //merchant website details related routes
        'merchant_business_detail_fetch'           => ['get',      'merchant/{id}/business/detail',                  'MerchantController@getMerchantBusinessDetail'                      ],
        'merchant_business_detail_save'            => ['post',     'merchant/{id}/business/detail',                  'MerchantController@postMerchantBusinessDetail'                     ],
        'merchant_batches'                         => ['post',     'merchant/{id}/batches',                          'MerchantController@createBatches'                                  ],
        'merchant_payout_mail'                     => ['post',     'merchant/payout/mail',                           'MerchantController@sendPayoutMail'                                 ],
        'merchant_post_preferences'                => ['post',     'merchant/preferences/{group}',                   'MerchantController@postMerchantPreferences'                        ],
        'merchant_bank_allocation'                 => ['post',     'merchant/allocate_bank',                         'MerchantController@postMerchantPreferencesNitroHack'               ],
        'merchant_get_preferences'                 => ['get',      'merchant/preferences/{group}/{type?}',           'MerchantController@getMerchantPreferences'                         ],
        'admin_merchant_post_preferences'          => ['post',     'admin/merchant/preferences/{group}',             'MerchantController@postMerchantPreferences'                        ],
        'admin_merchant_post_preferences_bulk'     => ['post',     'admin/merchant/preferences/bulk/{group}',        'MerchantController@postMerchantPreferencesBulk'                    ],
        'admin_merchant_get_preferences'           => ['get',      'admin/merchant/preferences/{id}/{group}/{type?}','MerchantController@getMerchantPreferencesAdmin'                    ],
        'admin_merchant_get_preferences_for_one_ca' => ['get',     'admin_oneca/merchant/preferences/{id}/{group}/{type?}','MerchantController@getMerchantPreferencesAdmin'                    ],
        'merchant_toggle_fee_bearer'               => ['post',     'merchant/toggle_fee_bearer',                     'MerchantController@toggleFeeBearer'                                ],
        'merchant_integration_create'              => ['post',      'merchant/international_integration',             'MerchantController@createInternationalIntegration'                ],
        'merchant_integrations_get'                => ['get',      'merchant/{id}/international_integration',        'MerchantController@getInternationalIntegration'                    ],
        'merchant_integrations_delete'             => ['delete',   'merchant/international_integration',             'MerchantController@deleteInternationalIntegration'                 ],
        'emerchantpay_get_request_data'            => ['get',      'merchant/international/apm_request',             'MerchantApmEnablementController@getEmerchantpayRequestData'        ],
        'emerchantpay_create_request_data'         => ['post',     'merchant/international/apm_request',             'MerchantApmEnablementController@postEmerchantpayRequestData'       ],
        'emerchantpay_owner_delete'                => ['delete',   'merchant/international/apm_request/owner',       'MerchantApmEnablementController@deleteEmerchantpayRequestOwner'    ],
        'pricing_create_plan'                      => ['post',     'pricing',                                        'PricingController@postCreatePlan'                                  ],
        'buy_pricing_create_plan'                  => ['post',     'buy_pricing',                                    'PricingController@postCreateBuyPlan'                               ],
        'buy_pricing_terminal_cost'                => ['post',     'buy_pricing/terminal_cost',                      'PricingController@postCalculateBuyPricingCost'                     ],
        'pricing_get_plans'                        => ['get',      'pricing',                                        'PricingController@getPlans'                                        ],
        'pricing_get_merchant_plans'               => ['get',      'pricing/merchants',                              'PricingController@getMerchantPricingPlans'                         ],
        'buy_pricing_get_terminal_plans'           => ['get',      'buy_pricing/terminals',                          'PricingController@getTerminalBuyPricingPlans'                      ],
        'pricing_get_gateway_plans'                => ['get',      'pricing/gateways',                               'PricingController@getGatewayPricingPlans'                          ],
        'pricing_supported_networks'               => ['get',      'pricing/networks',                               'PricingController@getSupportedNetworks'                            ],
        'pricing_get_plan'                         => ['get',      'pricing/{id}',                                   'PricingController@getPlan'                                         ],
        'buy_pricing_get_plan'                     => ['get',      'buy_pricing/{id}',                               'PricingController@getBuyPricingPlan'                               ],
        'internal_buy_pricing_get_plan'            => ['get',      'internal/buy_pricing/{id}',                     'PricingController@getBuyPricingPlan'                              ],
        'pricing_add_plan_rule'                    => ['post',     'pricing/{id}/rule',                              'PricingController@postAddPlanRule'                                 ],
        'buy_pricing_add_plan_rule'                => ['post',     'buy_pricing/{id}/grouped_rule',                  'PricingController@postAddBuyPlanGroupedRule'                       ],
        'pricing_add_plan_rule_bulk'               => ['post',     'pricing/rules/bulk',                             'PricingController@postAddBulkPlanRules'                            ],
        'buy_pricing_add_plan_rule_bulk'           => ['post',     'buy_pricing/rules/bulk',                         'PricingController@postAddBulkBuyPricingRules'                      ],
        'pricing_delete_plan_rule_force'           => ['delete',   'pricing/{planId}/rule/{ruleId}/force',           'PricingController@deletePlanRuleForce'                             ],
        'buy_pricing_delete_plan_rule_force'       => ['delete',   'buy_pricing/{planId}/rule/{ruleId}/force',       'PricingController@deleteBuyPlanGroupedRuleForce'                   ],
        'pricing_update_plan_rule'                 => ['patch',    'pricing/{planId}/rule/{ruleId}',                 'PricingController@updatePlanRule'                                  ],
        'buy_pricing_update_plan_rule'             => ['patch',    'buy_pricing/{planId}/rule/{ruleId}',             'PricingController@updateBuyPricingPlanRule'                        ],
        'schedule_create'                          => ['post',     'schedules',                                      'ScheduleController@postSchedule'                                   ],
        'schedule_fetch'                           => ['get',      'schedules/{id}',                                 'ScheduleController@getSchedule'                                    ],
        'schedule_fetch_multiple'                  => ['get',      'schedules',                                      'ScheduleController@getSchedules'                                   ],
        'schedule_delete'                          => ['delete',   'schedules/{id}',                                 'ScheduleController@deleteSchedule'                                 ],
        'schedule_update'                          => ['put',      'schedules/{id}',                                 'ScheduleController@putSchedule'                                    ],
        'schedule_update_next_run'                 => ['post',     'schedules/update_next_run',                      'ScheduleController@updateNextRun'                                  ],
        'schedule_migration'                       => ['post',     'merchants/schedules/migrate',                    'MerchantController@migrateToSchedules'                             ],
        'schedule_assign'                          => ['post',     'merchants/{id}/schedules',                       'MerchantController@assignSettlementSchedule'                       ],
        'schedule_process_tasks'                   => ['post',     'schedules/process_tasks',                        'ScheduleController@processTasks'                                   ],
        'transaction_create_fees_breakup'          => ['post',     'transactions/fees_breakup',                      'TransactionController@postCreateFeeBreakup'                        ],
        'fees_breakup_partition_cron'              => ['post',     'transaction/fees_breakup/partition',             'TransactionController@createFeesBreakupPartition'                  ],
        'transaction_bulk_update'                  => ['put',      'transactions/bulk',                              'TransactionController@updateMultipleTransactions'                  ],
        'mark_transactions_postpaid'               => ['post',     'transactions/postpaid',                          'TransactionController@markTransactionPostpaid'                     ],
        'toggle_transaction_hold'                  => ['patch',    'transactions/hold',                              'TransactionController@toggleTransactionHold'                       ],
        'toggle_transaction_release'               => ['patch',    'transactions/release',                           'TransactionController@toggleTransactionRelease'                    ],
        'setl_fetch_schedule'                      => ['get',      'settlements/schedules',                          'ScheduleController@getSettlementSchedules'                         ],
        'setl_get_transaction_details'             => ['post',     'settlements/get_transaction_details',            'SettlementController@getSettlementSourceDetails'                   ],
        'generate_gifu_file'                       => ['post',     '{orgid}/send_gifu_file',                         'SettlementController@sendGifuFile'],
        'generate_nium_settlement_file'            => ['post',     'settlements/generate/nium',                      'SettlementController@getNiumFile'                                  ],
        'generate_nium_settlement_file_admin'      => ['post',     'settlements/admin/nium',                         'SettlementController@getNiumFile'                                  ],
        'setl_fetch_by_id'                         => ['get',      'settlements/{id}',                               'SettlementController@getSettlement'                                ],
        'org_setl_fetch_by_id'                     => ['get',      'org_settlements/{id}',                           'SettlementController@getOrgSettlement'                             ],
        'setl_fetch_multiple'                      => ['get',      'settlements',                                    'SettlementController@getSettlements'                               ],
        'setl_fetch_transactions'                  => ['get',      'settlements/{id}/transactions',                  'SettlementController@getSettlementTransactions'                    ],
        'fb_setl_fetch_transactions'               => ['get',      'fb/settlements/{id}/transactions',               'SettlementController@getSettlementTransactionsWithSettlementId'    ],
        'setl_fetch_source_details'                => ['post',     'settlements/{id}/transaction_source_details',    'SettlementController@getSettlementTransactionsSourceDetails'       ],
        'setl_ledger_inconsistency_debug_admin'    => ['post',     'settlements/ledger_inconsistency/debug',         'SettlementController@settlementsLedgerInconsistencyDebug'          ],
        'setl_ledger_inconsistency_debug_cron'     => ['post',     'settlements/ledger_inconsistency/debug/cron',    'SettlementController@settlementsLedgerInconsistencyDebug'          ],
        'setl_amount_check'                        => ['post',     'settlements/amount_check',                       'SettlementController@settlementsAmountCheck'                       ],

        // following routes currently not being used need to deprecate all these routes
//        'setl_edit'                                => ['put',      'settlements/{id}',                               'SettlementController@putEditSettlement'                            ],
//        'setl_delete_file'                         => ['delete',   'settlements/file/{setlFileType}',                'SettlementController@deleteSettlementFile'                         ],
//        'setl_file_generate'                       => ['post',     'settlements/file/generate',                      'SettlementController@postSettlementFileGenerate'                   ],

        'setl_initiate'                            => ['post',     'settlements/initiate/{channel?}',                'SettlementController@postSettlementInitiate'                       ],
        'setl_bucket_backfill'                     => ['post',     'settlements/bucket/fill',                        'SettlementController@postSettlementBucketBackfill'                 ],
        'setl_bucket_delete'                       => ['delete',   'settlements/bucket',                             'SettlementController@deleteCompletedBucketEntries'                 ],
        'setl_initiate_daily'                      => ['post',     'settlements/initiate_daily',                     'SettlementController@processDailySettlements'                      ],
        'setl_initiate_adhoc'                      => ['post',     'settlements/initiate_adhoc',                     'SettlementController@processAdhocSettlements'                      ],
        'setl_initiate_action'                     => ['post',     'settlements/initiate_action/{channel?}',         'SettlementController@postSettlementInitiate'                       ],
        'setl_process_data'                        => ['get',      'settlements/process',                            'SettlementController@getSettlementProcess'                         ],
        'setl_process_data_reset'                  => ['delete',   'settlements/process',                            'SettlementController@resetSettlementProcess'                       ],
        'setl_retry'                               => ['post',     'settlements/retry',                              'SettlementController@postSettlementRetry'                          ],
        'setl_amount'                              => ['get',      'settlements/amount',                             'SettlementController@getMerchantSettlementAmount'                  ],
        'setl_reconcile_generate'                  => ['post',     'settlements/reconcile/generate/{channel}',       'SettlementController@postSettlementReconcileFileGenerate'          ],
        'setl_reconcile_test'                      => ['post',     'settlements/reconcile/test/all',                 'SettlementController@postReconcileInTestMode'                      ],
        'setl_reconcile'                           => ['post',     'settlements/reconcile/{channel}',                'SettlementController@postSettlementReconcileThroughFile'           ],
        'setl_reconcile_h2h'                       => ['post',     'settlements/h2hreconcile/{channel}',             'SettlementController@postH2HSettlementReconcile'                   ],
        'setl_notify_h2h'                          => ['post',     'settlements/h2hnotify/{channel}',                'SettlementController@postH2HSettlementNotifyErrors'                ],
        'setl_reconcile_pull'                      => ['post',     'settlements/reconcile/api/{channel}',            'SettlementController@postSettlementReconcileThroughApi'            ],
        'setl_verify'                              => ['post',     'settlements/verify/{channel}',                   'SettlementController@postSettlementVerifyThroughApi',              ],
        'setl_calc_previous_fees'                  => ['post',     'settlements/fees/previous',                      'SettlementController@postSettlementCalculateFees',                 ],
        'setl_get_details'                         => ['get',      'settlements/{id}/details',                       'SettlementController@getSettlementDetails',                        ],
        'setl_post_details_old'                    => ['post',     'settlements/details',                            'SettlementController@postSettlementDetailsForOldTxns'              ],
        'setl_combined_report'                     => ['get',      'settlements/report/combined',                    'SettlementController@getSettlementCombinedReport'                  ],
        'setl_combined_recon'                      => ['get',      'settlements/recon/combined',                     'SettlementController@getSettlementCombinedReconReport'             ],
        'setl_update_channel_bulk'                 => ['put',      'settlements/channel/bulk',                       'SettlementController@updateChannelForMultipleSettlements'          ],
        'setl_holidays'                            => ['get',      'settlement/holidays',                            'SettlementController@getHolidayListForYear',                       ],
        'setl_transaction_replay'                  => ['post',     'settlement/transactions/replay',                 'SettlementController@replaySettlementTransactions',                ],
        'setl_transaction_replay_admin'            => ['post',     'settlement/transactions/replay/admin',           'SettlementController@replaySettlementTransactionsAdmin'            ],
        'setl_set_dcs_object'                      => ['post',     'settlement/dcs/set',                             'SettlementController@setDCSObject'                                 ],

        'setl_process_pos_file'                    => ['post',     'pos_settlements/validate/file',                  'SettlementController@processPosSettlementFile'                     ],
        'custom_setl_read_file'                    => ['post',     'custom_settlements/file',                        'SettlementController@readCustomSettlementsFile'                     ],
        'setl_pos_create'                          => ['post',     'pos_settlements/create',                         'SettlementController@createPosSettlement'                          ],

//    deprecating this route since it is not in use
//        'nodal_get_account_balance'                => ['get',      'nodal/balance/{channel}',                        'SettlementController@getAccountBalance'                            ],
        'nodal_initiate_transfer'                  => ['post',     'nodal/transfer',                                 'SettlementController@postInitiateTransfer'                         ],
        'nodal_initiate_transfer_admin'            => ['post',     'nodal/transfer/admin',                           'SettlementController@postInitiateTransfer'                         ],
        'nodal_add_beneficiary'                    => ['post',     'nodal/beneficiary/{channel}',                    'SettlementController@addBeneficiary'                               ],
        'create_settlement_entry'                  => ['post',     'settlements/create',                             'SettlementController@createSettlementEntry'                        ],
        'setl_status_update'                       => ['post',     'settlements/status/update',                      'SettlementController@postSettlementCreateStatusUpdate'             ],
        'setl_transactions_verify'                 => ['post',     'settlements/transactions/verify',                'SettlementController@settlementTransactionsVerify'                 ],
        'setl_sms_notification_status'             => ['get',      'settlements/sms_notification/status',            'SettlementController@getSettlementSmsNotificationStatus'           ],
        'setl_sms_notification_toggle'             => ['post',     'settlements/sms_notification/toggle',            'SettlementController@toggleSettlementSmsNotification'              ],
        //settlement service proxy routes
        'setl_admin_fetch'                         => ['post',     'admin/settlements/dashboard/fetch',              'SettlementController@serviceFetch'                                 ],
        'setl_admin_fetch_multiple'                => ['post',     'admin/settlements/dashboard/fetch_multiple',     'SettlementController@serviceFetchMultiple'                         ],
        'setl_merchant_config_get'                 => ['post',     'settlements/merchant_config/get',                'SettlementController@merchantConfigGet'                            ],
        'setl_merchant_config_create'              => ['post',     'settlements/merchant_config/create',             'SettlementController@merchantConfigCreate'                         ],
        'setl_merchant_config_update'              => ['post',     'settlements/merchant_config/update',             'SettlementController@merchantConfigUpdate'                         ],
        'setl_org_config_get'                      => ['post',     'settlements/org_config/get',                     'SettlementController@orgConfigGet'                            ],
        'setl_org_config_create_or_update'         => ['post',     'settlements/org_config/create_or_update',        'SettlementController@orgConfigCreateOrUpdate'                         ],
        'setl_merchant_config_bulk_update'         => ['post',     'settlements/merchant_config/bulk_update',         'SettlementController@merchantConfigBulkUpdate'                     ],
        'setl_fetch_details'                       => ['post',     'settlements/fetch_details',                      'SettlementController@fetchSettlementDetails'                       ],
        'setl_get_scheduleableEntities'            => ['get',      'settlements/scheduleable/entities',              'SettlementController@merchantConfigGetScheduleableEntities'        ],
        'setl_bank_account_create'                 => ['post',     'settlements/bank_account/create',                'SettlementController@bankAccountCreate'                            ],
        'setl_bank_account_update'                 => ['post',     'settlements/bank_account/update',                'SettlementController@bankAccountUpdate'                            ],
        'setl_update_bene_name'                    => ['post',     'settlements/bank_account/update_bene_name',      'SettlementController@updateBeneName'                               ],
        'setl_bank_account_get'                    => ['post',     'settlements/bank_account/get',                   'SettlementController@bankAccountGet'                               ],
        'setl_bank_account_delete'                 => ['post',     'settlements/bank_account/delete',                'SettlementController@bankAccountDelete'                            ],
        'setl_schedule_create'                     => ['post',     'settlements/schedule/create',                    'SettlementController@scheduleCreate'                               ],
        'setl_schedule_get'                        => ['post',     'settlements/schedule/get',                       'SettlementController@scheduleGet'                                  ],
        'setl_schedule_get_ids'                    => ['get',      'settlements/schedule/get_ids',                   'SettlementController@scheduleGetIds'                               ],
        'setl_schedule_rename'                     => ['post',     'settlements/schedule/rename',                    'SettlementController@scheduleRename'                               ],
        'setl_service_migration'                   => ['post',     'settlements/service/migration',                  'SettlementController@migrateConfigurations'                        ],
        'setl_service_blocked_migration'           => ['post',     'settlements/service/blocked_txn_migration',      'SettlementController@migrateBlockedTransactions'                        ],
        'setl_service_migration_admin'             => ['post',     'settlements/service/migration/admin',            'SettlementController@migrateConfigurationsAdmin'                   ],
        'setl_execution_reminder'                  => ['post',     'settlements/reminder/execution',                 'SettlementController@executionReminder'                            ],
        'setl_retry_new_service'                   => ['post',     'settlements/service/retry',                      'SettlementController@settlementRetry'                              ],
        'setl_initiate_new_service'                => ['post',     'settlements/service/initiate_action',            'SettlementController@settlementsInitiate',                         ],
        'setl_channel_state_get'                   => ['get',      'settlements/channel/state',                      'SettlementController@getChannelState'                              ],
        'setl_channel_status_update'               => ['post',     'settlements/channel/state',                      'SettlementController@channelStatusUpdate'                          ],
        'setl_transaction_hold'                    => ['post',     'settlements/transaction/hold',                   'SettlementController@transactionHold'                              ],
        'setl_transaction_release'                 => ['post',     'settlements/transaction/release',                'SettlementController@transactionRelease'                           ],
        'setl_execution_resume'                    => ['post',     'settlements/execution/resume',                   'SettlementController@executionResume'                              ],
        'setl_bulk_reminder_registration'          => ['post',     'settlements/reminder/bulk_register',             'SettlementController@bulkRegisterReminder'                         ],
        'setl_bulk_reminder_es_registration'       => ['post',     'settlements/reminder/scheduler/bulk_register',   'SettlementController@bulkRegisterEntitySchedulerReminder'          ],
        'setl_trigger_es_multiple'                 => ['post',     'settlements/trigger/scheduler/multiple',         'SettlementController@entitySchedulerTriggerMultiple'                     ],
        'setl_trigger_multiple'                    => ['post',     'settlements/trigger/multiple',                   'SettlementController@executionTriggerMultiple'                     ],
        'setl_trigger_report'                      => ['post',     'settlements/report/trigger',                     'SettlementController@triggerReport'                                ],
        'setl_execution_register'                  => ['post',     'settlements/execution/register',                 'SettlementController@executionRegister'                            ],
        'setl_replay_status_update'                => ['post',     'settlements/status_update/replay',               'SettlementController@replaySettlementsStatusUpdate'                ],
        'setl_migrate_payout'                      => ['post',     'settlements/migration/migrate_to_payout',        'SettlementController@migrateToPayout'                              ],
        'setl_transfer_status_update'              => ['post',     'settlements/transfer_status_update' ,            'SettlementController@transferStatusUpdate'                         ],
        'setl_entity_download_file'                => ['post',     'settlements/entities/get_file',                  'SettlementController@getSettlementServiceEntityFile'               ],
        'setl_optimizer_settlement_cron'           => ['post',     'settlements/optimizer/execute',                  'SettlementController@optimizerExternalSettlementsExecute'          ],
        'setl_optimizer_settlement_manual_api'     => ['post',     'settlements/optimizer/manual_execute',           'SettlementController@optimizerExternalSettlementsManualExecute'    ],
        'setl_merchant_dashboard_config_get'       => ['post',     'settlements/dashboard/merchant_config/get',      'SettlementController@merchantDashboardConfigGet'                   ],
        'setl_entity_alerts'                       => ['post',     'settlements/check_for_entity_alerts',            'SettlementController@checkForEntityAlerts'                         ],
        'setl_nodal_initiate_transfer_admin'       => ['post',     'settlements/nodal/transfer/admin',               'SettlementController@initiateInterNodalTransfer'                   ],
        'setl_insert_new_transaction_records'      => ['post',     'settlements/optimizer/insert_external_transactions','SettlementController@insertExternalTransactionRecord'           ],
        'setl_update_execution_transaction_count'  => ['put',      'settlements/optimizer/update_transaction_count', 'SettlementController@updateTransactionCountOfExecution'            ],
        'setl_update_optimiser_execution_status'   => ['put',      'settlements/optimizer/update_status_of_execution','SettlementController@updateStatusofOptimiserExecution'            ],



        'adj_fetch_by_id'                          => ['get',      'adjustments/{id}',                               'AdjustmentController@getAdjustment'                                ],
        'adj_fetch_multiple'                       => ['get',      'adjustments',                                    'AdjustmentController@getAdjustments'                               ],
        'adj_add'                                  => ['post',     'adjustments',                                    'AdjustmentController@postAdjustment'                               ],
        'setl_adj_add'                             => ['post',     'settlements/adjustments',                        'AdjustmentController@postAdjustment'                               ],
        'adj_add_reverse'                          => ['post',     'adjustments/reversal',                           'AdjustmentController@postReverseAdjustments'                       ],
        'adj_add_bulk'                             => ['post',     'adjustments/bulk',                               'AdjustmentController@postMultipleAdjustments'                      ],
        'adj_add_batch'                            => ['post',     'adjustments/batch',                              'AdjustmentController@postAdjustmentBatch'                          ],
        'adj_transaction_create'                   => ['post',     'adjustments/transaction_create',                 'AdjustmentController@adjustmentsTransactionCreate'                          ],
        'mock_hdfc_enroll'                         => ['post',     'gateway/mock_hdfc/enroll',                       'MockGatewayController@enroll'                                      ],
        'mock_hdfc_payment'                        => ['post',     'gateway/mock_hdfc/payment',                      'MockGatewayController@payment'                                     ],
        'mock_hdfc_auth_enrolled'                  => ['post',     'gateway/mock_hdfc/auth_enrolled',                'MockGatewayController@authEnrolled'                                ],
        'mock_hdfc_3dsecure'                       => ['post',     'gateway/3dsecure',                               'MockGatewayController@post3dSecure'                                ],
        'mock_acs'                                 => ['post',     'gateway/acs/{gateway}',                          'MockGatewayController@postAcs'                                     ],
        'mock_bvs_validation_event'                => ['post',     'mock-bvs-validation',                            'MerchantController@mockBvsValidationEvent'                         ],
        'mock_atom_payment'                        => ['post',     'gateway/mockanb/payment',                        'MockGatewayController@postAtomPayment'                             ],
        'mock_axis_migs_payment'                   => ['post',     'gateway/mockaxismigs/payment',                   'MockGatewayController@postAxisPayment'                             ],
        'mock_first_data_payment'                  => ['post',     'gateway/mockfirstdata/payment',                  'MockGatewayController@postFirstDataPayment'                        ],
        'mock_axis_genius_payment'                 => ['post',     'gateway/mockaxisgenius/payment',                 'MockGatewayController@postAxisGeniusPayment'                       ],
        'mock_paytm_payment'                       => ['post',     'gateway/mockpaytm/payment',                      'MockGatewayController@postPaytmPayment'                            ],
        'mock_mobikwik_payment'                    => ['post',     'gateway/mockmobikwik/payment',                   'MockGatewayController@postMobikwikPayment'                         ],
        'mock_billdesk_payment'                    => ['post',     'gateway/mockbilldesk/payment',                   'MockGatewayController@postBilldeskPayment'                         ],
        'mock_ebs_payment'                         => ['post',     'gateway/mockebs/payment',                        'MockGatewayController@postEbsPayment'                              ],
        'mock_esigner_payment'                     => ['get',      'gateway/mock/esigner/{signer}',                  'MockGatewayController@postEsignerPayment'                          ],
        'mock_emandate_payment'                    => ['post',     'gateway/mock/enach/npci/{authType}',             'MockGatewayController@postEnachNpciNetbankingPayment'              ],
        'mock_esigner_legaldesk_payment'           => ['get',      'gateway/mock/esigner/{signer}',                  'MockGatewayController@postEsignerPayment'                          ],
        'mock_sharp_payment_post'                  => ['post',     'gateway/mocksharp/payment',                      'MockGatewayController@getSharpPayment'                             ],
        'mock_sharp_payment_get'                   => ['get',      'gateway/mocksharp/payment',                      'MockGatewayController@getSharpPayment'                             ],
        'mock_amex_payment'                        => ['post',     'gateway/mockamex/payment',                       'MockGatewayController@postAmexPayment'                             ],
        'mock_card_fss_payment'                    => ['get',      'gateway/mockfss/payment',                        'MockGatewayController@getFssPayment'                               ],
        'mock_card_fss_payment_post'               => ['post',     'gateway/mockfss/payment',                        'MockGatewayController@getFssPayment'                               ],
        'mock_paysecure_payment'                   => ['post',     'gateway/mockpaysecure/payment',                  'MockGatewayController@postPaysecurePayment'                        ],
        'mock_sharp_payment_submit'                => ['post',     'gateway/mocksharp/payment/submit',               'MockGatewayController@postSharpPayment'                            ],
        'mock_netbanking_payment'                  => ['post',     'gateway/mock/netbanking/{bank}',                 'MockGatewayController@postNetbankingPayment'                       ],
        'mock_netbanking_payment_get'              => ['get',      'gateway/mock/netbanking/{bank}',                 'MockGatewayController@postNetbankingPayment'                       ],
        'mock_mozart_payment_post'                 => ['post',     'gateway/mock/mozart/{gateway}',                  'MockGatewayController@postMozartPayment'                           ],
        'mock_mozart_payment_get'                  => ['get',      'gateway/mock/mozart/{gateway}',                  'MockGatewayController@postMozartPayment'                           ],
        'mock_wallet_payment'                      => ['post',     'gateway/mock/wallet/{wallet}',                   'MockGatewayController@walletPayment'                               ],
        'mock_wallet_payment_get'                  => ['get',      'gateway/mock/wallet/{wallet}',                   'MockGatewayController@walletPayment'                               ],
        'mock_wallet_payment_with_paymentid'       => ['post',     'gateway/mock/wallet/{wallet}/{paymentId}',       'MockGatewayController@walletPayment'                               ],
        'mock_generate_reconciliation'             => ['post',     'gateway/mock/reconciliation/{gateway}',          'MockGatewayController@generateGatewayReconciliationFile'           ],
        'mock_upi_payment'                         => ['post',     'gateway/mock/upi/{bank}',                        'MockGatewayController@postUpiPayment'                              ],
        'mock_aeps_payment'                        => ['post',     'gateway/mock/aeps/{bank}',                       'MockGatewayController@postAepsPayment'                             ],
        'mock_cardless_emi_payment'                => ['post',     'gateway/mockcardless_emi/payment',               'MockGatewayController@postCardlessEmiPayment'                      ],
        'mock_paylater_payment'                    => ['post',     'gateway/mockpaylater/payment',                   'MockGatewayController@postPaylaterPayment'                         ],
        'admin_fetch_report_types'                 => ['get',      'admin/reports/types',                            'AdminController@getOpsReportTypes'                                 ],
        'admin_fetch_report'                       => ['get',      'admin/reports/{type}',                           'AdminController@getOpsReport'                                      ],
        'admin_fetch_all_entities'                 => ['get',      'admin/entities/all',                             'AdminController@getEntities'                                       ],
        'external_admin_fetch_all_entities'        => ['get',      'external_admin/entities/all',                    'AdminController@getEntitiesForExternalAdmin'                       ],
        'admin_fetch_all_entities_axis'            => ['get',      'axis_admin/entities/all',                        'AdminController@getEntitiesAxis'                                   ],
        'admin_fetch_entity_multiple'              => ['get',      'admin/{type}',                                   'AdminController@getEntityMultiple'                                 ],
        'admin_entity_sync'                        => ['post',     'admin/entity_sync/{type}/{id}',                  'AdminController@syncEntityById'                                    ],
        'admin_fetch_axis_paysecure_payments'      => ['get',      'axis_admin/axis_paysecure/payment',              'AdminController@getAxisPaysecurePayments'                          ],
        'admin_fetch_entity_by_id_axis_paysecure'  => ['get',      'axis_admin/payment/{id}',                        'AdminController@getEntityByIdAxis'                                 ],
        'external_admin_fetch_entity_multiple'     => ['get',      'external_admin/{type}',                          'AdminController@getEntityMultipleForExternalAdmin'                 ],
        'razorflow_admin_fetch_entity_multiple'    => ['get',      'rf/admin/{type}',                                'AdminController@getEntityMultiple'                                 ],
        'admin_fetch_terminal_multiple'            => ['get',      'admin/terminal',                                 'AdminController@getTerminalMultiple'                                 ],
        'razorflow_admin_fetch_terminal_multiple'  => ['get',      'rf/admin/terminal',                              'AdminController@getTerminalMultiple'                                 ],
        'admin_fetch_terminal_by_id'               => ['get',      'admin/terminal/{id}',                            'AdminController@getTerminalById'                                   ],
        'non_org_admin_fetch_terminal_by_id'       => ['get',      'admin/external_org/terminal/{id}',               'AdminController@getTerminalById'                                   ],
        'admin_fetch_entity_by_id'                 => ['get',      'admin/{type}/{id}',                              'AdminController@getEntityById'                                     ],
        'external_admin_fetch_entity_by_id'        => ['get',      'external_admin/{type}/{id}',                     'AdminController@getEntityByIdForExternalAdmin',                    ],
        'razorflow_admin_fetch_entity_by_id'       => ['get',      'rf/admin/{type}/{id}',                           'AdminController@getEntityById'                                     ],
        'razorflow_admin_fetch_terminal_by_id'     => ['get',      'rf/admin/terminal/{id}',                         'AdminController@getTerminalById'                                   ],
        'entity_tax_update'                        => ['put',      'admin/{entity}/tax_update',                      'AdminController@updateEntityTax'                                   ],
        'entity_balance_id_update'                 => ['post',     'admin/{entity}/balance_id_update',               'AdminController@updateEntityBalanceIdInBulk'                       ],
        'admin_get_file'                           => ['get',      'files/{fileId}/signed-url',                      'FileStoreController@getFile'                                       ],
        'admin_post_stork'                         => ['post',     'admin/stork/{path?}',                            'AdminController@postStork'                                         ],
        'send_test_newsletter'                     => ['post',     'admin/newsletter/test',                          'AdminController@postSendTestNewsletter'                            ],
        'send_newsletter'                          => ['post',     'admin/newsletter/mail',                          'AdminController@postSendNewsletter'                                ],
        'bulk_data_entry'                          => ['post',     'admin/bulkcreate',                               'AdminController@bulkCreateEntity'                                  ],
        'gateway_payment_callback_get'             => ['get',      'callback/{gateway}',                             'GatewayController@callbackGateway'                                 ],
        'gateway_payment_callback_post'            => ['post',     'callback/{gateway}',                             'GatewayController@callbackGateway'                                 ],
        'gateway_payment_callback_kotak'           => ['get',      'gateway/netbanking_kotak/callback',              'GatewayController@callbackKotak'                                   ],
        'gateway_payment_callback_kotak_corp_post' => ['post',     'gateway/netbanking_kotak/callback/corporate',    'GatewayController@callbackKotakCorp'                               ],
        'gateway_payment_callback_kotak_corp_get'  => ['get',      'gateway/netbanking_kotak/callback/corporate',    'GatewayController@callbackKotakCorp'                               ],
        'gateway_payment_static_callback_get'      => ['get',      'gateway/{method}/{gateway}/callback/{mode}',     'GatewayController@staticCallbackGateway'                           ],
        'gateway_payment_static_callback_post'     => ['post',     'gateway/{method}/{gateway}/callback/{mode}',     'GatewayController@staticCallbackGateway'                           ],
        'gateway_payment_static_s2scallback_get'   => ['get',      'gateway/{method}/{gateway}/s2scallback/{mode}',  'GatewayController@staticS2SCallbackGatewayWithModeAndMethod'       ],
        'gateway_payment_static_s2scallback_post'  => ['post',     'gateway/{method}/{gateway}/s2scallback/{mode}',  'GatewayController@staticS2SCallbackGatewayWithModeAndMethod'       ],
        'payment_authorize_google_pay_cards'       => ['post',     'gateway/google_pay/authorize',                   'GatewayController@authorizePayment'                                ],
        'payment_verify_google_pay_cards'          => ['post',     'gateway/google_pay/verify',                      'GatewayController@verifyPaymentStatus'                             ],
        'gateway_payment_callback_kotak_cancel'    => ['post',     'gateway/netbanking_kotak/callback',              'GatewayController@callbackKotakCancel'                             ],
        'gateway_emandate_callback_npci_nb'        => ['post',     'gateway/emandate_npci_nb/callback',              'GatewayController@callbackEmandateNpciNb'                          ],
        'gateway_payment_callback_corporation'     => ['get',      'gateway/netbanking_corporation/callback',        'GatewayController@callbackCorporation'                             ],
        'gateway_payment_callback_yesb_get'        => ['get',      'gateway/netbanking_yesb/callback',               'GatewayController@callbackYesbank'                                 ],
        'gateway_payment_callback_yesb_post'       => ['post',     'gateway/netbanking_yesb/callback',               'GatewayController@callbackYesbank'                                 ],
        'gateway_payment_callback_getsimpl_post'   => ['post',     'gateway/getsimpl/callback',                      'GatewayController@callbackGetsimpl'                                ],
        'gateway_payment_callback_canara_post'     => ['post',     'gateway/netbanking_canara/callback',             'GatewayController@callbackCanara'                                  ],
        'gateway_payment_callback_canara_get'      => ['get',      'gateway/netbanking_canara/callback',             'GatewayController@callbackCanara'                                  ],
        'gateway_payment_callback_amazonpay'       => ['get',      'gateway/wallet_amazonpay/callback/{ajax?}',      'GatewayController@callbackAmazonpay'                               ],
        'gateway_payment_callback_amazonpay_post'  => ['post',     'gateway/wallet_amazonpay/callback/{ajax?}',      'GatewayController@callbackAmazonpay'                               ],
        'gateway_first_data_pares_store'           => ['post',     'gateway/first_data/store_pares',                 'GatewayController@storeFirstDataPares'                             ],
        'geoip_update'                             => ['post',     'geoip/update',                                   'AdminController@updateGeoIps'                                      ],
        'gateway_payment_callback_upi_airtel'      => ['post',     'gateway/upi_airtel/callback',                    'GatewayController@callbackUpiAirtel'                               ],
        'gateway_payment_upi_data_cron'            => ['post',     'gateway/upi/cron/{action}',                      'GatewayController@upiDataCorrection'                               ],
        // Temporary route for upi recurring callbacks from icici.
        'gateway_payment_callback_recurring'       => ['post',     'callback/recurring/{gateway}',                   'GatewayController@callbackGateway'                                 ],

        // File-based Emandate Routes
        'emandate_debit_reconcile'                 => ['post',     'emandate/debit/reconcile/{gateway}',             'EMandateController@postReconcileDebitFile'                         ],

        'nach_batch_process'                       => ['post',     'nach/batch_service',                             'EMandateController@postProcessNachDebit'                                       ],
        'emandate_batch_process'                   => ['post',     'emandate/batch_service',                         'EMandateController@postProcessEmandateDebit'                       ],

        // Routes for emandate merchant configs
        'fetch_emandate_merchant_configs'          => ['get',       'emandate/merchant_configs',                      'EMandateController@getBulkEmandateConfigs'                        ],
        'create_emandate_merchant_configs'         => ['post',      'emandate/merchant_configs',                      'EMandateController@postBulkEmandateConfigs'                       ],
        'edit_emandate_merchant_configs'           => ['patch',     'emandate/merchant_configs',                      'EMandateController@editBulkEmandateConfigs'                       ],

        // Routes for netbanking configs
        'fetch_netbanking_configs'                 => ['get',        'netbanking/merchant_configs',                    'NetbankingController@fetchNetbankingConfigs'                      ],
        'create_netbanking_configs'                => ['post',       'netbanking/merchant_configs',                    'NetbankingController@createNetBankingConfigs'                     ],
        'edit_netbanking_configs'                  => ['put',        'netbanking/merchant_configs',                    'NetbankingController@editNetbankingConfigs'                       ],

        // Routes for DCS banking configs
        'fetch_all_banking_configs'                => ['get',        'all_banking_configs',                          'BankingConfigController@fetchAllBankingConfigs'                    ],
        'get_banking_config'                       => ['get',        'banking_configs',                              'BankingConfigController@getBankingConfig'                          ],
        'edit_banking_configs'                     => ['post',       'banking_configs_upsert',                       'BankingConfigController@upsertBankingConfigs'                      ],

        'test_mailgun'                             => ['post',     'test_mailgun',                                   'ReconciliatorController@testMailgunFlow'                        ],

        'reconciliate'                             => ['post',     'reconciliate',                                   'ReconciliatorController@postReconciliation'                        ],
        'reconciliate_via_batch_service'           => ['post',     'reconciliate/batch_service/bulk',                'ReconciliatorController@postBulkReconciliationViaBatchService'     ],
        'recon_fetch_batchs_files_multiple'        => ['get',      'reconciliate/batches',                           'ReconciliatorController@getReconBatches'],
        'recon_fetch_files_count'                  => ['get',      'reconciliate/files',                             'ReconciliatorController@getReconFiles'],
        'recon_update_data'                        => ['post',     'reconciliate/data',                              'ReconciliatorController@updateUpiReconciliationData'               ],
        'refunds_reconcile_bulk'                   => ['post',     'reconciliate/refunds/bulk',                      'ReconciliatorController@postBulkRefundsReconciliation'             ],
        'dummy_return_callback'                    => ['post',     'return/callback',                                'PaymentController@postDummyReturnCallback'                         ],
        'dummy_critical_error'                     => ['get',      'trigger/error',                                  'AdminController@getTriggerError'                                   ],
        'set_config_keys'                          => ['put',      'config/keys',                                    'AdminController@setConfigKeys'                                     ],
        'update_config_key'                        => ['patch',    'config/key',                                     'AdminController@updateConfigKey'                                   ],
        'get_config_key'                           => ['get',      'config/key',                                     'AdminController@getConfigKey'                                      ],
        'delete_config_key'                        => ['delete',   'config/key',                                     'AdminController@deleteConfigKey'                                   ],
        'get_config_keys'                          => ['get',      'config/keys',                                    'AdminController@getConfigKeys'                                     ],
        'get_cache_counts'                         => ['get',      'cache/counts',                                   'AdminController@getQueryCacheCounts'                               ],
        'get_mode_config_instruments'              => ['get',      'instant_refund_mode_configs/instruments',        'AdminController@getModeConfigInstruments'                          ],
        'set_redis_keys'                           => ['put',      'redis/keys',                                     'AdminController@setRedisKeys'                                      ],
        'set_gateway_downtime_conf'                => ['put',      'gateway/downtime/conf',                          'AdminController@setGatewayDowntimeConf'                            ],
        'get_gateway_downtime_conf'                => ['get',      'gateway/downtime/conf',                          'AdminController@getGatewayDowntimeConf'                            ],
        'get_es_pricing_merchant'                  => ['get',      'cache/es_pricing',                               'MerchantController@getEarlySettlementPricingForMerchant'           ],
        'get_scheduled_es_pricing_merchant'        => ['get',      'es/scheduled_pricing',                           'MerchantController@getScheduledEarlySettlementPricingForMerchant'  ],
        'get_instant_refunds_pricing_merchant'     => ['get',      'instant_refunds/pricing',                        'MerchantController@getInstantRefundsPricingForMerchant'            ],
        'enable_es_scheduled'                      => ['post',     'es/scheduled',                                   'MerchantController@enableScheduledEs'                              ],
        'dummy_route'                              => ['post',     'dummy/route',                                    'PaymentController@postDummyRoute'                                  ],
        'transparent_redirect_get'                 => ['get',      'redirect',                                       'AdminController@getTransparentRedirect'                            ],
        'transparent_redirect_post'                => ['post',     'redirect',                                       'AdminController@postTransparentRedirect'                           ],
        'feature_dummy'                            => ['get',      'dummy',                                          'MerchantController@getDummyFeatures'                               ],
        'razorx_dummy'                             => ['get',      'dummy/razorx',                                   'MerchantController@getDummyRazorX'                                 ],
        'emi_plan_add'                             => ['post',     'emi',                                            'EmiController@addEmiPlan'                                          ],
        'emi_plans_fetch_multiple'                 => ['get',      'emi',                                            'EmiController@fetchEmiPlans'                                       ],
        'emi_plans_migrate'                        => ['get',      'emi/migration',                                  'EmiController@migrateToCardPS'                                     ],
        'emi_plan_fetch_by_id'                     => ['get',      'emi/{id}',                                       'EmiController@fetchEmiPlanById'                                    ],
        'emi_plan_delete'                          => ['delete',   'emi/{id}',                                       'EmiController@deleteEmiPlan'                                       ],
        'emi_generate_excel'                       => ['post',     'emi/generate/excel',                             'EmiController@generateEmiExcel'                                    ],
        'card_settlement_generate_file'            => ['post',     'card/settlements/file',                          'GatewayFileController@generateCardSettlementFileForBank'           ],
        'enable_emi_merchant_sub'                  => ['post',     'merchant/{id}/emi_plan/{emiPlanId}',             'MerchantController@enableEmiMerchantSubvention'                    ],
        'enable_instant_refunds'                   => ['post',     'admin/enable_instant_refunds/{id}',                    'AdminController@enableInstantRefunds'                           ],
        'disable_instant_refunds'                  => ['post',     'admin/disable_instant_refunds/{id}',                   'AdminController@disableInstantRefunds'                          ],
        'track_plugins_events_segment'             => ['post',     'plugins/segment',                                'PluginEventsController@trackSegment'                               ],
        'order_create'                             => ['post',     'orders',                                         'OrderController@createOrder'                                       ],
        'order_fetch'                              => ['get',      'orders',                                         'OrderController@getOrders'                                         ],
        'order_fetch_by_id_1cc'                    => ['get',      '1cc/orders/{id}',                                'OrderController@fetchOrderByIdWithOffer'                           ],
        'order_fetch_by_id'                        => ['get',      'orders/{id}',                                    'OrderController@fetchOrderById'                                    ],
        'order_fetch_by_id_internal'               => ['get',      'orders_internal/{id}',                           'OrderController@fetchOrderDetailById'                              ],
        'order_fetch_by_id_internal_admin'         => ['get',      'orders_internal_admin/{id}',                     'OrderController@fetchOrderDetailByIdAdmin'                         ],
        'order_fetch_internal_checkout'            => ['post',     'internal/orders/checkout',                       'OrderController@fetchOrderDetailsForCheckout'                      ],
        'order_payments'                           => ['get',      'orders/{id}/payments',                           'OrderController@fetchPayments'                                     ],
        'order_refund_multiple_authorized'         => ['post',     'orders/payments/refund',                         'PaymentController@postRefundAuthorizedPaymentsOfPaidOrders'        ],
        'order_edit'                               => ['patch',    'orders/{id}',                                    'OrderController@update'                                            ],
        'internal_order_update'                    => ['patch',    'internal/orders/{id}',                           'OrderController@internalOrderUpdate'                               ],
        'fetch_order_line_items'                   => ['get',      'orders/{id}/line_items',                         'OrderController@fetchLineItems'                                    ],
        'fetch_product_details_for_order'          => ['get',      'orders/{id}/product_details',                    'OrderController@fetchProductDetailsForOrder'                       ],
        'order_create_admin'                       => ['post',     'admin/orders',                                   'OrderController@createOrder'                                       ],
        // app scalability api
        'merchant_app_scalability_config'          => ['get',      'merchant/user/app_config',                       'MerchantController@getAppScalabilityConfig'                        ],
        'merchant_user_app_change_ftux'            => ['put',      'merchant/user/change/ftux',                      'MerchantController@putAppChangeUserFtux'                           ],
        'merchant_user_app_incr_product_session'   => ['post',     'merchant/user/app/session',                      'MerchantController@postIncrMerchantUserProductSession'             ],
        'merchant_recent_trans_with_source'        => ['get',      'merchant/payments/source',                       'MerchantController@getMerchantPaymentsWithOrderSource'             ],

        'reports_transaction_broking'              => ['get',      'reports/transaction/broking',                    'MerchantController@getBrokerTransactionReport'                     ],
        'reports_transaction_dsp'                  => ['get',      'reports/transaction/dsp',                        'MerchantController@getDSPTransactionReport'                        ],
        'reports_order_rpp'                        => ['get',      'reports/order/rpp',                              'MerchantController@getRPPOrderReport'                              ],
        'reports_monthly_invoice'                  => ['get',      'reports/invoice',                                'MerchantController@getInvoiceReport'                               ],
        'reports_monthly_banking_invoice'          => ['post',     'reports/invoice/banking',                        'MerchantController@generateBankingInvoice'                         ],
        'reports_monthly_banking_invoice_admin'    => ['post',     'admin/reports/invoice/banking',                  'MerchantController@generateBankingInvoice'                         ],
        'invoice_admin_actions'                    => ['post',     'invoice/admin',                                  'MerchantController@adminActions'                                   ],
        'reports_public_entity'                    => ['get',      'reports/{entity}',                               'MerchantController@getPublicEntityReport'                          ],
        'reports_public_entity_file'               => ['get',      'reports/{entity}/file',                          'MerchantController@getPublicEntityReportUrl'                       ],
        'reports_refund_irctc'                     => ['get',      'reports/refund/irctc',                           'MerchantController@getIrctcRefundReport'                           ],
        'get_global_config'                        => ['get',      'merchant/{mid}/configs',                         'MerchantController@getGlobalMerchantConfigs'                       ],
        'customer_create'                          => ['post',     'customers',                                      'CustomerController@createLocalCustomer'                            ],
        'customer_update_global'                   => ['patch',    'customers',                                      'CustomerController@updateGlobalCustomer'                            ],
        'customer_truecaller_verify'               => ['post',     'customers/truecaller/verify',                    'CustomerController@verifyTruecallerAuthRequest'                    ],
        '1cc_customer_truecaller_verify'           => ['post',     '1cc/customers/truecaller/verify',                'CustomerController@verifyOneCCTruecallerAuthRequest'                    ],
        'customer_truecaller_callback'             => ['post',     'customers/truecaller/callback',                  'CustomerController@handleTruecallerCallback'                                      ],
        'customer_truecaller_auth_internal'        => ['post',     'internal/customers/truecaller/auth',             'CustomerController@createTruecallerAuthRequestInternal'            ],
        'get_or_create_customer_internal'          => ['post',     'customers/create',                               'CustomerController@getOrCreateLocalCustomerInternal'               ],
        'customer_update'                          => ['put',      'customers/{id}',                                 'CustomerController@updateCustomer'                                 ],
        'customer_fetch_by_id'                     => ['get',      'customers/{id}',                                 'CustomerController@getCustomer'                                    ],
        'customer_fetch_by_id_internal'            => ['get',      'customers/{id}/merchant/{merchant_id}',          'CustomerController@getCustomerByCustomerAndMerchantId'             ],
        'customer_fetch_internal_for_checkout'     => ['get',      'internal/customers/checkout',                    'CustomerController@getCustomerDetailsForCheckout'                  ],
        'customer_fetch_multiple'                  => ['get',      'customers',                                      'CustomerController@getCustomers'                                   ],
        'customer_add_bank_account'                => ['post',     'customers/{id}/bank_account',                    'CustomerController@postBankAccount'                                ],
        'customer_fetch_bank_account'              => ['get',      'customers/{id}/bank_account',                    'CustomerController@getBankAccounts'                                ],
        'customer_delete_bank_account'             => ['delete',   'customers/{id}/bank_account/{ba_id}',            'CustomerController@deleteBankAccounts'                             ],
        'customer_wallet_payout'                   => ['post',     'customers/{id}/payouts',                         'CustomerController@postCustomerWalletPayout',                      ],
        'customer_create_token'                    => ['post',     'customers/{id}/tokens',                          'CustomerController@addToken'                                       ],
        'customer_create_token_public'             => ['post',     'customers/{x_entity_id}/tokens/public',          'CustomerController@addToken'                                       ],
        'customer_update_token'                    => ['put',      'customers/{id}/tokens/{token}',                  'CustomerController@updateToken'                                    ],
        'customer_fetch_token'                     => ['get',      'customers/{id}/tokens/{token}',                  'CustomerController@fetchToken'                                     ],
        'customer_fetch_tokens'                    => ['get',      'customers/{id}/tokens',                          'CustomerController@fetchTokens'                                    ],
        'customer_fetch_tokens_internal'           => ['get',      'internal/customers/tokens',                      'TokenController@fetchCustomerTokensInternal'                       ],
        'customer_delete_token'                    => ['delete',   'customers/{id}/tokens/{token}',                  'CustomerController@deleteToken'                                    ],
        'customer_cancel_token'                    => ['put',      'customers/{id}/tokens/{token}/cancel',           'CustomerController@cancelToken'                                    ],
        'customer_get_saved_status'                => ['get',      'customers/status/{contact}',                     'CustomerController@fetchGlobalCustomerStatus'                      ],
        'customer_logout_global'                   => ['delete',   'apps/logout',                                    'CustomerController@logoutCustomer'                                 ],
        'customer_create_global_address'           => ['post',     'customers/addresses',                            'CustomerController@createGlobalAddress'                            ],
        'customer_edit_global_address'             => ['put',      'customers/addresses',                            'CustomerController@editGlobalAddress'                            ],
        'customer_record_1cc_address_consent_view'     => ['put',      '1cc/consent/address/view',                   'CustomerController@recordAddressConsent1ccAudits'                  ],
        'customer_record_1cc_address_consent'          => ['put',      '1cc/address/consent',                        'CustomerController@recordAddressConsent1cc'                        ],
        'record_1cc_customer_consent'              => ['post',     '1cc/customer/consent/marketing',                 'CustomerController@recordCustomerConsent1cc'                       ],
        'customer_one_cc_get_or_create_global'     => ['post',     'customers/1cc/global',                           'CustomerController@getOrCreateGlobalCustomer1cc'                   ],
        'customer_fetch_by_id_global'              => ['get',      'customers/1cc/global/{id}',                      'CustomerController@fetchGlobalCustomerByID' ],
        'customer_create_address'                  => ['post',     'customers/{id}/addresses',                       'CustomerController@postCreateAddress'                              ],
        'customer_delete_address'                  => ['delete',   'customers/{id}/addresses/{address_id}',          'CustomerController@deleteAddress'                                  ],
        'customer_fetch_addresses'                 => ['get',      'customers/{id}/addresses',                       'CustomerController@getAddresses'                                   ],
        'customer_set_primary_address'             => ['put',      'customers/{id}/addresses/{address_id}/primary',  'CustomerController@putPrimaryAddress'                              ],
        'customer_get_wallet_balance'              => ['get',      'customers/{id}/balance',                         'CustomerController@getCustomerWalletBalance'                       ],
        'customer_get_wallet_statement'            => ['get',      'customers/{id}/statement',                       'CustomerController@getCustomerWalletStatement'                     ],
        'tokens_upi_vpa_bulk_cron'                 => ['post',     'tokens/upi/vpa/bulk',                            'CustomerController@postTokensUpiVpaBulk'                           ],
        'reminder_send'                            => ['post',     'reminders/send/{mode}/{entity}/{namespace}/{id}','RemindersController@sendReminder'                                  ],
        'reminder_service'                         => ['any',      'reminders/service/{path?}',                      'RemindersController@handleAny'                                     ],
        'spinnaker_reminder_service'               => ['post',     'reminders/service/batch/service/control',        'RemindersController@handleDisableVerifySpinnaker'                                     ],
        'los_service'                              => ['any',      'los/service/{path?}',                            'LOSController@handleProxyRequests'                                 ],
        'los_service_admin'                        => ['any',      'los/admin/{path?}',                              'LOSController@handleAdminRequests'                                 ],
        'los_service_dev_admin'                    => ['any',      'los/dev_admin/{path?}',                          'LOSController@handleDevAdminRequests'                              ],
        'los_mail'                                 => ['post',     'los/mail',                                       'LOSController@sendMail'                                            ],
        // Adding internal_merchant_has_payments route to los to fetch the merchant had  payments
        'internal_merchant_payments_count'         => ['post',     'internal/merchant_payment_status_wise_count',    'PaymentController@getPaymentsStatusCountInternal'                  ],
        'los_cron'                                 => ['post',     'los/cron/{path?}',                               'LOSController@handleCronRequests'                                  ],
        'loc_service'                              => ['post',     'loc/service/{path?}',                            'LOCController@handleProxyRequests'                                 ],
        'loc_service_admin'                        => ['post',     'loc/admin/{path?}',                              'LOCController@handleAdminRequests'                                 ],
        'loc_service_dev_admin'                    => ['post',     'loc/dev_admin/{path?}',                          'LOCController@handleDevAdminRequests'                              ],
        'loc_mail'                                 => ['post',     'loc/mail',                                       'LOCController@sendMail'                                            ],
        'loc_razorpayx_webhook'                    => ['post',     'loc/withdrawal/update',                          'LOCController@razorpayXWebhook'                                    ],
        'loc_cron'                                 => ['post',     'loc/cron/{path?}',                               'LOCController@handleCron'                                          ],
        'capital_cards_service'                    => ['any',      'capital_cards/service/{path?}',                  'CapitalCardsController@handleProxyRequests'                        ],
        'capital_cards_onboarding'                 => ['any',      'capital_cards/card_delivery',                    'CapitalCardsController@handlePhysicalCardRequest'                  ],
        'capital_cards_m2p_webhook'                => ['any',      'capital_cards/m2p/{path?}',                      'CapitalCardsController@handleWebhook'                              ],
        'capital_cards_mail'                       => ['post',     'capital_cards/mail',                             'CapitalCardsController@sendMail'                                   ],
        'capital_cards_admin'                      => ['any',      'capital_cards/admin/{path?}',                    'CapitalCardsController@handleAdminRequests'                        ],
        'capital_cards_dev_admin'                  => ['any',      'capital_cards/dev_admin/{path?}',                'CapitalCardsController@handleAdminRequests'                        ],
        'capital_virtual_cards_generate_token'     => ['get',      'capital_cards/token',                            'CapitalVirtualCardsController@generateToken'                       ],
        'capital_virtual_cards_validate_token'     => ['get',      'cards/validate_token/{token}',                   'CapitalVirtualCardsController@validateToken'                       ],
        'capital_virtual_cards_get_card_number'    => ['get',      'cards/number',                                   'CapitalVirtualCardsController@getCardNumber'                       ],
        'capital_virtual_cards_send_otp'           => ['get',      'cards/otp',                                      'CapitalVirtualCardsController@sendOtp'                             ],
        'capital_virtual_cards_get_card_cvv'       => ['get',      'cards/cvv',                                      'CapitalVirtualCardsController@getCardCvv'                          ],
        'capital_virtual_cards_validate_session'   => ['get',      'cards/session',                                  'CapitalVirtualCardsController@validateSessionAtCards'              ],
        'capital_virtual_cards'                    => ['get',      'virtual-card',                                   'CapitalVirtualCardsController@virtualCard'                         ],
        'capital_collections_service'              => ['any',      'capital_collections/service/{path?}',            'CapitalCollectionsController@handleProxyRequests'                  ],
        'capital_collections_admin'                => ['any',      'capital_collections/admin/{path?}',              'CapitalCollectionsController@handleAdminRequests'                  ],
        'capital_collections_dev_admin'            => ['any',      'capital_collections/dev_admin/{path?}',          'CapitalCollectionsController@handleAdminRequests'                  ],
        'capital_collections_webhook'              => ['any',      'capital_collections/orders/{path?}',             'CapitalCollectionsController@handleDirectRequests'                 ],
        'capital_marketplace_oauth'                => ['any',      'marketplace/oauth/{path?}',                      'CapitalMarketplaceController@handleDirectRequests'                 ],
        'capital_marketplace_service'              => ['any',      'marketplace/service/{path?}',                    'CapitalMarketplaceController@handleProxyRequests'                  ],
        'capital_marketplace_admin'                => ['any',      'marketplace/admin/{path?}',                      'CapitalMarketplaceController@handleAdminRequests'                  ],
        'capital_marketplace_dev_admin'            => ['any',      'marketplace/dev_admin/{path?}',                  'CapitalMarketplaceController@handleDevAdminRequests'               ],
        'capital_scorecard_admin'                  => ['any',      'scorecard/admin/{path?}',                        'CapitalScorecardController@handleAdminRequests'                    ],
        'capital_scorecard_dev_admin'              => ['any',      'scorecard/dev_admin/{path?}',                    'CapitalScorecardController@handleDevAdminRequests'                 ],
        'capital_lender_admin'                     => ['any',      'lender/admin/{path?}',                           'CapitalLenderController@handleAdminRequests'                       ],
        'capital_lender_dev_admin'                 => ['any',      'lender/dev_admin/{path?}',                       'CapitalLenderController@handleDevAdminRequests'                    ],
        'capital_es_service'                       => ['any',      'capital_es/service/{path?}',                     'CapitalESController@handleProxyRequests'                           ],
        'capital_es_dev_admin'                     => ['any',      'capital_es/dev_admin/{path?}',                   'CapitalESController@handleDevAdminRequests'                        ],



        'merchants_risk_service'                   => ['any',      'merchants-risk/service/{path?}',                 'MerchantsRiskController@handleProxyRequests'                       ],
        'merchants_risk_admin'                     => ['any',      'merchants-risk/admin/{path?}',                   'MerchantsRiskController@handleAdminRequests'                       ],
        'merchants_risk_create_alert_config'       => ['post',     'merchants-risk/alert_configs/create',            'MerchantsRiskController@createAlertConfig'                         ],
        'merchants_risk_update_alert_config'       => ['post',     'merchants-risk/alert_configs/{rule_id}/update',  'MerchantsRiskController@updateAlertConfig'                         ],
        'merchants_risk_delete_alert_config'       => ['post',     'merchants-risk/alert_configs/{rule_id}/delete',  'MerchantsRiskController@deleteAlertConfig'                         ],

        'wallet_service'                           => ['any',      'wallet/service/{path}',                          'WalletController@handleProxyMerchantRequests'                      ],
        'wallet_service_admin'                     => ['any',      'wallet/admin/{path}',                            'WalletController@handleProxyAdminRequests'                         ],

        'bvs_service_dashboard'                    => ['any',      'bvs/dashboard/{path?}',                          'BvsProxyController@handleDashboardProxyRequests'                       ],
        'bvs_admin_proxy'                          => ['any',      'bvs/admin/{path?}',                              'BvsAdminProxyController@handleAdminProxyRequests'                  ],
        'bvs_admin_proxy_pii'                      => ['any',      'bvs/admin_pii/{path?}',                          'BvsAdminProxyController@handleAdminProxyRequests'                  ],
        'bvs_validation_artifact_details'          => ['get',      'merchants/{merchantId}/bvs/{validationArtefact}/details', 'MerchantController@getBvsValidationArtefactDetails'       ],
        //OCR
        'ocr_admin_proxy'                          => ['get',      'ocr/admin/{path?}',                              'OcrAdminProxyController@handleAdminRequests'                       ],

        //PGOS Proxy Routes
        'merchant_bmc_response_fetch'              => ['get',      'pg/onboarding/get_merchant_bmc_response',        'MerchantOnboardingProxyController@handleDashboardProxyRequests'    ],
        'merchant_bmc_response_fetch_admin'        => ['get',      'pg/onboarding/{id}/get_merchant_bmc_response',   'MerchantOnboardingProxyController@handleDashboardProxyRequests'    ],
        'merchant_bmc_response_save'               => ['post',     'pg/onboarding/save_merchant_bmc_response',       'MerchantOnboardingProxyController@handleDashboardProxyRequests'    ],


        'loc_bulk_withdrawal_update'               => ['post',     'loc/withdrawals/bulk/update',                    'LOCController@postLocBulkWithdrawalUpdate'                         ],
        'leegality_webhook'                        => ['post',     'leegality/webhook',                              'LOSController@handleLeegalityWebhook'                              ],
        'reminder_admin'                           => ['any',      'reminders/admin/{path?}',                        'RemindersController@remindersAdmin'                                ],
        'reminder_next_run'                        => ['get',      'reminders/next_run/{entity}/{id}/{namespace?}',  'RemindersController@remindersNextRun'                              ],
        'invoice_create'                           => ['post',     'invoices',                                       'InvoiceController@createInvoice'                                   ],
        'bulk_invoice_create'                      => ['post',     'invoices/bulk',                                  'InvoiceController@createInvoiceBulk'                               ],
        'invoice_fetch'                            => ['get',      'invoices/{id}',                                  'InvoiceController@getInvoice'                                      ],
        'invoice_fetch_for_checkout_internal'      => ['get',      'internal/invoices/checkout/{id}',                'InvoiceController@getInvoiceDetailsForCheckout'                    ],
        'invoice_get_count'                        => ['get',      'invoices-count',                                 'InvoiceController@getInvoicesCount'                                ],
        'invoice_fetch_multiple'                   => ['get',      'invoices',                                       'InvoiceController@getInvoices'                                     ],
        'invoice_update'                           => ['patch',    'invoices/{id}',                                  'InvoiceController@updateInvoice'                                   ],
        'invoice_update_billing_period'            => ['patch',    'invoices/{id}/update_billing_period',            'InvoiceController@updateBillingPeriod'                             ],
        'invoice_issue'                            => ['post',     'invoices/{id}/issue',                            'InvoiceController@issueInvoice'                                    ],
        'invoice_delete'                           => ['delete',   'invoices/{id}',                                  'InvoiceController@deleteInvoice'                                   ],
        'invoice_add_line_items'                   => ['post',     'invoices/{id}/line_items',                       'InvoiceController@addLineItems'                                    ],
        'invoice_update_line_item'                 => ['patch',    'invoices/{id}/line_items/{lineItemId}',          'InvoiceController@updateLineItem'                                  ],
        'invoice_remove_line_item_bulk'            => ['delete',   'invoices/{id}/line_items/bulk',                  'InvoiceController@removeManyLineItems'                             ],
        'invoice_remove_line_item'                 => ['delete',   'invoices/{id}/line_items/{lineItemId}',          'InvoiceController@removeLineItem'                                  ],
        'invoice_send_notifications'               => ['post',     'invoices/notify',                                'InvoiceController@sendNotifications'                               ],
        'invoice_send_notification'                => ['post',     'invoices/{x_entity_id}/notify/{medium}',         'InvoiceController@sendNotification'                                ],
        'invoice_send_notification_proxy'          => ['post',     'invoices/{x_entity_id}/notify/{medium}/proxy',   'InvoiceController@sendNotification'                                ],
        'invoice_send_notification_private'        => ['post',     'invoices/{id}/notify_by/{medium}',               'InvoiceController@sendNotification'                                ],
        'invoice_notification_update'              => ['put',      'invoices/{medium}',                              'InvoiceController@updateInvoiceNotificationStatus'                 ],
        'invoice_get_status'                       => ['get',      'invoices/{x_entity_id}/status',                  'InvoiceController@getInvoiceStatus'                                ],
        'invoice_view_live'                        => ['get',      'l/{id}',                                         'InvoiceController@getInvoiceView'                                  ],
        'invoice_view_test'                        => ['get',      't/{id}',                                         'InvoiceController@getInvoiceView'                                  ],
        'invoice_view_live_preferences_test'       => ['get',      'l/{id}/test',                                    'InvoiceController@getInvoiceViewForTest'                           ],
        'invoice_view_test_preferences_test'       => ['get',      't/{id}/test',                                    'InvoiceController@getInvoiceViewForTest'                           ],
        'invoice_cancel'                           => ['post',     'invoices/{id}/cancel',                           'InvoiceController@cancelInvoice'                                   ],
        'invoice_expire_bulk'                      => ['post',     'invoices/expire',                                'InvoiceController@expireInvoices'                                  ],
        'invoice_delete_bulk'                      => ['delete',   'invoices/delete',                                'InvoiceController@deleteInvoices'                                  ],
        'invoice_issue_by_batch'                   => ['post',     'invoices/batch/{batchId}/issue',                 'InvoiceController@issueInvoicesOfBatch'                            ],
        'invoice_notify_by_batch'                  => ['put',      'invoices/batch/{batchId}/notify',                'InvoiceController@notifyInvoicesOfBatch'                           ],
        'invoice_cancel_by_batch'                  => ['post',     'invoices/batch/{batchId}/cancel',                'InvoiceController@cancelInvoicesOfBatch'                           ],
        'invoice_cancel_by_batch_admin'            => ['post',     'invoices/batch/{batchId}/cancel/admin',          'InvoiceController@cancelInvoicesOfBatch'                           ],
        'invoice_get_stats_by_batch_ids'           => ['get',      'invoices/batches/issuable',                      'InvoiceController@getIssuableByBatchIds'                           ],
        'invoice_view_live_post'                   => ['post',     'l/{id}',                                         'InvoiceController@getInvoiceView'                                  ],
        'invoice_view_test_post'                   => ['post',     't/{id}',                                         'InvoiceController@getInvoiceView'                                  ],
        'invoice_get_pdf'                          => ['get',      'invoices/{x_entity_id}/pdf',                     'InvoiceController@getInvoicePdf'                                   ],
        'dcc_invoice_generation_cron'              => ['post',     'invoices/dcc-payment/cron',                      'InvoiceController@dccPaymentInvoiceCron'                           ],
        'item_create'                              => ['post',     'items',                                          'ItemController@createItem'                                         ],
        'item_fetch'                               => ['get',      'items/{id}',                                     'ItemController@getItem'                                            ],
        'item_fetch_multiple'                      => ['get',      'items',                                          'ItemController@getItems'                                           ],
        'item_update'                              => ['patch',    'items/{id}',                                     'ItemController@updateItem'                                         ],
        'item_delete'                              => ['delete',   'items/{id}',                                     'ItemController@deleteItem'                                         ],
        'send_email_for_pl_service'                => ['post',     'invoices/send_email',                            'InvoiceController@sendEmailForPaymentLinkService'                  ],
        //payment page section
        'pages_robots_txt'                         => ['get',       'v1/pages/robots.txt',                           'RobotsController@nocodeRobots'                                    ],
        'pages_view_by_slug_empty'                 => ['get,post', 'pages',                                          'PaymentLinkController@viewByEmptySlug'                            ],
        'pages_view'                               => ['get,post', 'pages/{x_entity_id}/view',                       'PaymentLinkController@view'                                        ],
        'pages_view_by_slug'                       => ['get,post', 'pages/{slug}',                                   'PaymentLinkController@viewBySlug'                                  ],
        'payment_page_view_get'                    => ['get,post', 'payment_pages/{x_entity_id}/view',               'PaymentLinkController@view'                                        ],
        'payment_page_images'                      => ['post',     'payment_pages/images',                           'PaymentLinkController@upload'                                      ],
        'payment_page_get'                         => ['get',      'payment_pages/{id}',                             'PaymentLinkController@get'                                         ],
        'payment_page_get_details'                 => ['get',      'payment_pages/{id}/details',                     'PaymentLinkController@getWithDetailsForDashboard'                  ],
        'payment_page_get_payments'                => ['get',      'payment_pages/{id}/payments',                    'PaymentLinkController@getPayments'                                 ],

        'payment_page_list'                        => ['get',      'payment_pages',                                  'PaymentLinkController@list'                                        ],
        'payment_page_create'                      => ['post',     'payment_pages',                                  'PaymentLinkController@create'                                      ],
        'payment_page_update'                      => ['patch',    'payment_pages/{id}',                             'PaymentLinkController@update'                                      ],
        'payment_page_notify'                      => ['post',     'payment_pages/{id}/notify',                      'PaymentLinkController@sendNotification'                            ],
        'payment_page_notify_all'                  => ['post',     'payment_pages/{id}/fetch_notify_details',        'PaymentLinkController@sendNotificationToAllRecords'                ],
        'payment_page_expire_cron'                 => ['post',     'payment_pages/expire',                           'PaymentLinkController@expirePaymentLinks'                          ],
        'payment_page_deactivate'                  => ['patch',    'payment_pages/{id}/deactivate',                  'PaymentLinkController@deactivate'                                  ],
        'payment_page_activate'                    => ['patch',    'payment_pages/{id}/activate',                    'PaymentLinkController@activate'                                    ],
        'payment_page_slug_exists'                 => ['get',      'payment_pages/{slug}/exists',                    'PaymentLinkController@slugExists'                                  ],
        'payment_page_item_update'                 => ['patch',    'payment_pages/payment_page_item/{id}',           'PaymentLinkController@updatePaymentPageItem'                       ],
        'payment_page_fetch_records'               => ['post',     'payment_pages/{pl_id}/fetch_records',            'PaymentLinkController@fetchRecordsForPL'                           ],
        'payment_page_create_order'                => ['post',     'payment_pages/{id}/order',                       'PaymentLinkController@createOrder'                                 ],
        'payment_page_create_order_option'         => ['options',  'payment_pages/{id}/order',                       'PaymentLinkController@createOrderOptions'                          ],
        'payment_page_set_merchant_details'        => ['post',     'payment_pages/merchant_details',                 'PaymentLinkController@setMerchantDetails'                          ],
        'payment_page_fetch_merchant_details'      => ['get',      'payment_pages/merchant_details/{merchant_id}',   'PaymentLinkController@fetchMerchantDetails'                        ],
        'payment_page_set_receipt_details'         => ['post',     'payment_pages/{id}/receipt',                     'PaymentLinkController@setReceiptDetails'                           ],
        'payment_page_get_invoice_details'         => ['get',      'payment_pages/{payment_id}/receipt',             'PaymentLinkController@getInvoiceDetails'                           ],
        'payment_page_send_receipt'                => ['post',     'payment_pages/{payment_id}/send_receipt',        'PaymentLinkController@sendReceipt'                                 ],
        'payment_page_save_receipt_for_payment'    => ['post',     'payment_pages/{payment_id}/save_receipt',        'PaymentLinkController@saveReceiptForPayment'                       ],
        'payment_page_hosted_button_details'       => ['get',      'payment_buttons/{x_entity_id}/button_details',   'PaymentLinkController@getHostedButtonDetails'                      ],
        'payment_page_create_file_upload_record'   => ['post',     'payment_pages/{id}/create_record/{batch_id}',    'PaymentLinkController@createPaymentPageFileUploadRecord'           ],
        'payment_page_get_pending_payments'        => ['get',      'payment_pages/{pl_id}/pending_payments',         'PaymentLinkController@getPendingPaymentsAndRevenue'                ],
        'payment_page_get_batches'                 => ['get',      'payment_pages/{id}/batches',                     'PaymentLinkController@getPaymentPageBatches'                       ],

        'payment_page_hosted_button_preferences'   => ['get',      'payment_buttons/{x_entity_id}/button_preferences', 'PaymentLinkController@getHostedButtonPreferences'                ],
        'payment_button_hosted_view'               => ['get,post', 'payment_buttons/{x_entity_id}/view',               'PaymentLinkController@buttonHostedView'                          ],
        'subscription_button_hosted_view'          => ['get,post', 'subscription_buttons/{x_entity_id}/view',          'PaymentLinkController@subscriptionButtonHostedView'              ],

        'hosted_subscription_button_details'       => ['get',      'subscription_buttons/{x_entity_id}/button_details',       'PaymentLinkController@getHostedButtonDetails'             ],
        'subscription_button_create_subscription'  => ['post',     'subscription_buttons/{x_entity_id}/create_subscription',  'PaymentLinkController@createSubscription'                 ],

        'payment_handle_precreate'                 => ['post',     'precreate_payment_handle',                                'PaymentLinkController@precreatePaymentHandle'             ],
        "payment_handle_create"                    => ['post',     'payment_handle',                                          'PaymentLinkController@createPaymentHandle'                ],
        'payment_handle_update_old'                => ['patch',    'payment_handle/{id}',                                     'PaymentLinkController@updatePaymentHandle'                ],
        'payment_handle_update'                    => ['patch',    'payment_handle',                                          'PaymentLinkController@updatePaymentHandle'                ],
        'payment_handle_availability'              => ['get',      'payment_handle/{slug}/exists',                            'PaymentLinkController@handleExists'                       ],
        'payment_handle_get'                       => ['get',      'payment_handle',                                          'PaymentLinkController@getPaymentHandle'                   ],
        'payment_handle_suggestion'                => ['get',      'payment_handle/suggestion',                               'PaymentLinkController@suggestionPaymentHandle'            ],
        'payment_handle_amount_encryption'         => ['post',     'payment_handle/custom_amount',                            'PaymentLinkController@encryptAmountForPaymentHandle'      ],

        // Payment page Custom domain service integration
        'payment_page_cds_domain_create'            => ['post',     'payment_pages/cds/domains',                     'PaymentLinkController@cdsDomainCreate' ],
        'payment_page_cds_domain_list'              => ['get',      'payment_pages/cds/domains',                     'PaymentLinkController@cdsDomainList'   ],
        'payment_page_cds_domain_delete'            => ['delete',   'payment_pages/cds/domains',                     'PaymentLinkController@cdsDomainDelete' ],
        'payment_page_cds_check_propagation'        => ['get',      'payment_pages/cds/propagation',                 'PaymentLinkController@cdsPropagation'  ],
        'payment_page_cds_domain_exists'            => ['get',      'payment_pages/cds/domains/exists',              'PaymentLinkController@cdsDomainExists' ],
        'payment_page_cds_subdomain'                => ['get',      'payment_pages/cds/subdomain',                   'PaymentLinkController@cdsIsSubDomain'  ],
        'payment_page_cds_create_plans'             => ['post',     'payment_pages/cds/plans',                       'PaymentLinkController@cdsCreatePlans'  ],
        'payment_page_cds_fetch_plans'              => ['get',      'payment_pages/cds/plans',                       'PaymentLinkController@cdsFetchPlans'   ],
        'payment_page_cds_delete_plans'             => ['delete',   'payment_pages/cds/plans',                       'PaymentLinkController@cdsDeletePlans'  ],
        'payment_page_cds_fetch_plan'               => ['get',      'payment_pages/cds/plans/plan',                  'PaymentLinkController@cdsFetchPlanForMerchant'   ],
        'payment_page_cds_update_plans'             => ['patch',    'payment_pages/cds/plans/plan',                  'PaymentLinkController@cdsUpdatePlanForMerchants' ],
        'payment_page_cds_billing_update_cron'      => ['patch',    'payment_pages/cds/plans/billing_date',          'PaymentLinkController@cdsPlansBillingDateUpdate' ],


        // Debugging route: needs permission to access this route
        'nocode_debugging_route'                    => ['post',     'nocode/debug',                                            'PaymentLinkController@nocodeDebugHandler'                ],
        // end of payment page section

        //Store Dashboard section
        'store_create'                             => ['post',     'store',                                         'StoreController@create'                                             ],
        'store_get_by_merchant'                    => ['get',      'store',                                         'StoreController@getByMerchant'                                      ],
        'store_update'                             => ['put',      'store',                                         'StoreController@update'                                             ],
        'store_delete'                             => ['delete',   'store',                                         'StoreController@delete'                                             ],
        'store_validate_slug'                      => ['post',     'store/validate_slug',                           'StoreController@validateSlug'                                       ],

        'store_add_product'                        => ['post',     'store/products',                                'StoreController@addProduct'                                         ],
        'store_fetch_products'                     => ['get',      'store/products',                                'StoreController@fetchProducts'                                      ],
        'store_get_product'                        => ['get',      'store/products/{id}',                           'StoreController@getProduct'                                         ],
        'store_update_product'                     => ['put',      'store/products/{id}',                           'StoreController@updateProduct'                                      ],
        'store_patch_product'                      => ['patch',    'store/products/{id}',                           'StoreController@patchProduct'                                       ],
        'store_upload_image'                       => ['post',     'store/upload_image',                            'StoreController@uploadImage'                                        ],

        //Store Hosted section
        'store_hosted_page_by_slug'                => ['get',      'store/hosted/{slug}',                           'StoreController@getHostedPage'                                      ],
        'store_hosted_page_data'                   => ['get',      'store/public/{slug}',                           'StoreController@getHostedPageData'                                  ],
        'store_hosted_page_data_options'           => ['options',  'store/public/{slug}',                           'StoreController@getHostedPageDataOptions'                           ],

        'store_create_order'                       => ['post',     'store/{id}/order',                              'StoreController@createOrder'                                        ],
        'store_create_order_options'               => ['options',  'store/{id}/order',                              'StoreController@createOrderOptions'                                 ],
        'store_hosted_page_by_slug_detail_page'    => ['any',      'store/hosted/{slug}/{path?}',                   'StoreController@getHostedPage'                                      ],
        'store_hosted_product_detail_page'         => ['get',      'store/hosted/{slug}/product/{id}',              'StoreController@getHostedPageForProductDetail'                      ],

        //End of store section

        // start of payment button section

        'payment_button_create'                       => ['post',     'payment_buttons',                                         'PaymentLinkController@create'                                   ],
        'payment_button_get_details'                  => ['get',      'payment_buttons/{id}/details',                            'PaymentLinkController@getWithDetailsForDashboard'               ],
        'payment_button_update'                       => ['patch',    'payment_buttons/{id}',                                    'PaymentLinkController@update'                                   ],
        'payment_button_item_update'                  => ['patch',    'payment_buttons/payment_button_items/{id}',               'PaymentLinkController@updatePaymentPageItem'                    ],
        'payment_button_deactivate'                   => ['patch',    'payment_buttons/{id}/deactivate',                         'PaymentLinkController@deactivate'                               ],
        'payment_button_activate'                     => ['patch',    'payment_buttons/{id}/activate',                           'PaymentLinkController@activate'                                 ],
        'payment_button_create_order'                 => ['post',     'payment_buttons/{id}/order',                              'PaymentLinkController@createOrder'                              ],
        'payment_button_create_order_option'          => ['options',  'payment_buttons/{id}/order',                              'PaymentLinkController@createOrderOptions'                       ],
//        'payment_button_hosted_view'                => ['get,post', 'payment_buttons/{x_entity_id}/view',                      'PaymentLinkController@buttonHostedView'                         ],
        'payment_button_hosted_preferences'           => ['get',      'payment_buttons/{x_entity_id}/preferences',               'PaymentLinkController@getHostedButtonPreferences'               ],
        'payment_button_hosted_button_details'      => ['get',      'payment_buttons/{x_entity_id}/hosted_details',            'PaymentLinkController@getHostedButtonDetails'                   ],
        'payment_button_set_merchant_details'         => ['post',     'payment_buttons/merchant_details',                        'PaymentLinkController@setMerchantDetails'                       ],
        'payment_button_fetch_merchant_details'       => ['get',      'payment_buttons/merchant_details/{merchant_id}',          'PaymentLinkController@fetchMerchantDetails'                     ],
        'payment_button_send_receipt'                 => ['post',     'payment_buttons/{payment_id}/send_receipt',               'PaymentLinkController@sendReceipt'                              ],
        'payment_button_set_receipt_details'          => ['post',     'payment_buttons/{id}/receipt',                            'PaymentLinkController@setReceiptDetails'                        ],
        'payment_button_get_receipt_details'          => ['get',      'payment_buttons/{payment_id}/receipt',                    'PaymentLinkController@getReceiptDetails'                        ],
        'payment_button_save_receipt_for_payment'     => ['post',     'payment_buttons/{payment_id}/save_receipt',               'PaymentLinkController@saveReceiptForPayment'                    ],

        'subscription_button_hosted_button_details'   => ['get',      'subscription_buttons/{x_entity_id}/hosted_details',       'PaymentLinkController@getHostedButtonDetails'                   ],
//        'subscription_button_hosted_view'           => ['get,post', 'subscription_buttons/{x_entity_id}/view',                 'PaymentLinkController@subscriptionButtonHostedView'             ],
        'payment_button_get'                          => ['get',      'payment_buttons/{id}',                                    'PaymentLinkController@get'                                      ],
        'payment_button_list'                         => ['get',      'payment_buttons',                                         'PaymentLinkController@list'                                     ],

        'subscription_button_create_subscription_v2'  => ['post',     'subscription_buttons/{x_entity_id}/subscription',         'PaymentLinkController@createSubscription'                       ],


        //end of payment button section

        // NoCode Service Routes
        'nca_store_create'                 => ['post',            'stores', 'NoCodeAppsController@sendRequest'],
        'nca_store_list'                   => ['get',             'stores', 'NoCodeAppsController@sendRequest'],
        'nca_store_details'                => ['get',             'stores/{id}', 'NoCodeAppsController@sendRequest'],
        'nca_store_update'                 => ['patch',           'stores/{id}', 'NoCodeAppsController@sendRequest'],
        'nca_store_delete'                 => ['delete',          'stores/{id}', 'NoCodeAppsController@sendRequest'],
        'nca_store_payments'               => ['get',             'stores/{id}/payments', 'NoCodeAppsController@sendRequest'],
        'nca_store_activate'               => ['patch',           'stores/{id}/deactivate', 'NoCodeAppsController@sendRequest'],
        'nca_store_deactivate'             => ['patch',           'stores/{id}/activate', 'NoCodeAppsController@sendRequest'],
        'nca_store_order_line_item'        => ['get',             'stores/orders/{id}/line_items', 'NoCodeAppsController@sendRequest'],

        'store_category_create'            => ['post',            'stores/categories',                                       'NoCodeAppsController@sendRequest'                                  ],
        'store_category_list'              => ['get',             'stores/categories',                                       'NoCodeAppsController@sendRequest'                                  ],
        'store_category_details'           => ['get',             'stores/categories/{id}',                                  'NoCodeAppsController@sendRequest'                                  ],
        'store_category_update'            => ['put',             'stores/categories/{id}',                                  'NoCodeAppsController@sendRequest'                                  ],
        'store_category_delete'            => ['delete',          'stores/categories/{id}',                                  'NoCodeAppsController@sendRequest'                                  ],

        'store_catalog_create'             => ['post',            'stores/catalogs',                                         'NoCodeAppsController@sendRequest'                                  ],
        'store_catalog_list'               => ['get',             'stores/catalogs',                                         'NoCodeAppsController@sendRequest'                                  ],
        'store_catalog_details'            => ['get',             'stores/catalogs/{id}',                                    'NoCodeAppsController@sendRequest'                                  ],
        'store_catalog_update'             => ['patch',           'stores/catalogs/{id}',                                    'NoCodeAppsController@sendRequest'                                  ],
        'store_catalog_delete'             => ['delete',          'stores/catalogs/{id}',                                    'NoCodeAppsController@sendRequest'                                  ],

        // payment link service end points
        'payment_links_service_hosted_page'        => ['get,post',        'hosted/payment_links/{path?}',                   'PlinkController@sendRequest'                                       ],
        'payment_links_get'                        => ['get',             'payment_links/{id}',                             'PlinkController@sendRequest'                                       ],
        'payment_links_create'                     => ['post',            'payment_links',                                  'PlinkController@sendRequest'                                       ],
        'payment_links_subscription_activate'      => ['post',            'payment_links/subscriptions',                    'PlinkController@sendRequest'                                       ],
        'payment_links_subscription_deactivate'    => ['post',            'payment_links/subscriptions/deactivate',         'PlinkController@sendRequest'                                       ],
        'payment_links_subscription_fetch'         => ['get',             'payment_links/subscriptions',                    'PlinkController@sendRequest'                                       ],
        'payment_links_plans_fetch'                => ['get',             'payment_links/plans',                            'PlinkController@sendRequest'                                       ],
        'payment_links_insights'                   => ['get',             'payment_links/insights',                         'PlinkController@sendRequest'                                       ],
        'payment_links_update'                     => ['patch',           'payment_links/{id}',                             'PlinkController@sendRequest'                                       ],
        'payment_links_cancel'                     => ['post',            'payment_links/{id}/cancel',                      'PlinkController@sendRequest'                                       ],
        'payment_links_expire'                     => ['post',            'payment_links/{id}/expire',                      'PlinkController@sendRequest'                                       ],
        'payment_links_fetch_multiple'             => ['get',             'payment_links',                                  'PlinkController@sendRequest'                                       ],
        'payment_links_notify_by_medium'           => ['post',            'payment_links/{id}/notify_by/{medium}',          'PlinkController@sendRequest'                                       ],
        'payment_links_get_reminder_next_run'      => ['get',             'payment_links/{id}/reminders/next_run',          'PlinkController@sendRequest'                                       ],
        'payment_links_get_batch_status'           => ['get',             'payment_links/{id}/batch',                       'PlinkController@sendRequest'                                       ],
        'payment_links_service_count_route'        => ['get',             'payment_links_count',                            'PlinkController@sendRequest'                                       ],
        'payment_links_demo'                       => ['post',            'payment_links_demo',                             'PlinkController@plDemo'                                            ],
        'payment_links_demo_cors'                  => ['options',         'payment_links_demo',                             'PlinkController@plDemoCors'                                        ],
        'payment_links_bulk_expire'                => ['post',            'payment_links_bulk_expire',                      'PlinkController@sendRequest'                                       ],
        'payment_links_sign_payload'               => ['post',            'payment_links_sign_payload',                     'PlinkController@signPayload'                                       ],
        'payment_links_sign_payload_internal'      => ['post',            'payment_links_sign_payload_internal',            'PlinkController@signPayloadInternal'                               ],
        'payment_links_payment_by_id'              => ['get',             'payment_links_payment/{id}',                     'PlinkController@fetchPaymentDetails'                               ],
        //temporary route to enable merchants to switch to v2 endpoints from dashboard
        'payment_links_switch_versions'            => ['post',            'payment_links_switch_versions',                  'InvoiceController@switchPlVersions'                                ],
        'payment_links_v2_admin'                   => ['post',            'payment_links_admin',                            'PlinkController@sendRequest'                                       ],
        'payment_links_ops_batch_cancel'           => ['post',            'payment_links_ops/batch_cancel',                 'PlinkController@sendRequest'                                       ],
        'payment_links_es_cleanup'                 => ['post',            'payment_links_es_cleanup',                       'PlinkController@sendRequest'                                       ],
        // end of payment link service end points
        // Setu Integration
        'bbps_bill_payments'                       => ['get',      'bbps_bill_payments',                             'BbpsController@showBbpsDashboard'                                  ],

        'app_fetch_tokens_v2'                      => ['get',      'apps/tokens',                                    'CustomerController@fetchTokensForGlobalCustomerV2'                 ],
        'app_delete_tokens_v2'                     => ['delete',   'apps/tokens',                                    'CustomerController@deleteTokenForGlobalCustomerV2'                 ],

        'app_delete_token'                         => ['delete',   'apps/tokens/{token}',                            'CustomerController@deleteTokenForGlobalCustomer'                   ],
        'app_fetch_payments'                       => ['get',      'apps/payments',                                  'CustomerController@fetchPaymentsForGlobalCustomer'                 ],
        'support_page_otp_verify'                  => ['post',     'support/otp/verify',                             'CustomerController@verifyOtpSupportPage'                           ],
        'bank_account_fetch'                       => ['get',      'account/bank_account',                           'MerchantController@getOwnBankAccount'                              ],
        'affordability_widget_details'             => ['get',      'affordability/widget/details',                   'AffordabilityController@getWidgetDetails'                    ],
        'device_verify_token'                      => ['post',     'devices/{deviceToken}/verify',                   'CustomerController@validateDeviceToken'                            ],
        'otp_post'                                 => ['post',     'otp/create',                                     'CustomerController@postOtp'                                        ],
        'otp_verify'                               => ['post',     'otp/verify',                                     'CustomerController@verifyOtp'                                      ],
        '1cc_otp_verify'                           => ['post',     '1cc/otp/verify',                                 'CustomerController@verifyOtp1cc'                                      ],
        'otp_verify_app'                           => ['post',     'otp/verify/app',                                 'CustomerController@verifyOtpApp'                                   ],
        'sms_callback'                             => ['post',     'sms/{gateway}/callback',                         'CustomerController@updateSmsStatus'                                ],
        'es_debug_get'                             => ['post',     'es/debug/{method}',                              'EsController@debug'                                                ],
        'es_aliases_post'                          => ['post',     'es/aliases',                                     'EsController@postAliases'                                          ],
        'es_index_create'                          => ['post',     'es/index_create',                                'EsController@postIndexCreate'                                      ],
        'es_index'                                 => ['post',     'es/index',                                       'EsController@postIndex'                                            ],
        'es_proxy'                                 => ['any',      'es/proxy/{path?}',                               'EsController@proxy'                                                ],
        'es_transactions_sync'                     => ['post',     'es/transactions/sync/',                          'EsController@syncTransactionsToES'                                 ],
        'es_payouts_sync'                          => ['post',     'es/payouts/sync/',                               'EsController@syncPayoutsToES'                                      ],
        'es_sync_entities'                         => ['post',     'es/entities/sync/',                              'EsController@syncEntitiesToES'                                     ],
        'gateway_fetch_downtimes'                  => ['get',      'gateway/downtimes',                              'GatewayController@getGatewayDowntimes'                             ],
        'gateway_downtimes_archive'                => ['post',     'gateway/downtimes/archive',                      'GatewayController@archiveGatewayDowntimes'                         ],
        'gateway_create_downtime'                  => ['post',     'gateway/downtimes',                              'GatewayController@postGatewayDowntime'                             ],
        'gateway_update_downtime'                  => ['put',      'gateway/downtimes/{id}',                         'GatewayController@putGatewayDowntime'                              ],
        'gateway_delete_downtime'                  => ['delete',   'gateway/downtimes/{id}',                         'GatewayController@deleteGatewayDowntime'                           ],
        'gateway_downtime_vajra_webhook'           => ['post',     'gateway/downtimes/webhook/vajra',                'GatewayController@postGatewayDowntimeVajraWebhook'                 ],
        'cps_downtime_vajra_webhook'               => ['post',     'gateway/cps/webhook/vajra',                      'GatewayController@postCpsDowntimeVajraWebhook'                     ],
        'gateway_downtime_source_webhook'          => ['post',     'gateway/downtimes/{source}/webhook',             'GatewayController@postGatewayDowntimeWebhook'                      ],
        'gateway_downtime_service_webhook'         => ['post',     'gateway/downtimes/webhook/downtime_service',     'GatewayController@postGatewayDowntimeServiceWebhook'               ],
        'add_downtime_slack_merchant_names'        => ['post',     'gateway/downtimes/notifications/merchantNames',  'GatewayController@postDowntimeSlackNotificationMerchants'          ],
        'gateway_downtime_detection_purge_keys'    => ['post',     'gateway/downtimes/detection/keys/purge',         'GatewayController@purgeGatewayDowntimeDetectionKeys'               ],
        'downtime_manager_admin'                   => ['any',      'downtime_manager/admin/{path?}',                 'DowntimeManagerController@downtimeManagerAdmin'                    ],
        'downtime_auto_resolve_cron'               => ['post',     'downtime_manager/Optimizer/autoresolve',         'DowntimeManagerController@runTerminalDowntimeAutoresolve'          ],
        'manual_downtime_fetch'                    => ['get',      'downtime_manager/Optimizer/manualdowntimes',     'DowntimeManagerController@fetchManualTerminalDowntimes'            ],
        'downtime_manual_resolve'                  => ['post',     'downtime_manager/Optimizer/manualresolve',       'DowntimeManagerController@terminalDowntimeManualResolve'           ],
        'fetch_merchant_sr'                        => ['post',     'success-rate/merchant/{path?}',                  'DowntimeManagerController@FetchSRForMerchant'                      ],
        'downtime_detection_cron'                  => ['post',     'gateway/downtimes/detection/cron',               'GatewayController@gatewayDowntimeCron'                             ],
        'phonepe_downtime_detection_cron'          => ['post',     'gateway/downtimes/phonepe/cron',                 'GatewayController@phonepeDowntimeCron'                             ],
        'gateway_create_rule'                      => ['post',     'gateway/rules',                                  'GatewayController@createGatewayRule'                               ],
        'gateway_update_rule'                      => ['patch',    'gateway/rules/{id}',                             'GatewayController@updateGatewayRule'                               ],
        'gateway_delete_rule'                      => ['delete',   'gateway/rules/{id}',                             'GatewayController@deleteGatewayRule'                               ],
        'gateway_file_create'                      => ['post',     'gateway/files',                                  'GatewayFileController@createGatewayFile'                           ],
        'fpx_downtime_detection_cron'              => ['post',     'gateway/downtimes/fpx/cron',                     'GatewayController@createFpxDowntimes'                           ],
        'gateway_file_retry'                       => ['post',     'gateway/files/{id}/retry',                       'GatewayFileController@retryGatewayFile'                            ],
        'gateway_file_acknowledge'                 => ['post',     'gateway/files/{id}/acknowledge',                 'GatewayFileController@acknowledgeGatewayFile'                      ],
        //Below route is for uploading bank refund file through admin dashboard
        'gateway_file_bank_refunds_upload'         => ['post',     'gateway/files/bank/refunds/upload',              'GatewayFileController@uploadBankRefundFile'                        ],
        'scorecard'                                => ['get',      'scorecard',                                      'AdminController@getScorecard'                                      ],
        'banking_scorecard'                        => ['post',     'banking_scorecard',                              'AdminController@generateBankingScorecard'                          ],
        'billdesk_reconcile_cancelled'             => ['post',     'reconciliate/{gateway}/cancelled',               'ReconciliatorController@postReconciliateCancelledTransactions'     ],
        'plan_create'                              => ['post',     'plans',                                          'SubscriptionController@postCreatePlan'                             ],
        'plan_fetch'                               => ['get',      'plans/{id}',                                     'SubscriptionController@getPlan'                                    ],
        'plan_fetch_multiple'                      => ['get',      'plans',                                          'SubscriptionController@getPlans'                                   ],
        'subscriptions_overview'                   => ['get',      'subscriptions/overview',                         'SubscriptionController@getOverview'                                ],
        'subscription_create'                      => ['post',     'subscriptions',                                  'SubscriptionController@postCreateSubscription'                     ],
        'subscription_fetch'                       => ['get',      'subscriptions/{id}',                             'SubscriptionController@getSubscription'                            ],
        'subscription_fetch_multiple'              => ['get',      'subscriptions',                                  'SubscriptionController@getSubscriptions'                           ],
        'subscriptions_charge_invoices'            => ['post',     'subscriptions/charge/invoices',                  'SubscriptionController@postCreateAndChargeSubscriptionInvoices'    ],
        'subscription_test_charge'                 => ['post',     'subscriptions/{id}/charge',                      'SubscriptionController@postTestChargeSubscription'                 ],
        'subscriptions_retry'                      => ['post',     'subscriptions/retry',                            'SubscriptionController@postRetrySubscriptions'                     ],
        'subscriptions_expire'                     => ['post',     'subscriptions/expire',                           'SubscriptionController@postExpireSubscriptions'                    ],
        'subscription_manual_retry_old'            => ['post',     'invoices/{invoice_id}/charge',                   'SubscriptionController@postChargeSubscriptionInvoiceManuallyOld'   ],
        'subscription_manual_retry'                => ['post',     'subscriptions/{s_id}/invoices/{i_id}/charge',    'SubscriptionController@postChargeSubscriptionInvoiceManually'      ],
        'subscription_cancel'                      => ['post',     'subscriptions/{subscription_id}/cancel',         'SubscriptionController@postCancelSubscription'                     ],
        'subscription_cancel_token'                => ['put',      'subscriptions/{id}/tokens/{token}/cancel',       'CustomerController@cancelToken'                                    ],
        'subscription_cancel_due'                  => ['post',     'subscriptions/cancel/due',                       'SubscriptionController@postCancelDueSubscriptions'                 ],
        'subscription_create_addon'                => ['post',     'subscriptions/{subscriptionId}/addons',          'SubscriptionController@postAddonForSubscription'                   ],
        'subscription_fetch_due_addons'            => ['get',      'subscriptions/{subscriptionId}/addons/due',      'SubscriptionController@getDueAddonsForSubscription'                ],
        'subscription_update_data'                 => ['post',     'subscriptions/{subscriptionId}/update_data',     'SubscriptionController@postUpdateData'                             ],
        'subscription_payment_process'             => ['post',     'subscriptions/{subscriptionId}/payment_process', 'SubscriptionController@postPaymentProcess'                         ],
        'subscription_charge_cycle'                => ['post',     'subscriptions/{subscriptionId}/charge_cycle',    'SubscriptionController@postSubscriptionChargeCycle'                ],
        'subscription_skip_cycle'                  => ['post',     'subscriptions/{subscriptionId}/skip_cycle',      'SubscriptionController@postSubscriptionSkipCycle'                  ],
        'subscription_view_live'                   => ['get',      'l/subscriptions/{id}',                           'SubscriptionController@getSubscriptionView'                        ],
        'subscription_view_test'                   => ['get',      't/subscriptions/{id}',                           'SubscriptionController@getSubscriptionView'                        ],
        'subscription_view_live_post'              => ['post',     'l/subscriptions/{id}',                           'SubscriptionController@getSubscriptionView'                        ],
        'subscription_view_test_post'              => ['post',     't/subscriptions/{id}',                           'SubscriptionController@getSubscriptionView'                        ],
        'subscription_item_create'                 => ['post',     'subscriptions/items',                            'SubscriptionController@postCreateItem'                             ],
        'subscription_item_fetch'                  => ['get',      'subscriptions/items/{id}',                       'SubscriptionController@getItem'                                    ],
        'subscription_item_fetch_multiple'         => ['get',      'subscriptions/items',                            'SubscriptionController@getItems'                                   ],
        'subscription_item_update'                 => ['patch',    'subscriptions/items/{id}',                       'SubscriptionController@postUpdateItem'                             ],
        'subscription_item_delete'                 => ['delete',   'subscriptions/items/{id}',                       'SubscriptionController@postDeleteItem'                             ],
        'subscription_settings'                    => ['post',     'subscriptions/settings',                         'SubscriptionController@postSubscriptionSettings'                   ],
        'subscription_settings_get'                => ['get',      'subscriptions/settings',                         'SubscriptionController@getSubscriptionSettings'                    ],
        'subscription_clear_feature'               => ['delete',   'invalidate/feature',                             'SubscriptionController@invalidateFeature'                          ],
        'subscription_pause'                       => ['post',     'subscriptions/{id}/pause',                       'SubscriptionController@pauseSubscription'                          ],
        'subscription_resume'                      => ['post',     'subscriptions/{id}/resume',                      'SubscriptionController@resumeSubscription'                         ],
        'subscription_get_revenue_by_source'       => ['get',      'subscriptions/revenue_by_source/{sourceId}',     'SubscriptionController@getRevenueBySource'                         ],
        'subscription_delete_offer'                => ['delete',   'subscriptions/{subscriptionId}/{offerId}',       'SubscriptionController@deleteOffer'                                ],
        'addon_fetch'                              => ['get',      'addons/{addonId}',                               'SubscriptionController@getAddon'                                   ],
        'token_fetch_card'                         => ['get',      'tokens/{id}/card',                               'CustomerController@fetchTokenCard'                                 ],
        'token_fetch_vpa'                          => ['get',      'tokens/{id}/vpa',                                'CustomerController@fetchTokenVpa'                                  ],
        'subscription_fetch_emandate_detail'       => ['get',      'tokens/{id}/emandate_detail',                    'CustomerController@fetchSubscriptionEmandateDetails'               ],
        'subscription_fetch_card_mandate_detail'   => ['get',      'tokens/{id}/card_mandate_detail',                'CustomerController@fetchSubscriptionCardMandateDetails'            ],
        'addon_fetch_multiple'                     => ['get',      'addons',                                         'SubscriptionController@getAddons'                                  ],
        'addon_delete'                             => ['delete',   'addons/{addonId}',                               'SubscriptionController@deleteAddon'                                ],
        'subscription_update'                      => ['patch',    'subscriptions/{id}',                             'SubscriptionController@updateSubscription'                         ],
        'subscription_fetch_changes'               => ['get',      'subscriptions/{id}/retrieve_scheduled_changes',  'SubscriptionController@getFetchScheduledChanges'                   ],
        'subscription_cancel_changes'              => ['post',     'subscriptions/{id}/cancel_scheduled_changes',    'SubscriptionController@getCancelScheduledChanges'                  ],
        'subscription_fetch_hosted_test'           => ['get',      't/subscriptions/{id}/hosted',                    'SubscriptionController@getSubscriptionForHosted'                   ],
        'subscription_fetch_hosted_live'           => ['get',      'l/subscriptions/{id}/hosted',                    'SubscriptionController@getSubscriptionForHosted'                   ],
        'upi_fill_bank'                            => ['patch',    'gateway/upi_fill_bank',                          'GatewayController@fillUpiBank'                                     ],
        'mailgun_webhook'                          => ['post',     'mailgun/callback/{type}',                        'AdminController@postMailgunCallback'                               ],
        'setcronjob_webhook'                       => ['post',     'setcronjob/callback',                            'AdminController@postSetCronJobCallback'                            ],
        'offer_create'                             => ['post',     'offers',                                         'OfferController@createOffer'                                       ],
        'offer_create_bulk'                        => ['post',     'offers/bulk',                                    'OfferController@createOfferBulk'                                   ],
        'offer_update'                             => ['patch',    'offers/{id}',                                    'OfferController@updateOffer'                                       ],
        'offer_fetch_multiple'                     => ['get',      'offers',                                         'OfferController@fetchOffers'                                       ],
        'offer_fetch_by_id'                        => ['get',      'offers/{id}',                                    'OfferController@fetchOfferById'                                    ],
        'offer_deactivate'                         => ['patch',    'offers/deactivate',                              'OfferController@deactivateOffers'                                  ],
        'offer_bulk_deactivate'                    => ['post',     'offers/deactivate/bulk',                         'OfferController@bulkDeactivateOffers'                              ],
        'offer_fetch_subscription'                 => ['get',      'offers/subscription',                            'OfferController@fetchOffersSubscription'                           ],
        'subscription_offer_fetch_usage'           => ['get',      'offers/{id}/subscription/usage',                 'OfferController@fetchOffersUsage'                                  ],
        'subscription_offer_fetch_discount'        => ['get',      'offers/subscription/discounted_amount',          'OfferController@fetchOffersDiscountForSubscription'                ],
        'subscription_offer_preference'            => ['get',      'offers/subscription/preference',                 'OfferController@fetchOffersPreferenceForSubscription'              ],
        'validate_checkout_offers'                 => ['post',     'validate/checkout/offers',                       'OfferController@validateCheckoutOffers'                            ],
        'currency_update_rates'                    => ['post',     'currency/{currency}/rates',                      'CurrencyController@postCurrencyRates'                              ],
        'currency_fetch_all'                       => ['get',      'currency/all',                                   'CurrencyController@getAllCurrency'                                 ],
        'currency_fetch_all_proxy'                 => ['get',      'currency/all/proxy',                             'CurrencyController@getAllCurrency'                                 ],
        'currency_update_rates_multiple'           => ['post',     'currency/rates',                                 'CurrencyController@postCurrencyRatesMultiple'                      ],
        'currency_fetch_rates'                     => ['get',      'currency/{currency}/rates',                      'CurrencyController@getCurrencyRates'                               ],
        'currency_fetch_rates_proxy'               => ['get',      'currency/{currency}/rates/proxy',                'CurrencyController@getCurrencyRates'                               ],
        'currency_fetch_rates_internal'            => ['get',      'currency/{currency}/rates/internal',             'CurrencyController@getCurrencyRates'                               ],
        'reports_fetch_multiple'                   => ['get',      'reports',                                        'ReportController@getReports'                                       ],
        'reports_generate'                         => ['post',     'reports/{entity}/generate',                      'ReportController@generateReport'                                   ],
        'file_get_signed_url'                      => ['get',      '{entity}/{entityId}/signed-url',                 'FileStoreController@getSignedUrlForEntity'                         ],
        'update_bucket_name_region'                => ['put',      'file_store/bucket_region',                      'FileStoreController@updateFileBucketAndRegion'                     ],

        // Routes for the admin roles project
        'org_create'                               => ['post',     'orgs',                                           'OrganizationController@postOrganization'                           ],
        'org_get'                                  => ['get',      'orgs/{orgId}',                                   'OrganizationController@getOrganization'                            ],
        'org_get_self'                             => ['get',      'orgs/{id}/self',                                 'OrganizationController@getOrganization'                            ],
        'org_get_by_hostname'                      => ['get',      'orgs/hostname/{hostname}',                       'OrganizationController@getOrganizationByHostname'                  ],
        'org_get_multiple'                         => ['get',      'orgs',                                           'OrganizationController@getOrganizations'                           ],
        'org_edit'                                 => ['put',      'orgs/{orgId}',                                   'OrganizationController@putOrganization'                            ],
        'org_delete'                               => ['delete',   'orgs/{orgId}',                                   'OrganizationController@deleteOrganization'                         ],
        'org_fieldmap_create'                      => ['post',     'field-map',                                      'OrganizationController@postOrgFieldMap'                            ],
        'org_fieldmap_get_multiple'                => ['get',      'field-map',                                      'OrganizationController@getOrgFieldMapMultiple'                     ],
        'org_fieldmap_get'                         => ['get',      'field-map/{id}',                                 'OrganizationController@getOrgFieldMap'                             ],
        'org_fieldmap_get_by_entity'               => ['get',      'field-map/entity/{entity}',                      'OrganizationController@getOrgFieldMapByEntity'                     ],
        'org_fieldmap_edit'                        => ['put',      'field-map/{id}',                                 'OrganizationController@putOrgFieldMap'                             ],
        'org_fieldmap_delete'                      => ['delete',   'field-map/{id}',                                 'OrganizationController@deleteOrgFieldMap'                          ],
        'role_create'                              => ['post',     'roles',                                          'OrganizationController@createRole'                                 ],
        'role_get_multiple'                        => ['get',      'roles',                                          'OrganizationController@getMultipleRoles'                           ],
        'role_get'                                 => ['get',      'roles/{id}',                                     'OrganizationController@getRole'                                    ],
        'role_edit'                                => ['put',      'roles/{id}',                                     'OrganizationController@putRole'                                    ],
        'role_add_permissions'                     => ['put',      'roles/add/permissions',                          'OrganizationController@putPermissionsToRoles'                      ],
        'role_delete'                              => ['delete',   'roles/{id}',                                     'OrganizationController@deleteRole'                                 ],
        'role_list_admins_internal'                => ['get',      'roles/{name}/admins',                            'OrganizationController@listAdminsByRole'                           ],
        'admin_create'                             => ['post',     'admins',                                         'OrganizationController@createAdmin'                                ],
        'admin_get_multiple'                       => ['get',      'admins',                                         'OrganizationController@fetchAdminMultiple'                         ],
        'admin_get_app_auth'                       => ['post',     'current_admin',                                  'OrganizationController@getAdminByAppAuth'                          ],
        'admin_get'                                => ['get',      'admin/{id}/fetch',                               'OrganizationController@getAdmin'                                   ],
        'admin_edit'                               => ['put',      'admin/{id}',                                     'OrganizationController@editAdmin'                                  ],
        'admin_fetch_merchant_ids_new'             => ['get',      'admins/merchant_ids',                            'OrganizationController@getMerchantIdsFromEs'                       ],
        'admin_fetch_merchants_new'                => ['get',      'admins/merchants',                               'OrganizationController@getMerchantsFromEs'                         ],
        'admin_fetch_unified_dashboard_merchants'  => ['get',      'admins/unified_dashboard_merchants',             'OrganizationController@getUnifiedDashboardMerchants'               ],
        'admin_fetch_partner_activation'           => ['get',      'admins/partner/activation',                      'OrganizationController@getPartnerActivationFromEs'                 ],
        'admin_delete'                             => ['delete',   'admin/{id}',                                     'OrganizationController@deleteAdmin'                                ],
        'admin_lead_create'                        => ['post',     'admin-lead',                                     'OrganizationController@postAdminLead'                              ],
        'admin_lead_get_multiple'                  => ['get',      'admin-lead-multiple',                            'OrganizationController@getAdminLeadMultiple'                       ],

        'merchant_invitation_verify'               => ['get',      'merchant-invitation/verify/{token}',             'OrganizationController@verifyAdminLead'                            ],

        // To-Do : This route should be deprecated in favour of merchant_invitation_verify route . Keeping this route temporarily to decouple FE and BE deployments and avoid any production issue due to removal of route. The older route admin_lead_verify was re-routing request to admin portal due to presence of admin in url. Hence added the new url pattern without using admin in route name.
        'admin_lead_verify'                        => ['get',      'admin-lead/verify/{token}',                      'OrganizationController@verifyAdminLead'                            ],
        'admin_lead_put'                           => ['put',      'admin-lead/{id}',                                'OrganizationController@putAdminLead'                               ],
        'merchant_admin_lead_put'                  => ['put',      'admin-lead-merchant/{id}',                       'OrganizationController@putAdminLead'                               ],
        'admin_authentication'                     => ['post',     'admin/authenticate',                             'OrganizationController@postAuthenticate'                           ],
        'admin_oauth_authenticate'                 => ['post',     'admin/oauth_login',                              'OrganizationController@oAuthLogin'                                 ],
        'admin_forgot_password'                    => ['post',     'admin/forgot_password',                          'OrganizationController@postForgotPassword'                         ],
        'admin_reset_password'                     => ['post',     'admin/reset_password',                           'OrganizationController@postResetPassword'                          ],
        'admin_change_password'                    => ['post',     'admin/change_password',                          'OrganizationController@postChangePassword'                         ],
        'admin_bulk_assign_role'                   => ['post',     'admin/bulk_assign_role',                         'OrganizationController@bulkAssignRole'                             ],
        'group_create'                             => ['post',     'groups',                                         'OrganizationController@createGroup'                                ],
        'group_get_multiple'                       => ['get',      'groups',                                         'OrganizationController@getGroupsMultiple'                          ],
        'group_get_allowed_groups'                 => ['get',      'groups/{id}/allowed_groups',                     'OrganizationController@getAllowedGroups'                           ],
        'group_get'                                => ['get',      'groups/{id}',                                    'OrganizationController@getGroup'                                   ],
        'group_edit'                               => ['put',      'groups/{id}',                                    'OrganizationController@putGroup'                                   ],
        'group_delete'                             => ['delete',   'groups/{id}',                                    'OrganizationController@deleteGroup'                                ],
        'admin_lock_old_accounts'                  => ['post',     'admins/lock_accounts',                           'OrganizationController@postLockBulkAccounts'                       ],
        'admin_resend_otp_2fa'                     => ['post',     'admins/2fa/otp_resend',                          'OrganizationController@resendOtp'                                  ],
        'admin_verify_second_factor_auth'          => ['post',     'admins/2fa/verify',                              'OrganizationController@verifyAdminSecondFactorAuth'                ],
        'admin_trigger_2fa_otp'                    => ['post',    'admins/2fa',                                     'OrganizationController@change2faSetting'                           ],
        'admin_account_lock_unlock'                     => ['put',      'admins/account/{id}/{action}',                   'OrganizationController@accountLockUnlock'                          ],
        'terminal_bank_bulk'                       => ['put',      'terminals/banks/bulk',                           'TerminalController@updateTerminalsBank'                            ],
        'merchant_poc_update'                      => ['post',     'admin/poc_update',                               'AdminController@updateMerchantPoc'                                 ],
        'merchant_poc_update_with_time'            => ['post',     'admin/poc_update_with_time',                     'AdminController@updateMerchantPocWithTimeStamp'                    ],
        'unclaimed_merchant_poc_update'            => ['post',     'admin/unclaimed_poc_update',                     'AdminController@unclaimedMerchantPoc'                              ],

        // Admin Dashboard Org Level Reports
        'admin_reports_fetch_filters'              => ['get',      'admin_reports/filters/{type}',                   'AdminReportController@adminReportsFiltersGetByType'                ],
        'admin_reports_fetch_report_data'          => ['get',      'admin_reports/{type}',                           'AdminReportController@adminReportsGetReportData'                   ],
        'admin_reports_fetch_reports_by_type'      => ['get',      'admin_reports/fetch/{type}',                     'AdminReportController@adminReportsDownloadReportsByType'           ],
        'admin_reports_fetch_reports_for_admin'    => ['get',      'admin_reports/admin/list',                       'AdminReportController@adminReportsGetReportsForAdmin'              ],
        'admin_reports_fetch_reports_by_id'        => ['get',      'admin_reports/download/{report_id}',             'AdminReportController@adminReportsDownloadReportById'              ],

        // Permission can only be created by certain organizations.
        'permission_create'                        => ['post',     'permissions',                                    'OrganizationController@createPermission'                           ],
        'permission_get_by_type'                   => ['get',      'permissions/get/{type}',                         'OrganizationController@getPermissionsByType'                       ],
        'permission_get'                           => ['get',      'permissions/{id}',                               'OrganizationController@getPermission'                              ],
        'permission_get_multiple'                  => ['get',      'permissions-multiple',                           'OrganizationController@getMultiplePermissions'                     ],
        'permission_delete'                        => ['delete',   'permissions/{id}',                               'OrganizationController@deletePermission'                           ],
        'permission_edit'                          => ['put',      'permissions/{id}',                               'OrganizationController@putPermission',                             ],
        'permission_get_roles'                     => ['get',      'permissions/{id}/roles',                         'OrganizationController@getRolesForPermission'                      ],
        'auditlog_search'                          => ['get',      'auditlog/search',                                'OrganizationController@auditLogSearch'                             ],
        'admin_logout'                             => ['post',     'admin/logout',                                   'OrganizationController@logoutAdmin'                                ],

        // Self serve workflow
        'workflow_config_create'                    => ['post',     'workflow/config',                              'WorkflowServiceController@createWorkflowConfig'                        ],
        'workflow_config_update'                    => ['put',      'workflow/config',                              'WorkflowServiceController@updateWorkflowConfig'                        ],
        'workflow_config_delete'                    => ['delete',   'workflow/config',                              'WorkflowServiceController@deleteWorkflowConfig'                        ],
        'payouts_bulk_reject_owner'                 => ['post',     'payouts/reject/bulk/owner',                    'PayoutController@ownerBulkRejectPayouts'                               ],
        'payout_links_bulk_reject_owner'            => ['post',     'payout-links/reject/bulk/owner',               'PayoutLinkController@ownerBulkRejectPayoutLinks'                       ],
        'fetch_pending_payouts_summary'             => ['post',     'payouts/pending/summary',                      'PayoutController@fetchPendingPayoutsSummary'                                  ],
        'fetch_pending_payout_links_summary'        => ['post',     'payout-links/pending/summary',                 'PayoutLinkController@fetchPendingPayoutLinksSummary'                          ],

        'workflow_config_create_admin'              => ['post',    'admin/workflow/config',                               'WorkflowServiceController@createWorkflowConfig'                           ],
        'workflow_config_update_admin'              => ['put',    'admin/workflow/config',                                'WorkflowServiceController@updateWorkflowConfig'                           ],
        'workflow_config_delete_admin'              => ['delete',    'admin/workflow/config',                             'WorkflowServiceController@deleteWorkflowConfig'                           ],
        'workflow_config_create_bulk_admin'         => ['post',    'admin/workflow/config/bulk',                          'WorkflowServiceController@bulkCreateWorkflowConfig'                           ],
        'workflow_config_create_internal'           => ['post',    'internal/workflow/config',                            'WorkflowServiceController@createWorkflowConfig'                  ],

        'payout_partner_bank_status'                => ['get',     'payouts/partner-bank/status',                           'PayoutController@getPartnerBankStatus'                  ],

        // Workflows API
        'workflow_create'                          => ['post',     'workflows',                                      'WorkflowController@createWorkflow'                                 ],
        'workflow_get'                             => ['get',      'workflows/{id}',                                 'WorkflowController@getWorkflow'                                    ],
        'workflow_get_multiple'                    => ['get',      'workflows',                                      'WorkflowController@getWorkflowMultiple'                            ],
        'workflow_update'                          => ['put',      'workflows/{id}',                                 'WorkflowController@updateWorkflow'                                 ],
        'workflow_delete'                          => ['delete',   'workflows/{id}',                                 'WorkflowController@deleteWorkflow'                                 ],
        'workflow_action_get_multiple'             => ['get',      'w-actions',                                      'WorkflowController@getActionMultiple'                              ],
        'internal_workflow_action_get_multiple'    => ['get',      'internal/merchant/{id}/w-actions',               'WorkflowController@getActionMultipleInternal'                      ],
        'workflow_action_update'                   => ['put',      'w-actions/{id}',                                 'WorkflowController@updateWorkflowAction'                           ],
        'action_checker_create'                    => ['post',     'w-actions/{id}/checkers',                        'WorkflowController@postActionChecker'                              ],
        'workflow_action_details'                  => ['get',      'w-actions/{id}/details',                         'WorkflowController@getActionDetails'                               ],
        'workflow_action_close'                    => ['put',      'w-actions/close/{id}',                           'WorkflowController@closeWorkflowAction'                            ],
        'action_diff_get'                          => ['get',      'w-actions/{id}/diff',                            'WorkflowController@getActionDiff'                                  ],
        'action_request_execute'                   => ['post',     'w-actions/{id}/execute',                         'WorkflowController@postExecuteAction'                              ],
        'action_comment_create'                    => ['post',     'w-actions/{id}/comments',                        'WorkflowController@postActionComment'                              ],
        'workflow_payout_amount_rules'             => ['get',      'workflows/rules/payout_amount',                  'WorkflowController@getWorkflowPayoutAmountRules'                   ],
        'execute_bulk_action'                      => ['post',     'bulk-actions/execute_bulk_action',               'BulkActionController@executeBulkAction'                            ],
        'workflow_payout_amount_rules_get_admin'   => ['get',      'admin-workflows/rules/payout_amount',            'WorkflowController@getWorkflowPayoutAmountRules'                   ],
        'workflow_payout_amount_rules_edit'        => ['put',      'admin-workflows/rules/payout_amount',            'WorkflowController@editWorkflowPayoutAmountRules'                  ],
        'workflow_payout_amount_rules_create'      => ['post',     'workflows/rules/payout_amount',                  'WorkflowController@postWorkflowPayoutAmountRules'                  ],
        'workflow_merchants_create_payout_get'     => ['get',      'merchants/workflows/permissions/create_payout',  'WorkflowController@getMerchantIdsForCreatePayoutWorkflowPermission'],
        'workflow_observer_data_update'            => ['put',      'workflows/{id}/observer_data',                   'WorkflowController@updateWorkflowObserverData'                     ],
        'workflow_observer_data_fetch'             => ['get',      'workflows/{id}/observer_data',                   'WorkflowController@getWorkflowObserverData'                        ],
        'workflow_needs_merchant_clarification'    => ['put',      'merchant/{workflowId}/need_clarification',       'WorkflowController@postNeedClarificationOnWorkflow'                ],

        // UPI
        'p2p_fetch_private'                        => ['get',      'p2p/{id}',                                       'P2pController@getP2p'                                              ],
        'customer_collect_request_fetch_private'   => ['get',      'customers/{customer_id}/requests/collect',       'P2pController@fetchCollectRequestsPrivate'                         ],
        'device_create'                            => ['post',     'upi/devices',                                    'DeviceController@createDevice'                                     ],
        'device_refresh_token'                     => ['put',      'upi/device/upi_token',                           'DeviceController@refreshUpiToken'                                  ],
        'device_verify'                            => ['post',     'upi/devices/verify',                             'DeviceController@verifyDevice'                                     ],
        'device_fetch'                             => ['get',      'upi/devices/{id}',                               'DeviceController@getDevice'                                        ],
        'upi_customer_bank_accounts_fetch'         => ['get',      'upi/bank_accounts/ifsc/{ifsc}',                  'CustomerController@fetchUpiBankAccounts'                           ],
        'customer_balance_fetch'                   => ['post',     'upi/bank_accounts/{id}/balance',                 'CustomerController@fetchBalance'                                   ],
        'customer_bank_account_fetch'              => ['get',      'upi/bank_accounts/{id}',                         'CustomerController@fetchBankAccount'                               ],
        'reset_mpin'                               => ['put',      'upi/bank_accounts/{id}/mpin',                    'CustomerController@resetMpin'                                      ],
        'set_mpin'                                 => ['post',     'upi/bank_accounts/{id}/mpin',                    'CustomerController@setMpin'                                        ],
        'upi_customer_razor_accounts_fetch'        => ['get',      'upi/bank_accounts',                              'CustomerController@fetchUpiBankAccounts'                           ],
        'customer_collect_request_fetch'           => ['get',      'upi/customers/requests/collect',                 'P2pController@fetchCollectRequests'                                ],
        'upi_get_key_list'                         => ['get',      'upi/keyList',                                    'UpiController@getPublicKeyList'                                    ],
        'upi_npci_request'                         => ['post',     'upi_npci/{api}/1.0/urn:txnid:{id}',              'UpiController@newHandle'                                           ],
        'upi_get_bank_list'                        => ['get',      'upi/banks',                                      'UpiController@getBankList'                                         ],
        'upi_zero_call'                            => ['any',      'upi_npci/call/{api}',                            'UpiController@zeroCall'                                            ],
        'upi_read_async'                           => ['get',      'upi/status/{msgId}',                             'UpiController@getStatus'                                           ],
        'p2p_create'                               => ['post',     'upi/p2p',                                        'P2pController@createP2p'                                           ],
        'p2p_fetch'                                => ['get',      'upi/p2p/{id}',                                   'P2pController@getP2p'                                              ],
        'p2p_fetch_multiple'                       => ['get',      'upi/p2p',                                        'P2pController@getP2ps'                                             ],
        'p2p_reject'                               => ['put',      'upi/p2p/{id}/reject',                            'P2pController@rejectP2p'                                           ],
        'p2p_authorize'                            => ['post',     'upi/p2p/{id}/authorize',                         'P2pController@postAuthorize'                                       ],
        'device_customer_fetch'                    => ['get',      'upi/profile',                                    'CustomerController@getDeviceCustomer'                              ],
        'upi_psp_disallow'                         => ['post',     'upi/psp/disallow',                               'UpiController@postPspDisallow'                                     ],
        'upi_psp_allow'                            => ['post',     'upi/psp/allow',                                  'UpiController@postPspAllow'                                        ],
        'mock_event_tracker'                       => ['post',     'mock/track',                                     'MockLumberjackController@mockEventTrack'                           ],
        'payout_create'                            => ['post',     'payouts',                                        'PayoutController@postFundAccountPayout'                            ],
        'payout_validate'                          => ['post',     'validate_payouts',                               'PayoutController@validatePayout'                            ],
        'payout_create_internal'                   => ['post',     'payouts_internal',                               'PayoutController@postFundAccountPayout'                            ],
        'payout_create_on_internal_contact'        => ['post',     'internalContactPayout',                          'PayoutController@postFundAccountOnInternalContact'                 ],
        'payouts_batch_create'                     => ['post',     'payouts_batch',                                  'PayoutsBatchController@create'                                     ],
        'payouts_batch_create_x_demo_cron'         => ['post',     'payouts_batch_x_demo_cron',                      'PayoutsBatchController@createXDemoPayoutCron'                      ],
        'payout_bulk_create'                       => ['post',     'payouts/bulk',                                   'PayoutController@createPayoutBulk'                                 ],
        'payout_bulk_approve'                      => ['post',     'payouts/bulk_approve',                           'PayoutController@approvePayoutBulk'                                ],
        'payout_create_with_otp'                   => ['post',     'payouts_with_otp',                               'PayoutController@postFundAccountPayoutWithOtp'                     ],
        'composite_payout_create_with_otp'         => ['post',     'composite_payout_with_otp',                      'PayoutController@postCompositePayoutWithOtp'                     ],
        'payout_create_2FA'                        => ['post',     'payouts/2fa/create',                             'PayoutController@postFundAccountPayout2faForIciciCa'               ],
        'payout_create_2FA_internal'               => ['post',     'payouts/2fa/create_internal',                    'PayoutController@postFundAccountPayout2faForIciciCa'               ],
        'payout_send_2FA_otp'                      => ['post',     'payouts/2fa/send_otp',                           'PayoutController@payout2faOtpSendForIciciCa'                       ],
        'orphan_payouts_count_cron'                => ['post',     'payout_outbox/orphan_payouts/count',             'PayoutOutboxController@getOrphanedPayouts'                         ],
        'orphan_payouts_delete'                    => ['post',     'payout_outbox/orphan_payouts/delete',            'PayoutOutboxController@deleteOrphanedPayouts'                      ],
        'payout_approve_bulk'                      => ['post',     'payouts/approve/bulk',                           'PayoutController@bulkApproveFundAccountPayouts'                    ],
        'payout_reject_bulk'                       => ['post',     'payouts/reject/bulk',                            'PayoutController@bulkRejectFundAccountPayouts'                     ],
        'payout_approve'                           => ['post',     'payouts/{id}/approve',                           'PayoutController@postApproveFundAccountPayout'                     ],
        'payout_2fa_approve'                       => ['post',     'payouts/approve/2fa',                            'PayoutController@postApproveIciciCaFundAccountPayout'              ],
        'payout_reject'                            => ['post',     'payouts/{id}/reject',                            'PayoutController@postRejectFundAccountPayout'                      ],
        'payout_update_attachments'                => ['patch',    'payouts/{id}/attachments',                       'PayoutController@updateAttachments'                                ],
        'payout_download_attachments'              => ['post',     'payouts/attachments/download',                   'PayoutController@downloadAttachments'                                ],
        'payout_email_attachments'                 => ['post',     'payouts/attachments/email',                      'PayoutController@emailAttachments'                            ],
        'payout_report_get_attachment_details'     => ['get',      'payouts/attachments/{attachment_id}',            'PayoutController@getReportAttachmentDetails'                     ],
        'payout_report_get_attachment_signed_url'  => ['get',      'payouts/attachments/{attachment_id}/get_signed_url','PayoutController@getReportAttachmentSignedUrl'                     ],
        'payout_bulk_update_attachments'           => ['patch',    'payouts_internal/attachments',                   'PayoutController@bulkUpdateAttachments'                            ],
        'payout_update_tax_payment_id'             => ['patch',    'payouts_internal/{id}/tax-payment-id',           'PayoutController@updateTaxPayment'                                 ],
        'payout_upload_attachment'                 => ['post',     'payouts/attachment',                             'PayoutController@uploadAttachment'                                 ],
        'payout_get_attachment_signed_url'         => ['get',      'payouts/{payout_id}/attachment/{attachment_id}',                    'PayoutController@getAttachmentSignedUrl'                                    ],
        'payout_reject_admin_bulk'                 => ['post',     'admin/payouts/cancel',                           'PayoutController@bulkRejectFundAccountPayouts'                     ],
        'payout_fetch_by_id'                       => ['get',      'payouts/{id}',                                   'PayoutController@getPayout'                                        ],
        'payout_fetch_by_id_internal'              => ['get',      'payouts_internal/{id}',                          'PayoutController@getPayout'                                        ],
        'payout_fetch_multiple'                    => ['get',      'payouts',                                        'PayoutController@getPayouts'                                       ],
        'payout_fetch_multiple_internal'           => ['get',      'payouts_internal',                               'PayoutController@getPayouts'                                       ],
        'payout_retry'                             => ['post',     'payouts/{id}/retry',                             'PayoutController@postPayoutRetry'                                  ],
        'payout_purpose_get'                       => ['get',      'payouts/purposes',                               'PayoutController@getPurposes'                                      ],
        'payout_purpose_get_internal'              => ['get',      'payouts/purposes/{merchant_id}',                 'PayoutController@getPurposesInternal'                              ],
        'payout_purpose_validate_internal'         => ['post',     'payouts/purpose/validate',                       'PayoutController@validatePurpose'                                  ],
        'payout_purpose_post'                      => ['post',     'payouts/purposes',                               'PayoutController@postPurpose'                                      ],
        'bulk_payout_purpose_post'                 => ['post',     'payouts/purposes/{merchant_id}',                 'PayoutController@postBulkPurpose'                                  ],
        'payout_fetch_reversals'                   => ['get',      'payouts/{id}/reversals',                         'PayoutController@getPayoutReversal'                                ],
        'payouts_process_queued_new'               => ['post',     'payouts/queued/process/new',                     'PayoutController@processInitiateForQueuedPayouts'                  ],
        // TODO : Remove this route. Has been kept here for backward compatibility
        'payouts_process_queued'                   => ['post',     'payouts/queued/process',                         'PayoutController@processDispatchForQueuedPayouts'                  ],
        'payouts_process_on_hold'                  => ['post',     'payouts/onhold/process',                         'PayoutController@processDispatchForOnHoldPayouts'                  ],
        'payouts_process_on_hold_partner_bank'     => ['post',     'payouts/onhold/process/downtime',                'PayoutController@processDispatchPartnerBankOnHoldPayouts'          ],
        'payouts_create_failure_processing_cron'   => ['post',     'payouts/cron/create_failure_processing',         'PayoutController@payoutsServiceCreateFailureProcessingCron'        ],
        'payouts_update_failure_processing_cron'   => ['post',     'payouts/cron/update_failure_processing',         'PayoutController@payoutsServiceUpdateFailureProcessingCron'               ],
        'payouts_process_batch'                    => ['post',     'payouts/batch/process',                          'PayoutController@processInitiateForBatchSubmittedPayouts'          ],
        'payouts_process_scheduled'                => ['post',     'payouts/scheduled/process',                      'PayoutController@processInitiateForScheduledPayouts'               ],
        'payouts_auto_cancel_on_expiry'            => ['post',     'payouts/auto_expire',                            'PayoutController@processDispatchForPayoutsAutoRejectionOnExpiry'   ],

        'payout_service_data_migration'            => ['post',     'payout_service_data_migration',                  'PayoutController@initiateDataMigration'                            ],
        'ps_data_migration_redis_clean_up'         => ['post',     'ps_data_migration_redis_clean_up',                'PayoutController@psDataMigrationRedisCleanUp'                     ],

        'payouts_summary'                          => ['get',      'payouts/_meta/summary',                          'PayoutController@getSummary'                                       ],
        'payouts_workflow_summary'                 => ['get',      'payouts/_meta/workflows',                        'PayoutController@getWorkflowSummary'                               ],
        'payouts_workflow_config_get'              => ['get',      'payouts/_meta/wf_config',                              'PayoutController@getWorkflowSummaryByType'                               ],
        'admin_payouts_workflow_config_get'        => ['get',      'admin-workflows/payouts/wf_config',              'PayoutController@getWorkflowSummaryByType'                               ],
        'payouts_scheduled_time_slots'             => ['get',      'payouts/schedule/timeslots',                     'PayoutController@getScheduleSlotsForPayouts'                       ],
        'payouts_bulk_sample_file'                 => ['post',     'payouts/bulk/sample_file',                       'PayoutController@getSampleFileForBulkPayouts'                      ],
        'payouts_bulk_amount_type'                 => ['post',     'payouts/bulk/amount_type',                       'PayoutController@postBulkPayoutsAmountType'                        ],
        'payouts_bulk_amount_type_update'          => ['patch',    'payouts/bulk/amount_type',                       'PayoutController@updateBulkPayoutsAmountType'                       ],

        // Routes for merchant's direct account payout mode config
        'fetch_merchant_da_payout_mode_config'     => ['get',       'payouts/da_payout_mode_config',                 'PayoutsConfigurationsController@fetchDirectAccountPayoutModeConfig'                        ],
        'create_merchant_da_payout_mode_config'    => ['post',      'payouts/da_payout_mode_config',                 'PayoutsConfigurationsController@createDirectAccountPayoutModeConfig'                       ],
        'edit_merchant_da_payout_mode_config'      => ['patch',     'payouts/da_payout_mode_config',                 'PayoutsConfigurationsController@editDirectAccountPayoutModeConfig'                         ],

        // Bulk Payouts
        'payouts_batch_validate'                   => ['post',     'payouts/batch/validate',                         'PayoutController@validatePayoutsBatch'                             ],
        'payouts_bulk_template_file'               => ['post',     'payouts/batch/template',                         'PayoutController@getTemplateFileForBulkPayouts'                      ],
        'payouts_batch_process'                    => ['post',     'payouts/batch/{id}/process',                     'PayoutController@processPayoutsBatch'                             ],
        'payouts_get_batch_rows'                   => ['get',      'payouts/batch/{id}/rows',                        'PayoutController@getBatchRows'                                    ],
        'payouts_summary_email'                    => ['post',     'payouts/batch/{id}/merchant/{mid}/summary/email','PayoutController@emailBatchPayoutsSummary'                            ],

        // Payout Outbox
        'undo_payout_creation'                      => ['post',     'payouts/{id}/undo',                            'PayoutOutboxController@undoPayout'                                     ],
        'resume_payout_creation'                    => ['post',     'payouts/{id}/resume',                          'PayoutOutboxController@resumePayout'                                  ],

        // to show list of status reason available for different statuses
        'payout_status_to_reason_mapping'          => ['get',      'payouts_status_reason_map',                      'PayoutController@getPayoutStatusReasonMap'                                 ],


        // Payout Workflows
        'payout_workflow_retry_admin_bulk'         => ['post',     'admin/payouts/workflow_retry',                   'PayoutController@bulkRetryWorkflowOnPayout'                        ],
        'payout_approve_internal'                  => ['post',     'payouts_internal/{id}/approve',                  'PayoutController@postApproveFundAccountPayoutInternal'             ],
        'payout_reject_internal'                   => ['post',     'payouts_internal/{id}/reject',                   'PayoutController@postRejectFundAccountPayoutInternal'              ],
        'payout_send_pending_approval_email'       => ['post',     'payouts/pending-payouts-approval-email',         'PayoutController@pendingPayoutApprovalEmail'                       ],

        'payout_send_pending_approval_reminder'    => ['post',     'payouts/pending-payouts-approval-reminder',      'PayoutController@pendingPayoutApprovalReminder'                       ],

        'payouts_pending_push_notification_cron'   => ['post',     'payouts/pending/push-notification',               'PayoutController@pendingPayoutPushNotification'                       ],

        'payout_wf_config_migrate'                 => ['post',     'payouts_configs/migrate',                        'PayoutController@migrateWorkflowConfigsToWorkflowService'          ],
        'payout_notification_to_slack_app'         => ['post',     'payout_notification/slack_app',                  'PayoutController@sendPendingPayoutsNotificationToSlack'],

        'update_merchant_sla_for_on_hold_payouts'  => ['put',      'payouts/merchant_on_hold_slas',                  'PayoutController@updateMerchantOnHoldSlas'],

        'payout_get_holiday_details'              => ['get',     'holidays',                                        'PayoutController@getHolidayDetails'],

        //fund_management_routes
        'ca_check_fund_management_payout_cron' => ['post', 'ca-fund-management-payouts/cron/check', 'PayoutController@caFundManagementPayoutCheck'],
        'fund_management_balance_get_config'   => ['get', 'fund-management-payout/balance-config/merchants/{merchant_id}', 'PayoutController@getCABalanceManagementConfig'],
        'fund_management_balance_set_config'   => ['post', 'fund-management-payout/balance-config/merchants/{merchant_id}', 'PayoutController@updateCABalanceManagementConfig'],

        //Routes related to workflows microservice
        'wfs_config_create'                       => ['post',    'wf-service/configs',                               'WorkflowServiceController@createConfig'                            ],
        'wfs_config_update'                       => ['patch',   'wf-service/configs',                               'WorkflowServiceController@updateConfig'                            ],
        'wfs_config_get'                          => ['get',     'wf-service/configs/{id}',                          'WorkflowServiceController@getConfig'                               ],
        'wfs_config_get_admin'                    => ['get',     'wf-service-admin/configs/{id}',                          'WorkflowServiceController@getConfig'                               ],
        'workflow_state_callback'                 => ['post',    'wf-service/state/callback',                        'WorkflowServiceController@createWorkflowStateMap'                  ],
        'workflow_state_callback_update'          => ['patch',   'wf-service/state/{id}/callback',                   'WorkflowServiceController@updateWorkflowStateMap'                  ],
        'wfs_workflows_list'                      => ['post',    'wf-service/workflows/list',                        'WorkflowServiceController@listWorkflows'                           ],
        'wfs_workflows_get'                       => ['get',     'wf-service/workflows/{id}',                        'WorkflowServiceController@getWorkflow'                             ],
        'wfs_workflow_action_create'              => ['post',    'wf-service/action',                                'WorkflowServiceController@createWorkflowAction'                    ],
        'wfs_workflow_add_assignee'               => ['post',    'wf-service/workflows/addAssignee',                 'WorkflowServiceController@addWorkflowAssignee'                     ],
        'wfs_workflow_remove_assignee'            => ['delete',  'wf-service/workflows/removeAssignee',              'WorkflowServiceController@removeWorkflowAssignee'                     ],
        'wfs_comments_create'                     => ['post',    'wf-service/comments',                              'WorkflowServiceController@createComment'                           ],
        'wfs_comments_list'                       => ['post',    'wf-service/comments/list',                         'WorkflowServiceController@listComments'                            ],

        // cross border workflows route
        'wfs_cb_workflows_list'                      => ['post',    'wf-service/cb/workflows/list',                  'WorkflowServiceController@listCbWorkflows'                           ],
        'wfs_cb_workflows_get'                       => ['get',     'wf-service/cb/workflows/{id}',                  'WorkflowServiceController@getWorkflow'                             ],
        'wfs_cb_workflow_action_create'              => ['post',    'wf-service/cb/action',                          'WorkflowServiceController@createWorkflowAction'                    ],
        'wfs_cb_workflow_add_assignee'               => ['post',    'wf-service/cb/workflows/addAssignee',           'WorkflowServiceController@addWorkflowAssignee'                     ],
        'wfs_cb_workflow_remove_assignee'            => ['delete',  'wf-service/cb/workflows/removeAssignee',        'WorkflowServiceController@removeWorkflowAssignee'                  ],
        'wfs_cb_comments_create'                     => ['post',    'wf-service/cb/comments',                        'WorkflowServiceController@createComment'                           ],
        'wfs_cb_comments_list'                       => ['post',    'wf-service/cb/comments/list',                   'WorkflowServiceController@listComments'                            ],

        //Vendor Payments
        'vendor_payment_create_vendor_advance'     => ['post',     'vendor-payments/vendor-advances',                                         'VendorPaymentController@createVendorAdvance'                       ],
        'vendor_payment_get_vendor_advance'        => ['get',      'vendor-payments/vendor-advances/{id}',                                    'VendorPaymentController@getVendorAdvance'                          ],
        'vendor_payment_list_vendor_advance'       => ['get',      'vendor-payments/vendor-advances',                                         'VendorPaymentController@listVendorAdvances'                        ],
        'vendor_payments_check_existing_invoice'   => ['get',      'vendor-payments/check-invoice-exist',                                     'VendorPaymentController@checkIfInvoiceExistForVendor'              ],
        'vendor_payment_execute_bulk'              => ['post',     'vendor-payments/bulk/execute',                                            'VendorPaymentController@executeVendorPaymentBulk'                  ],
        'vendor_payment_upcoming_mail_cron'        => ['post',     'vendor-payments/sendUpcomingMailCron',                                    'VendorPaymentController@sendUpcomingMailCron'                      ],
        'vendor_payment_send_email_generic'        => ['post',     'vendor-payments/sendMailGeneric',                                         'VendorPaymentController@sendMailGeneric'                           ],
        'vendor_payment_composite_expands_helper'  => ['get',      'vendor-payments/composite-expands',                                       'VendorPaymentController@compositeExpandsHelper'                    ],
        'vendor_payment_send_failure_email'        => ['post',     'vendor-payments/send-failure-email',                                      'VendorPaymentController@internalSendFailureEmail'                  ],
        'vendor_payment_summary'                   => ['get',      'vendor-payments/_meta/summary',                                           'VendorPaymentController@summary'                                   ],
        'vendor_payment_contact_list'              => ['get',      'vendor-payments/contacts',                                                'VendorPaymentController@listContacts'                              ],
        'vendor_payment_invoice_upload'            => ['post',     'vendor-payments/upload-invoice',                                          'VendorPaymentController@uploadInvoice'                             ],
        'vendor_payment_invoice_get_signed_url'    => ['get',      'vendor-payments/invoice-signed-url/{vendor_payment_id}',                  'VendorPaymentController@getInvoiceSignedUrl'                       ],
        'vendor_payment_contact_get'               => ['get',      'vendor-payments/contacts/{id}',                                           'VendorPaymentController@getContact'                                ],
        'vendor_payment_contact_create'            => ['post',     'vendor-payments/contacts',                                                'VendorPaymentController@createContact'                             ],
        'vendor_payment_contact_update'            => ['post',     'vendor-payments/contacts/{id}',                                           'VendorPaymentController@updateContact'                             ],
        'vendor_payment_get_email_mapping'         => ['get',      'vendor-payments/email-integration/email',                                 'VendorPaymentController@getMerchantEmailAddress'                   ],
        'vendor_payment_create_email_mapping'      => ['post',     'vendor-payments/email-integration/email',                                 'VendorPaymentController@createMerchantEmailMapping'                ],
        'vendor_payment_create'                    => ['post',     'vendor-payments/',                                                        'VendorPaymentController@create'                                    ],
        'vendor_payment_list'                      => ['get',      'vendor-payments/',                                                        'VendorPaymentController@list'                                      ],
        'vendor_payment_get_by_id'                 => ['get',      'vendor-payments/{id}',                                                    'VendorPaymentController@get'                                       ],
        'vendor_payment_verify_otp'                => ['post',     'vendor-payments/verify-otp',                                              'VendorPaymentController@verifyOtp'                                 ],
        'vendor_payment_execute'                   => ['post',     'vendor-payments/{id}/execute',                                            'VendorPaymentController@executeVendorPayment'                      ],
        'vendor_payment_execute_2fa'               => ['post',     'vendor-payments/{id}/2fa/execute',                                        'VendorPaymentController@executeVendorPayment2fa'                   ],
        'vendor_payment_get_tds_categories'        => ['get',      'vendor-payments/tds-categories',                                          'VendorPaymentController@getTdsCategories'                          ],
        'vendor_payment_edit'                      => ['post',     'vendor-payments/{id}/edit',                                               'VendorPaymentController@edit'                                      ],
        'vendor_payment_cancel'                    => ['post',     'vendor-payments/{id}/cancel',                                             'VendorPaymentController@cancel'                                    ],
        'vendor_payment_bulk_cancel'               => ['post',     'vendor-payments/bulk-cancel',                                             'VendorPaymentController@bulkCancel'                                ],
        'vendor_payment_accept'                    => ['post',     'vendor-payments/{id}/accept',                                             'VendorPaymentController@accept'                                    ],
        'vendor_payment_get_ocr_data'              => ['get',      'vendor-payments/get-ocr-data/{ocr_reference_id}',                         'VendorPaymentController@getOcrData'                                ],
        'vendor_payment_ocr_accuracy_cron'         => ['post',     'vendor-payments/_meta/ocr-accuracy-check',                                'VendorPaymentController@ocrAccuracyCheck'                          ],
        'vendor_payment_mark_as_paid'              => ['post',     'vendor-payments/mark-as-paid',                                            'VendorPaymentController@markAsPaid'                                ],
        'vendor_payment_reporting_info'            => ['get',      'vendor-payments/_meta/get-reporting-info',                                'VendorPaymentController@getReportingInfo'                          ],
        'vendor_payment_bulk_invoice_download'     => ['post',     'vendor-payments/_meta/bulk-invoice-download',                             'VendorPaymentController@bulkInvoiceDownload'                       ],
        'vendor_payment_update_invoice_file_id'    => ['post',     'vendor-payments/{id}/update-invoice-file-id',                             'VendorPaymentController@updateInvoiceFileId'                       ],
        'vendor_payment_get_invoice_zip_file'      => ['get',      'vendor-payments/invoices/ufh/{id}',                                       'VendorPaymentController@getInvoicesFromUfh'                        ],
        'vendor_payment_get_quick_filter_amounts'  => ['get',      'vendor-payments/_meta/quick-filter-amounts',                              'VendorPaymentController@getQuickFilterAmounts'                     ],
        'vendor_payment_email_integration_webhook' => ['post',     'vendor-payments/mailgun-webhook',                                         'VendorPaymentController@processIncomingMail'                       ],
        'vendor_payment_get_auto_processed_invoice'=> ['get',      'vendor-payments/auto-processed-invoice/{id}',                             'VendorPaymentController@getAutoProcessedInvoice'                   ],
        'vendor_payment_send_vendor_invite_ei'     => ['post',     'vendor-payments/invite-vendor',                                           'VendorPaymentController@inviteVendor'                              ],
        'vendor_payment_disable_vendor_portal'     => ['post',     'vendor-payments/contacts/{contact_id}/vendor-portal-disable',             'VendorPaymentController@disableVendorPortal'                       ],
        'vendor_payment_enable_vendor_portal'      => ['post',     'vendor-payments/contacts/{contact_id}/vendor-portal-enable',              'VendorPaymentController@enableVendorPortal'                        ],
        'vendor_settlement_execute_single'         => ['post',     'vendor-payments/settlements/single',                                      'VendorPaymentController@vendorSettlementSingle'                    ],
        'vendor_settlement_fund_accounts'          => ['get',      'vendor-payments/settlements/contact/{contact_id}/eligible-fund-accounts', 'VendorPaymentController@getFundAccounts'                           ],
        'vendor_settlement_execute_multiple'       => ['post',     'vendor-payments/settlements/multiple',                                    'VendorPaymentController@vendorSettlementMultiple'                  ],
        'vendor_settlement_mark_as_paid'           => ['post',     'vendor-payments/settlements/mark-as-paid',                                'VendorPaymentController@vendorSettlementMarkAsPaid'                ],
        'vendor_settlement_vendor_balance'         => ['get',      'vendor-payments/contacts/{contact_id}/vendor-balance',                    'VendorPaymentController@getVendorBalance'                          ],
        'vendor_payment_list_vendors'              => ['get',      'vendor-payments/vendors',                                                 'VendorPaymentController@listVendors'                               ],
        'vendor_sign_up_create_business_info'      => ['post',     'vendor-payments/onboarding/business_info',                                'VendorPaymentController@createBusinessInfo'                        ],
        'vendor_sign_up_get_business_info_status'  => ['get',      'vendor-payments/onboarding/business_info/status',                         'VendorPaymentController@getBusinessInfoStatus'                     ],
        'vendor_payment_create_file_upload'        => ['post',     'vendor-payments/vp_file_upload',                                          'VendorPaymentController@createFileUpload'                          ],
        'vendor_payment_get_file_upload'           => ['get',      'vendor-payments/vp_file_uploads',                                         'VendorPaymentController@getFileUpload'                             ],
        'vendor_payment_delete_file_upload'        => ['post',     'vendor-payments/vp_file_upload/{ufh_file_id}/remove',                     'VendorPaymentController@deleteFileUpload'                          ],
        'vendor_payment_add_or_update_settings'    => ['post',     'vendor-payments/add_or_update_settings',                                  'VendorPaymentController@addOrUpdateSettings'                       ],
        'vendor_payment_get_settings'              => ['get',      'vendor-payments/get_settings',                                            'VendorPaymentController@getSettings'                               ],
        'vendor_payment_approve_reject'            => ['post',     'vendor-payments/approve-reject',                                          'VendorPaymentController@approveReject'                             ],
        'vendor_payment_approve_reject_cors'       => ['options',  'vendor-payments/approve-reject',                                          'VendorPaymentController@allowCorsForPublicApproveRejectPage'       ],
        'vendor_payment_get_latest_approvers'      => ['get',      'vendor-payments/get_latest_approvers',                                    'VendorPaymentController@getLatestApprovers'                        ],
        'vendor_payment_get_timeline_view'         => ['get',      'vendor-payments/get_timeline_view',                                       'VendorPaymentController@getTimelineView'                           ],

        // Vendor Portal
        'vendor_invoices_list'                     => ['get',      'vendor-portal/invite/{vendor_invite_id}/invoices',                               'VendorPortalController@listVendorInvoices'       ],
        'vendor_invoice_get_by_id'                 => ['get',      'vendor-portal/invite/{vendor_invite_id}/invoices/{vendor_payment_id}',           'VendorPortalController@getVendorInvoice'         ],
        'vendor_portal_list_tds_categories'        => ['get',      'vendor-portal/tds-categories',                                                   'VendorPortalController@listTdsCategories'        ],
        'vendor_portal_invoice_get_signed_url'     => ['get',      'vendor-portal/invite/{vendor_invite_id}/invoice-signed-url/{vendor_payment_id}', 'VendorPortalController@getInvoiceSignedUrl'      ],
        'vendor_portal_invites_list'               => ['get',      'vendor-portal/invites',                                                          'VendorPortalController@listVendorPortalInvites'  ],
        'vendor_invoice_create'                    => ['post',     'vendor-portal/invite/{vendor_invite_id}/invoices',                               'VendorPortalController@createVendorInvoice'      ],
        'vendor_portal_upload_invoice'             => ['post',     'vendor-portal/invite/{vendor_invite_id}/upload-invoice',                         'VendorPortalController@uploadInvoice'            ],
        'vendor_portal_get_ocr_data'               => ['get',      'vendor-portal/invite/{vendor_invite_id}/get-ocr-data/{ocr_id}',                  'VendorPortalController@getOcrData'               ],
        'vendor_portal_get_vendor_preferences'     => ['get',      'vendor-portal/invite/{vendor_invite_id}/preferences',                            'VendorPortalController@getVendorPreferences'     ],
        'vendor_portal_update_vendor_preferences'  => ['post',     'vendor-portal/invite/{vendor_invite_id}/preferences',                            'VendorPortalController@updateVendorPreferences'  ],

        // Routes common to x-apps
        'x_apps_get_all_settings'                  => ['get',     'x-apps/settings/',                          'XAppsController@getAllSettings'                                          ],
        'x_apps_add_or_update_settings'            => ['post',    'x-apps/settings/',                          'XAppsController@addOrUpdateSettings'                                     ],

        // Accounts-Receivable
        'accounts_receivable_all_routes'           => ['any',     'accounts-receivable/service/{path?}',       'EdgeProxyController@proxy'                                               ],

        // Business-Reporting
        'business_reporting_all_proxy_routes'      => ['any',      'business-reporting/{path?}',        'EdgeProxyController@proxy'                                               ],

        // Accounting Integrations
        'accounting_integrations_proxy_routes'      => ['any',      'accounting-integrations/{path?}',          'EdgeProxyController@proxy'                                               ],
        'accounting_integrations_callback'          => ['get',      'direct/accounting-integrations/callback',  'EdgeProxyController@proxy'                                               ],
        'accounting_integrations_admin_routes'      => ['any',     'accounting-integrations/admin/{path?}',     'EdgeProxyController@proxy'                                               ],

        // Accounting Payouts (inside vendor payments)
        'accounting_payouts_integration_status'                 => ['get',     'accounting-payouts/integration/status',          'AccountingPayoutsController@integrationStatus'         ],
        'accounting_payouts_integration_app_get_url'            => ['get',     'accounting-payouts/integration/{app}',           'AccountingPayoutsController@integrationAppGetURL'      ],
        'accounting_payouts_integration_app_initiate'           => ['post',    'accounting-payouts/integration/{app}',           'AccountingPayoutsController@integrationAppInitiate'    ],
        'accounting_payouts_integration_status_app'             => ['get',     'accounting-payouts/integration/{app}/status',    'AccountingPayoutsController@integrationStatusApp'      ],
        'accounting_payouts_callback'                           => ['get',     'accounting-payouts/callback',                    'AccountingPayoutsController@callback'                  ],
        'accounting_payouts_app_credentials'                    => ['post',    'accounting-payouts/appcredentials/{app}',        'AccountingPayoutsController@appCredentials'            ],
        'accounting_payouts_delete_integration'                 => ['post',    'accounting-payouts/delete/{app}',                'AccountingPayoutsController@deleteIntegration'         ],
        'accounting_payouts_sync_status'                        => ['get',     'accounting-payouts/sync/{app}',                  'AccountingPayoutsController@syncStatus'                ],
        'accounting_payouts_sync'                               => ['post',    'accounting-payouts/sync/{app}',                  'AccountingPayoutsController@sync'                      ],
        'accounting_payouts_sync_internal'                      => ['post',    'accounting-payouts/internal/sync/{app}',         'AccountingPayoutsController@syncInternal'              ],
        'accounting_payouts_waitlist'                           => ['post',    'accounting-payouts/waitlist/{app}',              'AccountingPayoutsController@waitlist'                  ],

        'accounting_payouts_cash_flow_list_ba'                  => ['get',     'accounting-integration/cashflow/bank-accounts',      'AccountingPayoutsController@listCashFlowBA'            ],
        'accounting_payouts_cash_flow_update_ba_mapping'        => ['post',    'accounting-integration/cashflow/update-bank-mapping','AccountingPayoutsController@updateBAMapping'           ],

        'accounting_integration_get_organization'               => ['get',      'accounting-integration/organizations/{app}',          'AccountingPayoutsController@getOrganisationsInfo'     ],
        'accounting_integration_set_organization'               => ['post',     'accounting-integration/organizations/{app}',          'AccountingPayoutsController@setOrganisationInfo'      ],


        'accounting_integration_tally_cash_flow_acknowledge'    => ['post',     'accounting-integration/tally/cashflow/entries/ack',        'AccountingPayoutsController@acknowledgeCashFlowEntries'    ],
        'accounting_integration_tally_cash_flow_update_mapping' => ['post',     'accounting-integration/tally/cashflow/update-mapping',     'AccountingPayoutsController@updateMappingCashFlowEntries'  ],
        'accounting_integration_tally_fetch_cash_flow_entries'  => ['get',      'accounting-integration/tally/cashflow/entries',            'AccountingPayoutsController@getCashFlowEntries'            ],
        'accounting_integration_tally_invoices'                 => ['post',     'accounting-integration/tally/invoices',                    'AccountingPayoutsController@createTallyInvoice'        ],
        'accounting_integration_tally_fetch_invoice'            => ['get',      'accounting-integration/tally/invoices',                    'AccountingPayoutsController@fetchTallyInvoice'         ],
        'accounting_integration_tally_cancel_invoice'           => ['post',     'accounting-integration/tally/invoices/cancel',             'AccountingPayoutsController@cancelTallyInvoice'        ],
        'accounting_integration_tally_fetch_payment'            => ['get',      'accounting-integration/tally/payments',                    'AccountingPayoutsController@fetchTallyPayments'        ],
        'accounting_integration_tally_acknowledge_payment'      => ['post',     'accounting-integration/tally/payments/{id}/acknowledge',   'AccountingPayoutsController@acknowledgeTallyPayment'   ],
        'accounting_integration_tally_integrate'                => ['post',     'accounting-integration/tally/integrate',                   'AccountingPayoutsController@integrateTally'            ],
        'accounting_integration_tally_delete_integration'       => ['post',     'accounting-integration/tally/delete',                      'AccountingPayoutsController@deleteIntegrationTally'    ],
        'accounting_integration_tally_create_contact'           => ['post',     'accounting-integration/tally/vendors',                     'AccountingPayoutsController@createTallyVendors'        ],
        'accounting_integration_tally_sync_status'              => ['get',      'accounting-integration/tally/vendors/sync-status',         'AccountingPayoutsController@fetchSyncStatus'           ],
        'accounting_integration_tally_tax_slab_rates'           => ['get',      'accounting-integration/tally/tax-slabs',                   'AccountingPayoutsController@getTaxSlabs'               ],
        'accounting_integration_get_bank_statement_report'      => ['get',     'accounting-integration/bank-statement/report',             'AccountingPayoutsController@getBankStatementReport'    ],

        'accounting_integration_tally_banking_accounts'                  => ['get',      'accounting-integration/tally/banking-accounts',                       'AccountingPayoutsController@getMerchantBankingAccountsForTally'   ],
        'accounting_integration_update_rx_tally_ledger_mapping'          => ['post',     'accounting-integration/tally/banking-accounts/mapping',               'AccountingPayoutsController@updateRxTallyLedgerMapping'           ],
        'accounting_integration_tally_get_bank_transactions'             => ['get',      'accounting-integration/tally/bank-transactions',                      'AccountingPayoutsController@getTallyBankTransactions'             ],
        'accounting_integration_tally_ack_bank_transactions'             => ['post',     'accounting-integration/tally/bank-transactions/ack',                  'AccountingPayoutsController@ackTallyBankTransactions'             ],

        'accounting_integration_add_or_update_settings'   => ['post',     'accounting-integration/settings',                          'AccountingPayoutsController@addOrUpdateSettings'       ],
        'accounting_integration_get_all_settings'         => ['get',      'accounting-integration/settings',                          'AccountingPayoutsController@getAllSettings'            ],


        'accounting_integration_get_chart_of_accounts'          => ['get',      'accounting-integration/chart-of-accounts/{app}',           'AccountingPayoutsController@getChartOfAccounts'        ],
        'accounting_integration_put_chart_of_accounts'          => ['put',      'accounting-integration/chart-of-accounts/{app}',           'AccountingPayoutsController@putChartOfAccounts'        ],
        'accounting_integration_sync_chart_of_accounts'         => ['post',     'accounting-integration/chart-of-accounts/{app}/sync',      'AccountingPayoutsController@syncChartOfAccounts'       ],
        'accounting_integration_zoho_bank_statement_sync_cron'           => ['post',     'accounting-integration/zoho/bank-statement/sync-cron',          'AccountingPayoutsController@zohoStatementSyncCron'              ],
        'accounting_integration_bank_statement_fetch_trigger_cron'       => ['post',     'accounting-integration/bank-statement/fetch-trigger-cron',      'AccountingPayoutsController@bankStatementFetchTriggerCron'      ],
        'accounting_integration_bank_statement_fetch_trigger_merchant'   => ['post',     'accounting-integration/bank-statement/fetch-trigger-merchant',  'AccountingPayoutsController@bankStatementFetchTriggerMerchant'  ],
        'accounting_integration_bank_transactions_sync_status'           => ['get',      'accounting-integration/bank-transactions/sync-status',          'AccountingPayoutsController@getBankTransactionsSyncStatus'      ],
        'accounting_integration_check_bank_ledger_mapping_required'      => ['get',      'accounting-integration/bank-accounts/verify',                   'AccountingPayoutsController@checkIfBankMappingRequired'         ],

        // Tax Payments
        'tax_payments_add_penalty_cron'              => ['post',    'tax-payments/addPenalty',                         'TaxPaymentController@addPenalty'                                   ],
        'tax_payments_mail_cron'                     => ['post',    'tax-payments/mailCron',                           'TaxPaymentController@mailCron'                                     ],
        'tax_payments_monthly_summary'               => ['get',     'tax-payments/_meta/summary',                      'TaxPaymentController@monthlySummary'                               ],
        'tax_payments_invalid_tan_status'            => ['get',     'tax-payments/_meta/invalid_tan_status',           'TaxPaymentController@getInvalidTanStatus'                          ],
        'tax_payments_downtime_schedule'             => ['get',     'tax-payments/_meta/downtime_schedule/{module}',   'TaxPaymentController@getDowntimeSchedule'                          ],
        'tax_payments_downtime_schedules_list'       => ['get',     'tax-payments/_meta/downtime_schedule',            'TaxPaymentController@listDowntimeSchedule'                         ],
        'tax_payments_admin_auth_api'                => ['post',    'tax-payments/admin',                              'TaxPaymentController@adminActions'                                 ],
        'tax_payments_payout_cron'                   => ['post',    'tax-payments/initiateMonthlyPayouts',             'TaxPaymentController@initiateMonthlyPayouts'                       ],
        'tax_payments_payout_cancel_cron'            => ['post',    'tax-payments/cancelQueuedPayouts',                'TaxPaymentController@cancelQueuedPayouts'                          ],
        'tax_payments_send_email'                    => ['post',    'tax-payments/sendMail',                           'TaxPaymentController@sendMail'                                     ],
        'tax_payments_enabled_merchant_settings'     => ['get',     'tax-payments/enabledMerchantSettings',            'TaxPaymentController@enabledMerchantSettings'                      ],
        'tax_payments_pay'                           => ['post',    'tax-payments/{id}/pay',                           'TaxPaymentController@payTaxPayment'                                ],
        'tax_payments_bulk_pay'                      => ['post',    'tax-payments/bulk-pay',                           'TaxPaymentController@bulkPayTaxPayment'                            ],
        'tax_payments_get_all_settings'              => ['get',     'tax-payments/settings/',                          'TaxPaymentController@getAllSettings'                               ],
        'tax_payments_add_or_update_settings_auto'   => ['post',    'tax-payments/settings/auto/',                     'TaxPaymentController@addOrUpdateSettingsForAutoTds'                ],
        'tax_payments_add_or_update_settings'        => ['post',    'tax-payments/settings/',                          'TaxPaymentController@addOrUpdateSettings'                          ],
        'tax_payments_list'                          => ['get',     'tax-payments/',                                   'TaxPaymentController@listTaxPayments'                              ],
        'tax_payments_reminders_callback'            => ['post',    'tax-payments/reminders/{mode}/{type}/{id}',       'TaxPaymentController@reminderCallback'                             ],
        'tax_payments_create'                        => ['post',    'tax-payments/',                                   'TaxPaymentController@create'                                       ],
        'tax_payments_get_by_id'                     => ['get',     'tax-payments/{id}',                               'TaxPaymentController@getTaxPayment'                                ],
        'tax_payments_mark_as_paid'                  => ['post',    'tax-payments/mark-as-paid',                       'TaxPaymentController@markAsPaid'                                   ],
        'tax_payments_challan_upload'                => ['post',    'tax-payments/upload-challan',                     'TaxPaymentController@uploadChallan'                                ],
        'tax_payments_update_challan_file_id'        => ['post',    'tax-payments/{id}/edit',                          'TaxPaymentController@updateChallanFileId'                          ],
        'tax_payments_edit'                          => ['patch',   'tax-payments/{id}',                               'TaxPaymentController@edit'                                         ],
        'tax_payments_cancel'                        => ['post',    'tax-payments/{id}/cancel',                        'TaxPaymentController@cancel'                                       ],
        'tax_payments_fetch_pending_gst'             => ['get',     'tax-payments/gst/fetch',                          'TaxPaymentController@fetchPendingGstPayments'                      ],
        'tax_payments_challan_download'              => ['post',    'tax-payments/challans/download',                  'TaxPaymentController@bulkChallanDownload'                          ],
        'tax_payments_internal_icici_action'         => ['post',    'tax-payments/internal/icici_actions',             'TaxPaymentController@internalIciciAction'                          ],


        // Direct Tax Payment
        'direct_tax_payments_tds_category_public'       => ['get',    'tax-payments/direct/tds-categories',               'TaxPaymentController@getTdsCategories'                            ],
        'direct_tax_payments_tds_category_opt'          => ['options','tax-payments/direct/tds-categories',               'TaxPaymentController@allowCors'                                   ],
        'direct_tax_payments_create'                    => ['post',   'tax-payments/direct',                              'TaxPaymentController@createDirectTaxPayment'                      ],
        'direct_tax_payments_create_options'            => ['options','tax-payments/direct',                              'TaxPaymentController@allowCors'                                   ],
        'direct_tax_payments_pg_webhook'                => ['post',   'tax-payments/direct/pg-webhook',                   'TaxPaymentController@webHookHandler'                              ],
        'direct_tax_payments_config'                    => ['get',    'tax-payments/direct/config',                       'TaxPaymentController@getDTPConfig'                                ],
        'direct_tax_payments_downtime_schedule_public'  => ['get',    'tax-payments/direct/downtime_schedule',            'TaxPaymentController@getDowntimeSchedulePublic'                   ],
        'direct_tax_payments_downtime_schedule_opt'     => ['options','tax-payments/direct/downtime_schedule',            'TaxPaymentController@allowCors'                                   ],

        // Payout Links
        'payout_links_get_signed_url'              => ['get',       'payout-links/{id}/file/{file_id}/get-signed-url', 'PayoutLinkController@getSignedUrl'                               ],
        'payout_links_upload_attachment'           => ['post',      'payout-links/attachment',                       'PayoutLinkController@uploadAttachment'                            ],
        'payout_links_update_attachments'          => ['patch',     'payout-links/{id}/attachments',                 'PayoutLinkController@updateAttachmentsForPayoutLink'               ],
        'payout_links_approve'                     => ['post',      'payout-links/{id}/approve',                     'PayoutLinkController@approvePayoutLink'                            ],
        'payout_links_approve_otp'                 => ['post',      'payout-links/{id}/approve/otp',                 'PayoutLinkController@approvePayoutLinkOtp'                         ],
        'payout_links_reject'                      => ['post',      'payout-links/{id}/reject',                      'PayoutLinkController@rejectPayoutLink'                             ],
        'payout_links_workflow_summary'            => ['get',       'payout-links/_meta/workflow/summary',           'PayoutLinkController@workflowSummary'                              ],
        'payout_links_bulk_approve'                => ['post',      'payout-links/approve/bulk',                     'PayoutLinkController@approveBulkPayoutLinks'                       ],
        'payout_links_bulk_approve_otp'            => ['post',      'payout-links/approve/bulk/otp',                 'PayoutLinkController@approveBulkPayoutLinksOtp'                    ],
        'payout_links_bulk_reject'                 => ['post',      'payout-links/reject/bulk',                      'PayoutLinkController@rejectBulkPayoutLinks'                        ],
        'payout_links_reminder_callback'           => ['post',      'payout-links/send-reminder-callback/{id}',      'PayoutLinkController@sendReminderCallback'                         ],
        'payout_links_expire_callback'             => ['post',      'payout-links/expire-callback/{id}',             'PayoutLinkController@expireCallback'                               ],
        'test_payout_links_expire_callback'        => ['post',      'payout-links/test/expire-callback/{id}',        'PayoutLinkController@expireCallbackTestMode'                       ],
        'payout_links_admin_auth_api'              => ['post',      'payout-links/admin',                            'PayoutLinkController@adminActions'                                 ],
        'payout_links_fetch_multiple'              => ['get',       'payout-links',                                  'PayoutLinkController@list'                                         ],
        'payout_links_fetch_by_id'                 => ['get',       'payout-links/{id}',                             'PayoutLinkController@get'                                          ],
        'payout_links_update'                      => ['patch',     'payout-links/{id}',                             'PayoutLinkController@update'                                          ],
        'payout_links_create'                      => ['post',      'payout-links',                                  'PayoutLinkController@create'                                       ],
        'payout_links_batch_process'               => ['post',      'payout-links/batch',                            'PayoutLinkController@processBatch'                                 ],
        'payout_links_expire_cron'                 => ['post',      'payout-links/expire-cron-job',                  'PayoutLinkController@expireCronjob'                                 ],
        'payout_links_batch_create'                => ['post',      'payout-links/batch-create',                     'PayoutLinkController@createBatch'                                  ],
        'payout_links_generate_end_user_otp'       => ['post',      'payout-links/{x_entity_id}'
                                                                     . '/generate-customer-otp',                     'PayoutLinkController@generateAndSendCustomerOtp'                   ],
        'payout_links_generate_end_user_otp_cors'  => ['options',   'payout-links/{x_entity_id}'
                                                                    . '/generate-customer-otp',                       'PayoutLinkController@allowCors'                                   ],
        'payout_links_verify_customer_otp'         => ['post',      'payout-links/{x_entity_id}'
                                                                     . '/verify-customer-otp',                        'PayoutLinkController@verifyCustomerOtp'                            ],
        'payout_links_verify_customer_otp_cors'    => ['options',      'payout-links/{x_entity_id}'
                                                                    . '/verify-customer-otp',                         'PayoutLinkController@allowCors'                                    ],
        'payout_links_cancel'                      => ['post',      'payout-links/{id}/cancel',                       'PayoutLinkController@cancel'                                       ],
        'payout_links_status'                      => ['get',       'payout-links/{x_entity_id}/status',              'PayoutLinkController@getStatus'                                    ],
        'payout_links_status_cors'                 => ['options',   'payout-links/{x_entity_id}/status',              'PayoutLinkController@allowCors'                                    ],
        'payout_update_pull_payout_status'         => ['post',      'payout-links/{id}/pullPayoutStatus',             'PayoutLinkController@pullPayoutStatus'                             ],
        'payout_links_bulk_resend_notification_admin' => ['post',   'payout-links/bulk-resend-notification',          'PayoutLinkController@bulkResendNotification'                       ],
        'payout_links_customer_hosted_page'        => ['get',       'payout-links/{x_entity_id}/view',                'PayoutLinkController@viewHostedPage'                               ],
        'payout_links_customer_hosted_page_data'   => ['get',       'payout-links/{x_entity_id}/view-data',           'PayoutLinkController@viewHostedPageData'                           ],
        'payout_links_shopify_app_install'         => ['get',       'payout-links/shopify/install',                   'PayoutLinkController@installShopifyApp'                            ],
        'payout_links_shopify_app_uninstall'       => ['post',      'payout-links/shopify/uninstall',                 'PayoutLinkController@uninstallShopifyApp'                          ],
        'payout_links_shopify_app_customers'
         . '_redact'                               => ['post',      'payout-links/shopify/customers/redact',          'PayoutLinkController@shopifyCustomerRedact'                        ],
        'payout_links_shopify_app_shop_redact'     => ['post',      'payout-links/shopify/shop/redact',               'PayoutLinkController@shopifyShopRedact'                            ],
        'payout_links_shopify_customers_data'
         . '_request'                              => ['post',      'payout-links/shopify/customers/data_request',    'PayoutLinkController@shopifyCustomerDataRequest'                   ],
        'payout_links_integrate_app'               => ['post',      'payout-links/integrate-app',                     'PayoutLinkController@integrateApp'                                 ],
        'payout_links_fetch_shopify_order'         => ['get',       'payout-links/shopify/orders',                    'PayoutLinkController@fetchShopifyOrderDetails'                     ],
        'payout_links_integration_details'         => ['get',       'payout-links/_meta/integration-details',          'PayoutLinkController@integrationDetails'                      ],
        // Below is a POST request, for reasons listed in the Controller
        'payout_links_added_fund_accounts'         => ['post',      'payout-links/{x_entity_id}/fund-accounts',       'PayoutLinkController@getFundAccountsOfContact'                     ],
        'payout_links_added_fund_accounts_cors'    => ['options',   'payout-links/{x_entity_id}/fund-accounts',       'PayoutLinkController@allowCors'                                    ],
        'payout_links_initiate'                    => ['post',      'payout-links/{x_entity_id}/initiate',            'PayoutLinkController@initiate'                                     ],
        'payout_links_initiate_cors'               => ['options',   'payout-links/{x_entity_id}/initiate',            'PayoutLinkController@allowCors'                                    ],
        'payout_links_settings_post'               => ['post',      'payout-links/{merchantId}/settings',             'PayoutLinkController@updateSettings'                               ],
        'payout_links_settings_get'                => ['get',       'payout-links/{merchantId}/settings',             'PayoutLinkController@getSettings'                                  ],
        'payout_links_send_email'                  => ['post',      'payout-links/send-email',                        'PayoutLinkController@sendEmailInternal'                                 ],
        'payout_links_send_demo_email'             => ['post',      'payout-links/demo/send-email',                   'PayoutLinkController@sendDemoEmailInternal'                        ],
        'payout_links_merchant_settings_get'       => ['get',       'payout-links/merchant/dashboardsettings',        'PayoutLinkController@getSettings'                                  ],
        'payout_links_merchant_settings_post'      => ['post',      'payout-links/merchant/dashboardsettings',        'PayoutLinkController@updateSettings'                               ],
        'payout_links_merchant_on_boarding_status' => ['get',       'payout-links/_meta/onboarding',                  'PayoutLinkController@onBoardingStatus'                             ],
        'payout_links_merchant_summary'            => ['get',       'payout-links/_meta/summary',                     'PayoutLinkController@summary'                                      ],
        'payout_links_resend_notification'         => ['post',      'payout-links/{id}/resend',                       'PayoutLinkController@resendNotification'                           ],
        'payout_links_batch_summary'               => ['get',       'payout-links/batch/summary/{id}',                'PayoutLinkController@getBatchSummary'                              ],

        'payout_links_create_demo'                 => ['post',      'demo/payout-links',                              'PayoutLinkController@createDemo'                                   ],
        'payout_links_create_demo_cors'            => ['options',   'demo/payout-links',                              'PayoutLinkController@allowCorsFE'                                  ],
        'payout_links_generate_end_user_otp_demo'  => ['post',      'demo/payout-links/{x_entity_id}'
                                                                     . '/generate-customer-otp',                      'PayoutLinkController@generateAndSendCustomerOtpDemo'               ],
        'payout_links_generate_end_user_otp_demo'
                                          .'_cors' => ['options',   'demo/payout-links/{x_entity_id}'
                                                                     . '/generate-customer-otp',                      'PayoutLinkController@allowCors'                                    ],
        'payout_links_verify_customer_otp_demo'    => ['post',      'demo/payout-links/{x_entity_id}'
                                                                     . '/verify-customer-otp',                        'PayoutLinkController@verifyCustomerOtpDemo'                        ],
        'payout_links_verify_customer_otp_demo'
                                          .'_cors' => ['options',   'demo/payout-links/{x_entity_id}'
                                                                     . '/verify-customer-otp',                         'PayoutLinkController@allowCors'                                   ],
        'payout_links_customer_hosted_page_demo'   => ['get',       'demo/payout-links/{x_entity_id}/view',            'PayoutLinkController@viewDemoHostedPage'                          ],
        'payout_links_customer_hosted_page_demo_data' => ['get',       'demo/payout-links/{x_entity_id}/view-data',    'PayoutLinkController@viewDemoHostedPageData'                      ],
        'payout_links_initiate_demo'               => ['post',      'demo/payout-links/{x_entity_id}/initiate',        'PayoutLinkController@initiateDemo'                                ],
        'payout_links_initiate_demo_cors'          => ['options',   'demo/payout-links/{x_entity_id}/initiate',        'PayoutLinkController@allowCors'                                   ],
        'payout_cancel'                            => ['post',      'payouts/{id}/cancel',                            'PayoutController@cancelPayout'                                     ],
        'payout_cancel_internal'                   => ['post',      'payouts_internal/{id}/cancel',                   'PayoutController@cancelPayout'                                     ],
        'payout_update_status'                     => ['patch',    'payouts/{id}/status',                            'PayoutController@updateTestPayoutStatus'                           ],
        'fee_recovery_payout_admin'                => ['post',     'payouts/fee_recovery',                           'FeeRecoveryController@createRecoveryPayout'                        ],
        'fee_recovery_payout_process'              => ['post',     'payouts/fee_recovery/process',                   'FeeRecoveryController@processRecoveryPayout'                       ],
        'fee_recovery_payout_schedule_task'        => ['post',     'schedules/tasks/fee_recovery',                   'ScheduleController@createFeeRecoveryScheduleTask'                  ],
        'fee_recovery_manual_update'               => ['post',     'payouts/fee_recovery/manual',                    'FeeRecoveryController@postManualRecovery'                          ],
        'fee_recovery_payout_manual_retry'         => ['post',     'payouts/fee_recovery_retry/manual',              'FeeRecoveryController@createRecoveryRetryPayoutManually'                        ],

        // Route APIs
        'transfer_fetch'                           => ['get',      'transfers/{id}',                                 'TransferController@getTransfer'                                    ],
        'transfer_fetch_multiple'                  => ['get',      'transfers/',                                     'TransferController@getTransfers'                                   ],
        'transfer_edit'                            => ['patch',    'transfers/{id}',                                 'TransferController@patchTransfer'                                  ],
        'transfer_create'                          => ['post',     'transfers',                                      'TransferController@postTransfer'                                   ],
        'transfer_create_reversal'                 => ['post',     'transfers/{id}/reversals',                       'TransferController@postTransferReversal'                           ],
        'transfer_create_reversal_batch'           => ['post',     'transfers/{id}/reversals/batch',                 'TransferController@createTransferReversalFromBatch'                ],
        'transfer_fetch_reversals'                 => ['get',      'transfers/{id}/reversals',                       'TransferController@getTransferReversals'                           ],
        'reversal_fetch'                           => ['get',      'reversals/{id}',                                 'ReversalController@getReversal'                                    ],
        'reversal_fetch_multiple'                  => ['get',      'reversals',                                      'ReversalController@getReversals'                                   ],
        'transfer_debug'                           => ['post',     'transfer_debug',                                 'TransferController@debugRoute'                                     ],
        'payment_transfer_retry_batch'             => ['post',     'payment_transfers/{id}/retry',                   'TransferController@retryPaymentTransfer'                           ],

        // Route cron APIs
        'order_transfer_process_pending'                    => ['post',     'order_transfers/process_pending',                  'TransferController@processPendingOrderTransfers'                   ],
        'order_transfer_process_pending_key_merchants'      => ['post',     'order_transfers/process_pending/key_merchants',    'TransferController@processPendingOrderTransfersForKeyMerchants'    ],
        'order_transfer_process_failed'                     => ['post',     'order_transfers/process_failed',                   'TransferController@processFailedOrderTransfers'                    ],
        'payment_transfer_process_pending'                  => ['post',     'payment_transfers/process_pending',                'TransferController@processPendingPaymentTransfers'                 ],
        'payment_transfer_process_pending_key_merchants'    => ['post',     'payment_transfers/process_pending/key_merchants',  'TransferController@processPendingPaymentTransfersForKeyMerchants'  ],

        'payment_update_on_hold'                   => ['post',     'payments/on_hold/update',                        'PaymentController@updateOnHold'                                    ],
        'payment_on_hold_bulk_update'              => ['post',     'payments/on_hold/bulk_update',                   'PaymentController@updateOnHoldBulkUpdate'                          ],

        // Dummy routes to test Account Auth
        'admin_dummy_account_test'                 => ['get',      '/dummy/admin',                                   'MerchantController@getDummyAccount'                                ],

        // Linked Account Routes
        'transfer_fetch_reversals_la'              => ['get',      'la-transfers/{id}/reversals',                    'TransferController@getLinkedAccountTransferReversals'              ],
        'reversal_fetch_multiple_la'               => ['get',      'la-reversals',                                   'ReversalController@getLinkedAccountReversals'                      ],
        'reversal_fetch_la'                        => ['get',      'la-reversals/{id}',                              'ReversalController@getLinkedAccountReversal'                       ],
        'transfer_fetch_multiple_la'               => ['get',      'la-transfers',                                   'TransferController@getLinkedAccountTransfers'                      ],
        'transfer_fetch_payment_la'                => ['get',      'la-transfers/payment/{id}',                      'TransferController@getPaymentIdForLinkedAccountTransfer'           ],
        'transfer_fetch_la'                        => ['get',      'la-transfers/{id}',                              'TransferController@getLinkedAccountTransfer'                       ],
        'la_transfer_create_reversal'              => ['post',     'la-transfers/{id}/reversal' ,                    'TransferController@postLinkedAccountTransferReversal'              ],
        'la_fetch'                                 => ['get',      'linked_accounts',                                'AccountController@listLinkedAccounts'                              ],
        'merchant_la_fetch'                        => ['get',      'merchants/{id}/linked_accounts',                 'AccountController@fetchLinkedAccountsForMerchant'                              ],
        'admin_merchant_la_fetch'                  => ['get',      'admin/merchants/{id}/linked_accounts',           'AccountController@fetchLinkedAccountsForMerchant'                  ],
        'linked_account_create_batch'              => ['post',     'linked_accounts/batch',                          'MerchantController@createLinkedAccount'                            ],
        'linked_account_update_bank_account'       => ['patch',    'beta/accounts/{id}/bank_account',                'MerchantController@updateLinkedAccountBankAccount'                 ],
        'linked_account_reference_data_create'     => ['post',     'la_reference_data',                              'AccountController@createLinkedAccountReferenceData'                ],
        'linked_account_reference_data_update'     => ['patch',    'la_reference_data/{id}',                         'AccountController@updateLinkedAccountReferenceData'                ],
        'amc_linked_account_create'                => ['post',     'la_amc',                                         'AccountController@createAMCLinkedAccountViaAdmin'                  ],
        'transfer_settlement_status_update'        => ['patch',    'transfers/settlement_status',                    'TransferController@updateSettlementStatusInTransfer'               ],

        'user_register'                            => ['post',     'users/register',                                 'UserController@registerUser'                                       ],
        'user_otp_register'                        => ['post',     'users/register/otp',                             'UserController@registerUserWithOtp'                                ],
        'verify_user_otp_register'                 => ['post',     'users/register/otp/verify',                      'UserController@verifySignupOtpAndRegisterUser'                     ],
        'send_salesforce_user_otp'                 => ['post',     'users/salesforce/otp',                           'UserController@sendOtpSalesforceUser'                              ],
        'verify_salesforce_user_otp'               => ['post',     'users/salesforce/otp/verify',                    'UserController@verifyOtpSalesforceUser'                            ],

        'user_merchant_upgrade'                    => ['post',     'users/upgrade-merchant',                         'UserController@postUpgradeUserToMerchant'                          ],
        'user_resend_verification'                 => ['post',     'users/resend-verification',                      'UserController@postResendVerificationMail'                         ],
        'user_resend_verification_otp'             => ['post',     'users/resend-verification-otp',                  'UserController@postResendVerificationOtp'                          ],
        'co_created_reset_password_admin'          => ['post',     'users/co_created/reset-password',                'UserController@postResetPasswordByEmailForCoCreated'               ],
        'user_reset_password_create'               => ['post',     'users/reset-password',                           'UserController@postResetPassword'                                  ],
        'user_reset_password_token'                => ['post',     'users/reset-password-token',                     'UserController@postChangePasswordByToken'                          ],
        'user_oauth_login'                         => ['post',     'users/oauth-login',                              'UserController@oAuthLogin'                                         ],
        'user_oauth_register'                      => ['post',     'users/oauth-register',                           'UserController@oAuthSignup'                                        ],
        'user_create'                              => ['post',     'users',                                          'UserController@createUser'                                         ],
        'user_login'                               => ['post',     'users/login',                                    'UserController@loginUser'                                          ],
        'user_mobile_oauth_refresh_token'          => ['post',     'users/mobile_oauth/refresh_token',               'UserController@mobileOauthRefreshToken'                            ],
        'user_mobile_oauth_logout'                 => ['post',     'users/mobile_oauth/logout',                      'UserController@mobileOauthLogout'                                  ],
        'user_otp_login'                           => ['post',     'users/login/otp',                                'UserController@loginUserWithOtp'                                   ],
        'verify_user_otp_login'                    => ['post',     'users/login/otp/verify',                         'UserController@verifyLoginOtp'                                     ],
        'user_otp_login_2fa_password'              => ['post',     'users/login/otp/2fa',                            'UserController@loginOtp2faPassword'                                ],
        'send_verification_otp'                    => ['post',     'users/login/verification-otp',                   'UserController@sendVerificationOtp'                                ],
        'verify_verification_otp'                  => ['post',     'users/login/verification-otp/verify',            'UserController@verifyVerificationOtp'                              ],
        'user_confirm_by_data'                     => ['put',      'users/confirm_user_by_data',                     'UserController@confirmUserByData'                                  ],
        'user_change_password'                     => ['put',      'users/password',                                 'UserController@changeUserPassword'                                 ],
        'user_check_has_set_password'              => ['get',      'users/set/password',                             'UserController@getCheckUserHasSetPassword'                         ],
        'user_set_password'                        => ['post',     'users/set/password',                             'UserController@postSetUserPassword'                                ],
        'user_patch_password'                      => ['patch',    'users/password',                                 'UserController@postPatchUserPassword'                              ],
        'user_edit_self'                           => ['patch',    'users',                                          'UserController@editSelf'                                           ],
        'user_salesforce_event'                    => ['post',     'users/salesforce_event',                         'UserController@sendUserDetailsToSalesForceEvent'                   ],
        'user_update_name'                         => ['post',     'users/update_name',                              'UserController@postUpdateUserName'                                 ],

        // Fetch user via OAuth (Private Auth)
        'user_fetch'                               => ['get',      'users/{id}',                                     'UserController@getUser'                                            ],
        'user_fetch_internal'                      => ['get',      'users_internal/{id}',                            'UserController@getUser'                                            ],
        'user_fetch_entity'                        => ['get',      'users_entity/{id}',                              'UserController@getUserEntity'                                      ],
        'user_access'                              => ['get',      'users/access',                                   'UserController@checkUserAccess'                                    ],
        'switch_merchant_token'                    => ['post',     'users/switch_merchant_token',                    'UserController@switchMerchantWithToken'                            ],
        'user_verify_second_factor_auth'           => ['post',     'users/2fa/verify',                               'UserController@verifyUserSecondFactorAuth'                         ],
        'user_resend_otp_2fa'                      => ['post',     'users/2fa/otp_resend',                           'UserController@resendOtp'                                          ],
        'user_trigger_2fa_otp'                     => ['post',     'users/2fa',                                      'UserController@send2faOtp'                                         ],
        'user_opt_in_whatsapp'                     => ['post',     'users/whatsapp/opt_in',                          'UserController@optInForWhatsapp'                                   ],
        'user_opt_in_status_whatsapp'              => ['get',      'users/whatsapp/opt_in_status',                   'UserController@optInStatusForWhatsapp'                             ],
        'user_opt_out_whatsapp'                    => ['post',     'users/whatsapp/opt_out',                         'UserController@optOutForWhatsapp'                                  ],
        'user_details'                             => ['get',      'users',                                          'UserController@getUserDetails'                                     ],
        'user_details_unified'                     => ['get',      'users_unified',                                  'UserController@getUserDetailsUnified'                              ],
        'user_all_roles'                           => ['get',      'users/{id}/roles/{merchant_id}',                 'UserController@getUserRoles'                                       ],
        'user_delete_incorrect_password_count'     => ['post',     'users/incorrect_password_count',                 'UserController@removeIncorrectPasswordCount'                       ],
        'user_fetch_by_verified_contact_internal'  => ['post',     'users_internal/fetch_by_verified_contact',       'UserController@getUserByVerifiedContact'                           ],

        //b2b flow
        'create_international_virtual_accounts'             => ['post',     'international/virtual_accounts',                 'BankTransferController@createAccountForCurrencyCloud'          ],
        'fetch_international_virtual_accounts'              => ['get',      'international/virtual_accounts',                 'MerchantController@getInternationalVirtualAccounts'            ],
        'fetch_international_virtual_account_by_vacurrency' => ['get',      'international/virtual_account/{va_currency}',   'MerchantController@getInternationalVirtualAccountByVACurrency' ],
        'payment_update_b2b_invoice'                        => ['patch',    'payment/{id}/update_b2b_invoice_details',        'PaymentController@updateB2BInvoiceDetails'                     ],
        'b2b_invoice_collect_address'                       => ['put',      'b2b-exports/{payment_id}/address',        'BankTransferController@createAddressEntityForB2B' ],
        'b2b_invoice_show_address'                          => ['get',      'b2b-exports/{payment_id}/address',        'BankTransferController@getAddressEntityForB2B' ],
        'b2b_send_notification'                             => ['post',     'b2b-exports/notification',                'BankTransferController@sendNotificationForB2B' ],

        'cb_invoice_workflow_callback'                      => ['post',     'internal/cb-invoice-workflow/callback',           'BankTransferController@cbInvoiceWorkflowCallback'],

        'capture_cron_for_b2b_payments'        => ['post',     'b2b/payments/capture',                              'BankTransferController@captureCronForB2BPayments'                   ],
        'notifications_for_b2b'                => ['post',     'international/virtual_accounts/payment/create',     'BankTransferController@notificationsFromCurrencyCloud'                         ],
        'settlement_cron_for_b2b_payments'     => ['post',     'b2b/payments/settlement',                           'BankTransferController@settlementFromCurrencyCloud'                               ],

        //Global Bank account solution

        'fetch_balance_international_virtual_account'       => ['get',     'international/virtual_accounts/balance/{va_currency}',         'BankTransferController@getBalanceForMerchantVA'          ],
        'payout_international_virtual_account'              => ['post',     'international/virtual_accounts/payout',                        'BankTransferController@merchantPayoutFromVAToBeneficiary'],
        'fetch_all_payouts_international_virtual_account'  => ['get',       'international/virtual_accounts/payout',                       'BankTransferController@fetchAllPayoutsForIntlVA'],
        'create_beneficiary_for_international_payout'       => ['post',    'merchant/{id}/international/virtual_accounts/beneficiary',              'BankTransferController@createBeneficiaryForMerchantInCC'],
        'get_beneficiary_details_for_international_payout'  => ['get',    'international/virtual_accounts/beneficiary',              'BankTransferController@getBeneficiaryDetailsForMerchantPayout'],
        'get_beneficiary_details_for_international_payout_admin'  => ['get',    'merchant/{id}/international/virtual_accounts/beneficiary',              'BankTransferController@getBeneficiaryDetailsForMerchantPayoutAdmin'],

        //actor info
        'fetch_actor_info_internal'                => ['get',      'actor_info_internal/{user_id}',                  'UserController@getActorInfo'                                       ],

        //user device details
        'user_device_detail_save'                  => ['post',     'user/device-details',                            'UserController@postSaveDeviceDetails'                              ],

        // mobile setup for 2fa
        'user_login_2fa_setup_mobile'              => ['patch',    'users/2fa_setup/contact_mobile',                 'UserController@setup2faContactMobile'                              ],
        'user_login_2fa_setup_verify_mobile'       => ['post',     'users/login/2fa_setup/verify-mobile',            'UserController@setup2faVerifyMobileOnLogin'                        ],

        // Same as user_fetch but for admin
        'user_fetch_admin'                         => ['get',      'users-admin/{id}',                               'UserController@getUser'                                            ],
        // The order of the following routes is important. The one with action should be last
        'user_otp_create'                          => ['post',     'users/otp/send',                                 'UserController@sendOtp'                                            ],
        'user_verify_contact'                      => ['post',     'users/verify_contact',                           'UserController@verifyContactWithOtp'                               ],
        'user_verify_email'                        => ['post',     'users/verify_email',                             'UserController@verifyEmailWithOtp'                                 ],
        'user_confirm'                             => ['put',      'users/{id}/confirm',                             'UserController@confirmUser'                                        ],
        'user_account_unlock'                      => ['put',      'users/account/{id}/{action}',                    'UserController@accountLockUnlock'                                  ],
        'user_merchant_mapping_action'             => ['put',      'users/{id}/{action}',                            'UserController@updateUserMaping'                                   ],
        'user_roles_mapping_bulk'                  => ['put',      'users/roles-mapping/bulk',                       'UserController@bulkUpdateUserMapping'                              ],
        'user_send_x_mobile_app_link'              => ['post',     'users/mobile_app_link',                          'UserController@sendXMobileAppDownloadLinkSms'                      ],

        'change_banking_user_role'                 => ['patch',    'users/role',                                     'UserController@changeBankingUserRole'                              ],

        //user change his/her 2fa setting
        'user_2fa_change_setting'                  => ['patch',    'users/2fa',                                      'UserController@change2faSetting'                                   ],
        'merchant_2fa_change_setting'              => ['patch',    'merchants/2fa',                                  'MerchantController@change2faSetting'                               ],
        'merchant_restrict'                        => ['patch',    'merchant/restrict',                              'MerchantController@applyRestrictedSettings'                        ],
        'user_update_contact'                      => ['patch',    'users/contact/update',                           'UserController@editContactMobile'                                  ],
        'user_verify_through_mode'                 => ['post',     'users/verify/mode/{type}',                       'UserController@verifyUserThroughMode'                              ],
        'user_contact_update_sent_otp'             => ['post',     'users/contact/sendotp',                          'UserController@postSendOtpForContactMobileUpdate'                  ],
        'user_verify_and_update_mobile_otp'        => ['post',     'users/verify/update/new/mobile',                 'UserController@verifyOtpAndUpdateContactMobile'                    ],
        'user_update_contact_admin'                => ['patch',    'users-admin/contact',                            'UserController@updateContactMobile'                                ],
        'user_update_contact_merchant'             => ['patch',    'users/contact',                                  'UserController@updateContactMobile'                                ],
        'user_account_lock_unlock_admin'           => ['put',      'users-admin/account/{id}/{action}',              'UserController@accountLockUnlock'                                  ],
        'user_verify_contact_batch'                => ['post',     'users-admin/contact/verify',                     'UserController@verifyContactMobile'                                ],
        'otp_create'                               => ['post',     'otp/send',                                       'UserController@sendOtpWithContact'                                 ],
        'user_otp_verify'                          => ['post',     'users/verify_otp',                               'UserController@verifyOtpWithToken'                                 ],

        // add email from profile section
        'user_add_email'                          => ['post',       'users/email/update',                            'UserController@sendOtpForAddEmail'                                 ],
        'user_add_email_verify'                   => ['post',       'users/email/update/verify',                     'UserController@verifyOtpForAddEmail'                               ],

        'merchant_ids_fetch_for_user_contact'      => ['get',       'internal/merchant/fetch_for_user_contact/{contact}', 'UserController@fetchMerchantIdsForUserContact'                ],
        'user_fetch_primary_user_contact'          => ['get',       'internal/merchant/fetch_primary_user_contact/{merchantId}', 'UserController@fetchPrimaryUserContact'                ],

        'user_fetch_for_merchant'                  => ['get',      'users/fetch_for_merchant/{id}',                  'UserController@getUserForMerchant'                                 ],
        'update_submerchant_user_contact'          => ['put',      'submerchant/user/contact_no',                     'UserController@updateContactNumberForSubMerchantUser'],

        // Tax groups and taxes
        'tax_get_meta_gst_taxes'                   => ['get',      'taxes/meta/gst_taxes',                           'TaxController@getMetaGstTaxes'                                     ],
        'tax_get_meta_states'                      => ['get',      'taxes/meta/states',                              'TaxController@getMetaStates'                                       ],
        'tax_get'                                  => ['get',      'taxes/{id}',                                     'TaxController@get'                                                 ],
        'tax_list'                                 => ['get',      'taxes',                                          'TaxController@list'                                                ],
        'tax_create'                               => ['post',     'taxes',                                          'TaxController@create'                                              ],
        'tax_update'                               => ['patch',    'taxes/{id}',                                     'TaxController@update'                                              ],
        'tax_delete'                               => ['delete',   'taxes/{id}',                                     'TaxController@delete'                                              ],
        'tax_group_get'                            => ['get',      'tax_groups/{id}',                                'TaxGroupController@get'                                            ],
        'tax_group_list'                           => ['get',      'tax_groups',                                     'TaxGroupController@list'                                           ],
        'tax_group_create'                         => ['post',     'tax_groups',                                     'TaxGroupController@create'                                         ],
        'tax_group_update'                         => ['patch',    'tax_groups/{id}',                                'TaxGroupController@update'                                         ],
        'tax_group_delete'                         => ['delete',   'tax_groups/{id}',                                'TaxGroupController@delete'                                         ],

        // Promotion routes
        'promotion_create'                         => ['post',     'promotions',                                     'PromotionController@create'                                        ],
        'promotion_create_for_event'               => ['post',     'event_promotions',                               'PromotionController@createPromotionForEvent'                       ],
        'promotion_update'                         => ['patch',    'promotions/{id}',                                'PromotionController@update'                                        ],
        'promotion_deactivate'                     => ['patch',    'promotions/{id}/deactivate',                     'PromotionController@deactivatePromotion'                           ],

        // Coupon routes
        'coupon_create'                            => ['post',     'coupons',                                        'CouponController@create'                                           ],
        'coupon_expiry_alert'                      => ['post',      'coupons/alert',                                  'CouponController@sendAlert'                                           ],
        'coupon_apply'                             => ['post',     'coupons/apply',                                  'CouponController@apply'                                            ],
        'coupon_delete'                            => ['delete',   'coupons/{id}',                                   'CouponController@delete'                                           ],
        'coupon_update'                            => ['patch',    'coupons/{id}',                                   'CouponController@update'                                           ],
        'coupon_validate'                          => ['post',     'coupons/validate',                               'CouponController@validateCoupon'                                   ],

        // Merchant invitation routes
        'invitation_create'                        => ['post',     'invitations',                                    'InvitationController@create'                                       ],
        'invitation_fetch_by_token'                => ['get',      'invitations/token/{token}',                      'InvitationController@fetchByToken'                                 ],
        'invitation_fetch'                         => ['get',      'invitations',                                    'InvitationController@list'                                         ],
        'invitation_resend'                        => ['put',      'invitations/{id}/resend',                        'InvitationController@postResend'                                   ],
        'invitation_edit'                          => ['patch',    'invitations/{id}',                               'InvitationController@edit'                                         ],
        'invitation_delete'                        => ['delete',   'invitations/{id}',                               'InvitationController@delete'                                       ],
        'invitation_action'                        => ['post',     'invitations/{id}/{action}',                      'InvitationController@postAction'                                   ],
        'migrate_tokens_to_gateway_tokens'         => ['post',     'tokens/migrate/gateway_tokens',                  'CustomerController@postMigrateToGatewayTokens'                     ],

        // X Accounting Integration invitation routes
        'accounting_integrations_invite_resend'    => ['put',      'accounting-integrations-invite/resend',          'InvitationController@resendXAccountingIntegrationInvites'          ],

        //Draft invitation Links
        'banking_axis_invitations_send'            => ['post',     'banking_axis_invitations',                        'InvitationController@sendAxisInvitations'                         ],
        'draft_invitation_fetch'                   => ['get',      'banking_axis_invitations',                        'InvitationController@listDraftInvitations'                          ],
        'draft_invitation_accept'                  => ['put',      'draft_invitations/accept',                        'InvitationController@acceptDraftInvitations'                        ],

        //Vendor portal invitation
        'invite_to_vendor_portal'                  => ['post',     'vendor_portal_invitation',                        'InvitationController@createVendorPortalInvitation'                  ],
        'resend_invite_to_vendor_portal'           => ['post',     'resend_vendor_portal_invitation',                 'InvitationController@resendVendorPortalInvitation'                  ],

        // Risk Routes
        'customer_flagging_entity_details'         => ['get',      'customer_flagging/entity_details/{id}',          'RiskController@getEntityDetails'                                   ],
        'customer_flagging_post_grievance'         => ['post',     'customer_flagging/post_customer_grievance',      'RiskController@postCustomerGrievance'                              ],
        'customer_flagging_post_grievance_options' => ['options',  'customer_flagging/post_customer_grievance',      'RiskController@allowCors'                                          ],
        'toggle_whatsapp_notifications'            => ['post',     'admin/toggle_whatsapp_notification/{id}',        'AdminController@toggleWhatsappNotification'                        ],

        // media service routes
        'media_service_upload_file'             => ['post',      'mediaservice/upload/file',    'MediaServiceController@postUploadFile'],
        'media_service_get_bucket'              => ['get',       'mediaservice/buckets',        'MediaServiceController@getBuckets'],
        'media_service_upload_process'          => ['post',      'mediaservice/upload/process', 'MediaServiceController@postUploadProcess'],


        //PurposeCode Merchant Routes
        'purpose_code_fetch'                       => ['get',      'purposecode',                                    'MerchantController@getPurposeCodeDetails'                          ],
        'merchant_patch_purpose_code'              => ['patch',    'merchants/purpose/code',                         'MerchantController@patchMerchantPurposeCode'                       ],
        'user_fetch_purpose_code'                  => ['get',      'users/purpose/code',                             'UserController@getInternationalUserDetails'                                     ],

        //PurposeCode Admin Routes
        'purpose_code_admin'                       => ['get',      'purpose/code',                                    'MerchantController@getPurposeCodeDetails'],
        'admin_patch_purpose_code'                 => ['patch',    'purpose/code',                                    'MerchantController@patchAdminPurposeCode'],

        // HS Code routes
        'hs_code_fetch'                            => ['get',      'merchant/hscode',                                    'MerchantController@getHsCodeDetails'                          ],
        'merchant_patch_hs_code'                   => ['patch',    'merchant/hscode',                         'MerchantController@patchHsCode'                       ],
        'fetch_hs_code'                            => ['get',      'merchant/hs/code',                             'MerchantController@getMerchantHsCode'                                     ],

        'hs_code_admin_fetch'                      => ['get',      'hscode',                                    'MerchantController@getHsCodeDetails'                          ],
        'admin_patch_hs_code'                      => ['patch',    'hscode',                                    'MerchantController@patchHsCode'],
        'fetch_admin_hs_code'                      => ['get',      'merchant/{id}/hs/code',                             'MerchantController@getAdminMerchantHsCode'                                     ],
        'payment_update_merchant_document'         => ['patch',    'payment/{id}/update_merchant_doc',        'PaymentController@updateMerchantDocumentForPayment'                     ],
        'payment_bulk_update_merchant_document'    => ['post',     'payment/merchant_documents',        'PaymentController@uploadPaymentSupportingDocument'                     ],
        'merchant_invoice_reminder'                => ['post',     'merchant/invoice/reminder',        'MerchantController@sendInvoiceRemindersForInternationalIntegration'                     ],
        'process_on_hold_transactions_for_import'  => ['post',     'import/transactions/onhold/clear',  'SettlementController@onholdClearForImportFlow'                                  ],
        'generate_settlement_file_opgsp_import'    => ['post',     'settlements/import/generate',  'SettlementController@sendIciciOpgspImportSettlementFile'                                  ],
        'send_opgsp_import_invoices'               => ['post',     'import/invoices/send',  'SettlementController@sendIciciOpgspImportInvoices'                                  ],


        //Location Route
        'country_fetch'                            => ['get',      'countries',                                       'LocationController@getCountryDetails'                              ],
        'state_fetch'                              => ['get',      'states/{id}',                                     'LocationController@getstateDetailsFromCountryCode'                              ],
        'state_fetch_internal'                     => ['get',      'states/{id}/internal',                               'LocationController@getstateDetailsFromCountryCode'                              ],

        //FIRS Document Route
        'firs_document_categorize'                 => ['post',      'merchant/firs',                                 'LambdaController@processLambdaFIRS'                                ],
        'firs_document_fetch'                      => ['get',       'merchant/firs',                                 'DocumentController@fetchFIRSDocuments'                             ],
        'firs_document_download'                   => ['get',       'merchant/firs/content',                         'DocumentController@DownloadFIRSDocuments'                          ],
        'firs_collect_and_zip_cron'                => ['post',      'merchant/firs/collect/cron',                    'DocumentController@collectAndZipFIRSDocuments'                 ],

        'automate_merchant_master_firs'            => ['post',      'rbl/update_merchant_master/firs',               'LambdaController@processLambdaMerchantMasterFIRS'                  ],
        // Non 3ds card processing self serve
        'merchant_features_edit'                   => ['post',     'merchant/features/update',                          'MerchantController@addOrRemoveFeaturesForMerchant'                         ],

        'enable_non_3ds_self_serve'                => ['post',     'merchant/enable_non_3ds',                           'MerchantController@postEnableNon3dsSelfServe' ],
        'get_non_3ds_details'                      => ['get',      'merchant/get_non_3ds_details',                           'MerchantController@getEnableNon3dsDetails'],

        // Settlement Repatriation
        'process_settlement_repatriation'          => ['post',      'settlements/nium/repat',               'LambdaController@processLambdaSettlementRepatriation'                  ],

        'process_opgsp_settlement_repatriation'          => ['post', 'settlements/opgsp/repat',       'LambdaController@processLambdaOpgspSettlementRepatriation'                  ],

        //cyber-helpdesk admin route
        'cyber_helpdesk_admin_upload_document' => [
            'post',
            'cyber_helpdesk/document',
            'CyberCrimeHelpDeskController@proxyRequest'
        ],

        'cyber_helpdesk_admin_delete_document' => [
            'delete',
            'cyber_helpdesk/document/{file_id}',
            'CyberCrimeHelpDeskController@proxyRequest'
        ],

        'cyber_helpdesk_admin_create_ticket' => [
            'post',
            'cyber_helpdesk/ticket',
            'CyberCrimeHelpDeskController@proxyRequest'
        ],

        // Shield routes
        'shield_rules_get_multiple' => [
            'get',
            'shield/merchants/{merchant_id}/rules',
            'ShieldController@proxyRequest'
        ],
        'shield_rules_get'          => [
            'get',
            'shield/merchants/{merchant_id}/rules/{rule_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_rules_create'       => [
            'post',
            'shield/merchants/{merchant_id}/rules',
            'ShieldController@proxyRequest'
        ],
        'shield_rules_update'       => [
            'put',
            'shield/merchants/{merchant_id}/rules/{rule_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_rules_delete'       => [
            'delete',
            'shield/merchants/{merchant_id}/rules/{rule_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_lists_get_multiple' => [
            'get',
            'shield/merchants/{merchant_id}/lists',
            'ShieldController@proxyRequest'
        ],
        'shield_lists_get'          => [
            'get',
            'shield/merchants/{merchant_id}/lists/{list_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_lists_create'       => [
            'post',
            'shield/merchants/{merchant_id}/lists',
            'ShieldController@proxyRequest'
        ],
        'shield_lists_delete'       => [
            'delete',
            'shield/merchants/{merchant_id}/lists/{list_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_list_items_get_multiple' => [
            'get',
            'shield/merchants/{merchant_id}/lists/{list_id}/list_items',
            'ShieldController@proxyRequest'
        ],
        'shield_list_items_get'          => [
            'get',
            'shield/merchants/{merchant_id}/lists/{list_id}/list_items/{list_item_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_list_items_add_multiple' => [
            'post',
            'shield/merchants/{merchant_id}/lists/{list_id}/list_items',
            'ShieldController@proxyRequest'
        ],
        'shield_list_items_purge'        => [
            'delete',
            'shield/merchants/{merchant_id}/lists/{list_id}/list_items',
            'ShieldController@proxyRequest'
        ],
        'shield_list_items_delete'       => [
            'delete',
            'shield/merchants/{merchant_id}/lists/{list_id}/list_items/{list_item_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_settings_ui' => [
            'get',
            'shield/settings/ui',
            'ShieldController@proxyRequest'
        ],
        'shield_risk_threshold_config_get_multiple' => [
            'get',
            'shield/risk/threshold/configs',
            'ShieldController@proxyRequest'
        ],
        'shield_risk_threshold_config_get' => [
            'get',
            'shield/risk/threshold/configs/{config_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_risk_threshold_config_create' => [
            'post',
            'shield/risk/threshold/configs',
            'ShieldController@proxyRequest'
        ],
        'shield_risk_threshold_config_update' => [
            'put',
            'shield/risk/threshold/configs/{config_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_risk_threshold_config_delete' => [
            'delete',
            'shield/risk/threshold/configs/{config_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_get_multiple' => [
            'get',
            'shield/merchant/risk/thresholds',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_get' => [
            'get',
            'shield/merchant/risk/thresholds/{threshold_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_create' => [
            'post',
            'shield/merchant/risk/thresholds',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_update' => [
            'put',
            'shield/merchant/risk/thresholds/{threshold_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_delete' => [
            'delete',
            'shield/merchant/risk/thresholds/{threshold_id}',
            'ShieldController@proxyRequest'
        ],
        'shield_merchant_risk_threshold_bulk_update' => [
            'post',
            'shield/merchant/risk/threshold/bulk',
            'ShieldController@proxyRequest'
        ],

        // Scrooge Routes
        'scrooge_dashboard_init'                   => ['get',      'scrooge/dashboard-init',                         'ScroogeController@dashboardInit'                                   ],
        // Using `refunds` & moving to `POST` instead of `PUT` because of multiple conflicts in httprouter in Scrooge
        // Github issue: https://github.com/gin-gonic/gin/issues/388
        // 1. `refund/bulk-status-update` will conflict with `refund/:id/:action`
        // 2. `POST` because the above URLs are identified as identical and one url can have only one PUT API, but can have multiple POST APIs
        'scrooge_refunds_update_multiple'            => ['post',     'scrooge/refunds/bulk-status-update',                  'ScroogeController@bulkStatusUpdate'                         ],
        'scrooge_refunds_bulk_reference1_update'     => ['post',     'scrooge/refunds/bulk-reference1-update',              'ScroogeController@bulkReference1Update'                     ],
        'scrooge_reports_get_multiple'               => ['post',     'scrooge/reports',                                     'ScroogeController@listReports'                              ],
        'scrooge_refunds_get_multiple'               => ['post',     'scrooge/refunds',                                     'ScroogeController@listRefunds'                              ],
        'scrooge_refunds_get_multiple_razorflow'     => ['post',     'rf/scrooge/refunds',                                  'ScroogeController@listRefunds'                              ],
        'scrooge_refunds_get'                        => ['get',      'scrooge/refunds/{id}',                                'ScroogeController@get'                                      ],
        'scrooge_refunds_get_razorflow'              => ['get',      'rf/scrooge/refunds/{id}',                             'ScroogeController@get'                                      ],
        'scrooge_refunds_update'                     => ['post',     'scrooge/refunds/{id}/status-update',                  'ScroogeController@statusUpdate'                             ],
        'scrooge_refunds_download'                   => ['post',     'scrooge/refunds/download',                            'ScroogeController@downloadRefunds'                          ],
        'scrooge_refunds_enqueue'                    => ['post',     'scrooge/refunds/enqueue',                             'ScroogeController@enqueue'                                  ],
        'scrooge_refunds_download_gateway_file'      => ['post',     'scrooge/refunds/download-gateway-file',               'ScroogeController@downloadGatewayRefundsFile'               ],
        'scrooge_refunds_download_gateway_report'    => ['post',     'scrooge/refunds/download-gateway-report',             'ScroogeController@downloadGatewayReportsFile'               ],
        'scrooge_processed_refunds_state_change'     => ['post',     'scrooge/refunds/processed-refunds-state-change',      'ScroogeController@bulkStatusUpdate'                         ],
        'scrooge_refunds_to_failed_state'            => ['post',     'scrooge/refunds/reverse_failed',                      'ScroogeController@reverseFailedRefunds'                     ],

        // Scrooge retry routes
        'scrooge_refunds_retry_with_verify'           => ['post',     'scrooge/refunds/retry/with_verify',                  'ScroogeController@retryRefundsWithVerify'                   ],
        'scrooge_refunds_retry_without_verify'        => ['post',     'scrooge/refunds/retry/without_verify',               'ScroogeController@retryRefundsWithoutVerify'                ],
        'scrooge_refunds_retry_source_fund_transfers' => ['post',     'scrooge/refunds/retry/source_fund_transfers',        'ScroogeController@retryRefundsViaSourceFundTransfers'       ],
        'scrooge_refunds_retry_custom_fund_transfers' => ['post',     'scrooge/refunds/retry/custom_fund_transfers',        'ScroogeController@retryRefundsViaCustomFundTransfers'       ],
        'scrooge_refunds_retry_custom_fund_transfers_batch' => ['post',     'scrooge/refunds/retry/custom_fund_transfers/batch',        'RefundController@retryRefundsViaCustomFundTransfersBatch'       ],
        'scrooge_refunds_retry_with_attempt_appended_id' => ['post',     'scrooge/refunds/retry/with_attempt_appended_id',                  'ScroogeController@retryRefundsWithAppend'                   ],
        'scrooge_refunds_bulk_verify'                 => ['post',     'scrooge/refunds/bulk_verify',                             'ScroogeController@refundsVerifyBulk'                        ],
        // Scrooge - Instant Refunds Mode Config related routes
        'scrooge_refresh_fta_modes_cache'            => ['post',     'scrooge/fta_modes_refresh',                                 'ScroogeController@refreshFtaModes'                           ],
        'scrooge_set_instant_refund_mode_config'     => ['post',     'scrooge/instant_refunds_mode',                              'ScroogeController@setInstantRefundsMode'                     ],
        'scrooge_expire_instant_refund_mode_config'  => ['put',      'scrooge/instant_refunds_mode/{id}/expire',                  'ScroogeController@expireInstantRefundsModeConfig'            ],
        'scrooge_fetch_instant_refund_mode_config'   => ['post',     'scrooge/fetch/instant_refund_mode_configs',                 'ScroogeController@fetchInstantRefundsModeConfigs'            ],
        'scrooge_set_merchant_mode_config'           => ['post',     'scrooge/merchants/{mid}/instant_refunds_mode',              'ScroogeController@setInstantRefundsModeForMerchant'          ],
        'scrooge_expire_merchant_mode_config'        => ['put',      'scrooge/merchants/{mid}/instant_refunds_mode/{id}/expire',  'ScroogeController@expireInstantRefundsModeConfigForMerchant' ],
        'scrooge_fetch_merchant_mode_configs'        => ['post',     'scrooge/merchants/{mid}/fetch/instant_refund_mode_configs', 'ScroogeController@fetchInstantRefundsModeConfigsForMerchant' ],

        // Razorflow routes
        'razorflow_post_slash_command'             => ['post',     'razorflow',                                      'RazorflowController@postSlashCommand'                              ],
        'razorflow_post_slash_command_custom_endpoint'             => ['post',     'razorflow/{customEndpoint}',                                      'RazorflowController@postSlashCommand'                              ],


        // Dispute routes
        'payment_dispute_create'                   => ['post',     'payments/{paymentId}/disputes',                  'DisputeController@create'                                          ],
        'dispute_edit'                             => ['post',     'disputes/{id}',                                  'DisputeController@update'                                          ],
        'dispute_bulk_create'                      => ['post',     'disputes/bulk-create',                           'DisputeController@bulkCreate'                                      ],
        'dispute_bulk_edit'                        => ['post',     'disputes/bulk-edit',                             'DisputeController@bulkUpdate'                                      ],
        'dispute_reason_create'                    => ['post',     'disputes/reasons',                               'DisputeController@createReason'                                    ],
        'dispute_deduction_reversal_cron'          => ['post',     'disputes/deduction_reversal_cron',               'DisputeController@deductionReversalCron'                           ],
        'dispute_fetch_multiple'                   => ['get',      'disputes',                                       'DisputeController@fetchMultiple'                                   ],
        'dispute_fetch_multiple_count'             => ['get',      'disputes-count',                                 'DisputeController@getCountForFetchMultiple',                             ],
        'dispute_fetch'                            => ['get',      'disputes/{id}',                                  'DisputeController@get'                                             ],
        'dispute_file_delete'                      => ['delete',   'disputes/{id}/files/{fileId}',                   'DisputeController@deleteFile'                                      ],
        'dispute_files_fetch'                      => ['get',      'disputes/{id}/files',                            'DisputeController@getFiles'                                        ],
        'dispute_poc_mails'                        => ['get',      'disputes/{merchantId}/poc-emails',               'DisputeController@getDefaultCreationEmails'                        ],
        'dispute_merchant_emails_initiate'         => ['post',     'disputes/merchant_emails/initiate',              'DisputeController@initiateMerchantEmails'                          ],
        'dispute_refund_initiate'                  => ['post',     'disputes/refunds/initiate',                       'DisputeController@processDisputeRefunds'                           ],
        'dispute_initiate_risk_assessment'         => ['post',     'disputes/merchant_risk/initiate',              'DisputeController@initiateRiskAssessment'                          ],
        'fd_customer_dispute'                      => ['post',     'fd/disputes',                                    'FreshdeskTicketController@postCustomerDispute'                     ],
        'dispute_reason_fetch_internal'            => ['get',      'dispute_reasons_internal/{disputeReasonId}',     'DisputeController@getReasonInternal'                               ],
        'get_dispute_document_types_metadata'      => ['get',      'disputes/documents/types',                       'DisputeController@getDisputeDocumentTypesMetadataDescription'      ],
        'patch_dispute_contest_by_id'              => ['patch',    'disputes/{id}/contest',                          'DisputeController@patchDisputeContestById',                        ],
        'post_dispute_accept_by_id'                => ['post',     'disputes/{id}/accept',                           'DisputeController@postDisputeAcceptById'                           ],
        'dispute_bulk_create_internal'             => ['post',     'disputes/bulk-create/internal',                  'DisputeController@bulkCreate'                                      ],

        // disputes service proxy routes
        'dispute_ingestion'                        => ['post',     'disputes/dispute-ingestion/bank-files',           'DisputesProxyController@proxy'],
        'dispute_dcs_config_add'                   => ['post',     'disputes/dcs/add-config/{path?}',                 'EdgeProxyController@proxy'],
        'dispute_dcs_config_get'                   => ['get',      'disputes/dcs/get-config/{path?}',                 'EdgeProxyController@proxy'],
        'dispute_dcs_config_update'                => ['patch',    'disputes/dcs/update-config/{path?}',              'EdgeProxyController@proxy'],


        'debit_note_batch'                         => ['post',     'debit_note/batch',                               'DebitNoteController@postBatch',                                    ],

        // This is a different route from /payouts since we need a different auth (internal) for this
        // Hence, created two different routes - one for customer and another for merchant.
        'merchant_payout'                          => ['post',     'merchant/payout',                                'PayoutController@postInternalMerchantPayout'                       ],
        // TODO: Fix the route. Changes on dashboard would be required.
        'on_demand_settlement'                     => ['post',     'merchant/payout/demand',                         'PayoutController@postMerchantPayoutOnDemand'                       ],
        'on_demand_settlement_fees'                => ['get',      'merchant/payout/demand/fees',                    'PayoutController@calculateEsOnDemandFees'                          ],

        // Return merchant slas for Payouts on hold
        'on_hold_merchant_slas_internal'           => ['post',     'merchant/on_hold_slas_internal',                 'PayoutController@getOnHoldMerchantSlas'                            ],

        // Settings routes
        'settings_delete'                          => ['delete',   'settings/{module}/{key}',                        'SettingsController@delete'                                         ],
        'settings_fetch_defined'                   => ['get',      'settings/{module}/defined_keys',                 'SettingsController@getDefined'                                     ],
        'settings_fetch'                           => ['get',      'settings/{module}/{key?}',                       'SettingsController@get'                                            ],
        'settings_upsert'                          => ['post',     'settings/{module}',                              'SettingsController@upsert'                                         ],
        'settings_fetch_internal'                  => ['get',      'settings_internal/{module}/',                    'SettingsController@get'                                            ],
        'settings_upsert_internal'                 => ['post',     'settings_internal/{module}/',                    'SettingsController@upsert'                                         ],

        //Ondemand routes
        'settlement_ondemand_create'               => ['post',      'settlements/ondemand',                          'SettlementOndemandController@postSettlementOndemand'               ],
        'bulk_create_fund_accounts'                => ['post',      'settlements/ondemand/create_fund_account',      'SettlementOndemandController@createFundAccount'                    ],
        'setl_ondemand_fund_accounts'              => ['post',      'settlements/ondemand/fund_account/{id}',        'SettlementOndemandController@createFundAccountForMerchantId'       ],
        'setl_ondemand_pricing'                    => ['post',      'settlements/ondemand/pricing/{id}',             'SettlementOndemandController@addDefaultOndemandPricingIfNotPresent'],
        'add_ondemand_pricing_if_absent'           => ['post',      'settlements/ondemand/add_ondemand_pricing',     'SettlementOndemandController@addOndemandPricingIfAbscent'          ],
        'settlement_ondemand_razorpayx_webhook'    => ['post',      'settlement/ondemand/update',                    'SettlementOndemandController@ondemandPayoutUpdate'                 ],
        'settlement_ondemand_fees'                 => ['get',       'settlements/ondemand/fees',                     'SettlementOndemandController@calculateFees'                        ],
        'settlement_ondemand_create_dashboard'     => ['post',      'settlement/ondemand/dashboard',                 'SettlementOndemandController@postSettlementOndemand'               ],
        'settlement_ondemand_fees_dashboard'       => ['get',       'settlement/ondemand/fees/dashboard',            'SettlementOndemandController@calculateFees'                        ],
        'settlement_ondemand_fetch_by_id'          => ['get',       'settlements/ondemand/{id}',                     'SettlementOndemandController@getSettlementOndemand'                ],
        'settlement_ondemand_fetch'                => ['get',       'settlements/ondemand',                          'SettlementOndemandController@getMultipleSettlementOndemand'        ],
        'settlement_ondemand_process'              => ['post',      'settlements/ondemand/process',                  'SettlementOndemandController@processXSettlementBulkTransfer'       ],
        'settlement_ondemand_feature_enable'       => ['post',      'settlements/ondemand/feature',                  'SettlementOndemandController@enableFeature'                        ],
        'settlement_ondemand_feature_validate'     => ['get',       'settlements/ondemand/feature/validate',         'SettlementOndemandController@validateWithFeatureConfig'            ],
        'settlement_ondemand_enqueue'              => ['post',      'settlements/ondemand/enqueue/{id}',             'SettlementOndemandController@enqueueJob'                           ],
        'settlement_ondemand_partial_scheduled'    => ['post',      'settlements/ondemand/scheduled/process',        'SettlementOndemandController@processPartialSettlementScheduled'    ],
        'setl_ondemand_transfer_processed'         => ['post',      'settlements/ondemand/transfer/{id}/processed',  'SettlementOndemandController@markAsProcessed'                      ],
        'setl_ondemand_transfer_trigger'           => ['post',      'settlements/ondemand/transfer/trigger',         'SettlementOndemandController@triggerOndemandTransfer'              ],
        'setl_ondemand_transfer_payout_update'     => ['post',      'settlements/ondemand/transfer/payout',          'SettlementOndemandController@updateOndemandTransferPayoutId'       ],
        'early_settlement_feature_period_create'   => ['post',      'es/feature/period',                             'SettlementOndemandController@enableFeaturePeriod'                  ],
        'early_settlement_feature_period_disable'  => ['post',      'es/feature/disable',                            'SettlementOndemandController@disableFeaturePeriod'                 ],
        'settlement_ondemand_full_enable'          => ['post',      'settlements/ondemand/full',                     'SettlementOndemandController@enableFullESFromRestricted'           ],
        'settlement_ondemand_restricted_enable'    => ['post',      'settlements/ondemand/restricted',               'SettlementOndemandController@addOndemandRestrictedFeature'         ],
        'settlement_ondemand_blocked'              => ['get',       'settlements/ondemand/merchant/config',          'SettlementOndemandController@isOndemandBlocked'                    ],
        'settlement_ondemand_linked_account'       => ['post',      'settlements/ondemand/linked_account_settlements','SettlementOndemandController@linkedAccountSettlement'             ],
        'settlement_ondemand_reverse'              => ['post',      'settlements/ondemand/reverse',                   'SettlementOndemandController@reverseOndemandSettlement'           ],


        // OAuth routes
        'oauth_token_create'                       => ['post',     'oauth/tokens',                                   'OAuthTokenController@create'                                       ],
        'oauth_token_fetch_multiple'               => ['get',      'oauth/tokens',                                   'OAuthTokenController@getAll'                                       ],
        'oauth_token_fetch'                        => ['get',      'oauth/tokens/{id}',                              'OAuthTokenController@get'                                          ],
        'oauth_token_revoke'                       => ['put',      'oauth/tokens/{id}/revoke',                       'OAuthTokenController@revoke'                                       ],
        'oauth_application_create'                 => ['post',     'oauth/applications',                             'OAuthApplicationController@create'                                 ],
        'oauth_application_create_partner'         => ['post',     'oauth/applications/partner',                     'OAuthApplicationController@createPartner'                          ],
        'oauth_application_fetch_multiple'         => ['get',      'oauth/applications',                             'OAuthApplicationController@getMultiple'                            ],
        'oauth_application_fetch_partner'          => ['get',      'oauth/applications/partner',                     'OAuthApplicationController@getPartner'                             ],
        'oauth_application_create_clients'         => ['post',     'oauth/applications/{id}/clients',                'OAuthApplicationController@createClients'                          ],
        'oauth_application_refresh_clients'        => ['put',      'oauth/applications/{id}/clients',                'OAuthApplicationController@refreshClients'                         ],
        'oauth_application_delete_client'          => ['delete',   'oauth/applications/{id}/clients/{clientId}',     'OAuthApplicationController@deleteClient'                           ],
        'oauth_application_fetch'                  => ['get',      'oauth/applications/{id}',                        'OAuthApplicationController@get'                                    ],
        'oauth_application_delete'                 => ['delete',   'oauth/applications/{id}',                        'OAuthApplicationController@delete'                                 ],
        'oauth_merchant_notify'                    => ['post',     'oauth/notify/{type}',                            'MerchantController@sendOAuthNotification'                          ],
        'oauth_application_update'                 => ['post',     'oauth/applications/{id}',                        'OAuthApplicationController@update'                                 ],
        'oauth_fetch_submerchant_applications'     => ['get',      'oauth/submerchant/applications',                 'OAuthApplicationController@getSubmerchantApplications'             ],
        'oauth_application_access_revoke'          => ['put',      'oauth/applications/{id}/revoke',                 'OAuthApplicationController@revokeApplicationAccess'                ],
        'oauth_application_update_admin'           => ['post',     'admin-oauth/applications/{id}',                  'OAuthApplicationController@updateAdmin'                            ],
        'oauth_sync_merchant_map'                  => ['post',     'oauth/update_merchant_map',                      'MerchantController@updateMerchantAccessMapFromTokens'              ],

        'merchant_analytics'                       => ['post',     'merchant/analytics',                             'MerchantController@postAnalytics'                                  ],
        'get_merchant_data_for_segment'            => ['get',      'merchant/data_for_segment',                      'MerchantController@getMerchantDataForSegment'                      ],
        'merchant_settlements_events_cron'         => ['post',     'merchant/settlements_events_cron',               'MerchantController@postSettlementsEventsCron'                      ],

        // Merchant Requests Routes
        'merchant_requests_get'                    => ['get',      'merchant/requests/{id}',                         'MerchantRequestController@get'                                     ],
        'merchant_requests_status_log'             => ['get',      'merchant/requests/{id}/status_log',              'MerchantRequestController@getStatusLog'                            ],
        'merchant_requests_get_feature'            => ['get',      'merchant/requests/{type}/{name}',                'MerchantRequestController@getForFeatureTypeAndName'                ],
        'merchant_requests_list'                   => ['get',      'merchant/requests',                              'MerchantRequestController@getAll'                                  ],
        'merchant_requests_create'                 => ['post',     'merchant/requests',                              'MerchantRequestController@create'                                  ],
        'merchant_requests_update'                 => ['patch',    'merchant/requests/{id}',                         'MerchantRequestController@update'                                  ],
        'merchant_requests_bulk_update'            => ['put',      'merchant/requests/bulk',                         'MerchantRequestController@bulkUpdate'                              ],
        'merchant_requests_rejection_reasons'      => ['get',      'merchant/requests/rejection_reasons',            'MerchantRequestController@getRejectionReasons'                     ],
        'merchant_one_time_token'                  => ['post',     'merchant/token',                                 'MerchantRequestController@issueOneTimeToken'                       ],

        'onboarding_features_fetch_details'        => ['get',      'onboarding/features',                            'FeatureController@getOnboardingDetails'                            ],
        'onboarding_features_fetch_submission'     => ['get',      'onboarding/features/{feature}',                  'FeatureController@getOnboardingSubmissions'                        ],
        'onboarding_features_create'               => ['post',     'onboarding/features/{feature}',                  'FeatureController@postOnboardingSubmissions'                       ],
        'onboarding_features_update'               => ['post',     'onboarding/features/{feature}/update',           'FeatureController@updateOnboardingSubmissions'                     ],
        'onboarding_features_get_submissions'      => ['get',      'onboarding/features/submissions/fetch',          'FeatureController@getFeatureOnboardingRequests'                    ],
        'onboarding_features_update_status'        => ['put',      'onboarding/features/{feature}/status',           'FeatureController@updateFeatureActivationStatus'                   ],
        'onboarding_features_fetch_status'         => ['get',      'onboarding/features/{feature}/status',           'FeatureController@getFeatureActivationStatus'                      ],
        'onboarding_features_bulk_update_status'   => ['put',      'onboarding/features/status/bulk',                'FeatureController@bulkUpdateFeatureActivationStatus'               ],

        // Deprecated routes - maintaining for BC - Remove after dashboard changes
        'onboarding_features_fetch_submissions'    => ['get',      'onboarding/features/submissions',                'FeatureController@getFeatureOnboardingRequestsByStatus'            ],

        // Deprecated routes - maintaining for BC - Remove after dashboard changes
        'feature_onboarding_create'                => ['post',     'feature/onboarding/{feature}',                   'FeatureController@postOnboardingSubmissions'                       ],
        'feature_onboarding_fetch_responses'       => ['get',      'feature/onboarding/{feature}/responses',         'FeatureController@getOnboardingSubmissionsDeprecated'              ],
        'feature_onboarding_fetch_all_responses'   => ['get',      'feature/onboarding/responses',                   'FeatureController@getOnboardingSubmissionsDeprecated'              ],

        // Route to add ledger_journal_write feature and onboard those accounts to ledger
        'onboard_old_accounts_to_ledger'           => ['post',     'onboarding/feature/ledger/onboard_old_accounts', 'FeatureController@addFeatureAndOnboardOldAccountsToLedger'         ],

        // Reporting Service
        'reporting_config_get'                     => ['get',      'reporting/configs/{id}',                         'ReportingController@getConfig'                                     ],
        'reporting_config_list'                    => ['get',      'reporting/configs',                              'ReportingController@listConfig'                                    ],
        'reporting_config_create'                  => ['post',     'reporting/configs',                              'ReportingController@createConfig'                                  ],
        'reporting_config_edit_bulk'               => ['post',    'reporting/configs/bulk',                         'ReportingController@updateBulkConfigs'                             ],
        'reporting_config_create_full'             => ['post',     'reporting/configs/full',                         'ReportingController@createFullConfig'                              ],
        'reporting_config_edit'                    => ['patch',    'reporting/configs/{id}',                         'ReportingController@updateConfig'                                  ],
        'reporting_config_edit_full'               => ['patch',    'reporting/configs/{id}/full',                    'ReportingController@updateFullConfig'                              ],
        'reporting_config_delete'                  => ['delete',   'reporting/configs/{id}',                         'ReportingController@deleteConfig'                                  ],
        'reporting_log_get'                        => ['get',      'reporting/logs/{id}',                            'ReportingController@getLog'                                        ],
        'reporting_log_list'                       => ['get',      'reporting/logs',                                 'ReportingController@listLog'                                       ],
        'reporting_log_create'                     => ['post',     'reporting/logs',                                 'ReportingController@createLog'                                     ],
        'reporting_log_update'                     => ['patch',    'reporting/logs/{id}',                            'ReportingController@updateLog'                                     ],
        'reporting_schedule_get'                   => ['get',      'reporting/schedules/{id}',                       'ReportingController@getSchedule'                                   ],
        'reporting_schedule_list'                  => ['get',      'reporting/schedules',                            'ReportingController@listSchedule'                                  ],
        'reporting_schedule_create'                => ['post',     'reporting/schedules',                            'ReportingController@createSchedule'                                ],
        'reporting_schedule_delete'                => ['delete',   'reporting/schedules/{id}',                       'ReportingController@deleteSchedule'                                ],
        'reporting_schedule_update'                => ['patch',    'reporting/schedules/{id}',                       'ReportingController@updateSchedule'                                ],
        'reporting_consumer_restrictions'          => ['get',      'reporting/consumer_restrictions',                'ReportingController@getConsumerRestrictions'                       ],
        'reporting_log_create_admin'               => ['post',     'admin-reporting/logs',                           'ReportingController@createLog'                                     ],
        'reporting_config_get_admin'               => ['get',      'admin-reporting/configs/{id}',                   'ReportingController@getConfig'                                     ],
        'reporting_config_list_admin'              => ['get',      'admin-reporting/configs',                        'ReportingController@listConfig'                                    ],
        'reporting_config_create_admin'            => ['post',     'admin-reporting/configs',                        'ReportingController@createConfigAdmin'                             ],
        'reporting_config_edit_admin'              => ['patch',    'admin-reporting/configs/{id}',                   'ReportingController@updateConfigAdmin'                             ],
        'reporting_config_delete_admin'            => ['delete',   'admin-reporting/configs/{id}',                   'ReportingController@deleteConfigAdmin'                             ],
        'reporting_log_get_admin'                  => ['get',      'admin-reporting/logs/{id}',                      'ReportingController@getLog'                                        ],
        'reporting_log_list_admin'                 => ['get',      'admin-reporting/logs',                           'ReportingController@listLog'                                       ],
        'reporting_config_types_fetch'             => ['get',      'admin-reporting/config-type',                    'ReportingController@getTypes'                                      ],
        'reporting_config_components_get_by_type'  => ['get',      'admin-reporting/config-components/{type}',       'ReportingController@getComponentsByType'                           ],
        'reporting_config_options'                 => ['get',      'admin-reporting/config-options',                 'ReportingController@getOptions'                                    ],
        'reporting_fetch_throttle_settings'        => ['get',      'admin-reporting/throttle/settings',              'ReportingController@listThrottleSetting'                           ],
        'reporting_edit_throttle_settings'         => ['put',      'admin-reporting/throttle/settings',              'ReportingController@createThrottleSetting'                         ],

        // UFH Service
        // TODO: Should change to just /signed_url (No 'get' and underscore)
        'ufh_get_file_signed_url'                  => ['get',      'ufh/file/{fileId}/get-signed-url',               'UfhController@getSignedUrl'                                        ],
        'ufh_get_file_signed_url_admin'            => ['get',      'admin-ufh/file/{fileId}/get-signed-url',         'UfhController@getSignedUrl'                                        ],

        'ufh_get_file_signed_url_by_mid'           => ['get',      'admin-ufh/{mId}/files/{fileId}/get-signed-url',  'UfhController@getSignedUrlByMId'                                   ],
        'ufh_admin_upload_file'                    => ['post',     'admin-ufh/file/upload',                          'UfhController@uploadFileAndGetUrl'                                 ],
        'ufh_upload_file'                          => ['post',     'ufh/files/upload',                               'UfhController@uploadFileAndGetUrl'                                 ],

        'razorx_route'                             => ['any',      'service/razorx',                                 'RazorxController@sendRequest'                                      ],
        'merchant_razorx_evaluate'                 => ['get',      'razorx/evaluate/{featureFlag}',                  'MerchantController@getRazorxTreatment'                             ],
        'merchant_razorx_bulk_evaluate'            => ['get',      'razorx/bulkevaluate',                            'MerchantController@getRazorxTreatmentInBulk'                       ],
        'razorx_guest'                             => ['get',      'razorx/evaluate/{id}/{featureFlag}',             'RazorxController@getTreatment'                                     ],
        // batch service
        'batch_service_route'                      => ['any',      'service/batch/{path?}',                          'BatchController@sendRequest'                                       ],

        // Master Onboarding Service routes
        'mob_admin_routes'                         => ['any',      'mob/admin/{path?}',                                     'MasterOnboardingController@adminRequest'                           ],
        'mob_admin_routes_for_one_ca'              => ['any',      'mob/admin_oneca/{path?}',                               'MasterOnboardingController@adminRequestForOneCa'                   ],
        'mob_migration'                            => ['post',     'mob/migration',                                         'MasterOnboardingController@mobMigration'                           ],
        'mob_intent_apply_application'             => ['post',     'mob/intents/{id}/application/apply',                    'MasterOnboardingController@proxyRequest'                           ],
        'mob_fetch_application'                    => ['get',      'mob/applications/{id}',                                 'MasterOnboardingController@proxyRequest'                           ],
        'mob_fetch_multiple_applications'          => ['get',      'mob/applications',                                      'MasterOnboardingController@proxyRequest'                           ],
        'mob_create_intent'                        => ['post',     'mob/intents',                                           'MasterOnboardingController@proxyRequest'                           ],
        'mob_fetch_intent'                         => ['get',      'mob/intents/{id}',                                      'MasterOnboardingController@proxyRequest'                           ],
        'mob_fetch_multiple_intents'               => ['get',      'mob/intents',                                           'MasterOnboardingController@proxyRequest'                           ],
        'mob_save_workflow'                        => ['post',     'mob/save_workflow',                                     'MasterOnboardingController@proxyRequest'                           ],
        'mob_get_workflow'                         => ['get',      'mob/get_workflow/{id}',                                 'MasterOnboardingController@proxyRequest'                           ],
        'mob_to_bas_routes'                        => ['any',      'mob/bas/merchant/banking_application/business/{path?}', 'BasController@forwardRequest'                                      ],
        'mob_ca_lms_routes'                        => ['post',     'mob/lms/{path?}',                                       'MasterOnboardingController@adminRequest'                           ],
        'bas_internal_admin_routes'                => ['any',      'bas_internal/lms/{path?}',                              'BasController@forwardLMSRequest'                                   ],
        'bas_internal_salesforce'                  => ['any',      'salesforce/banking_account/icici/{path?}',              'BasController@forwardSalesforceRequest'                            ],

        //all requests get forwarded to banking account service
        'banking_account_service_lms_routes_all'   => ['any',      'bas/lms/{path?}',                                    'BasController@forwardLMSRequest'                               ],
        'banking_account_service_lms_routes_ops'   => ['any',      'bas/lms_ops/{path?}',                                'BasController@forwardLMSRequest'                               ],

        'banking_account_service_routes'                        => ['any',      'merchant/banking_application/business/{path?}',         'BasController@forwardRequest'                  ],
        'banking_account_service_cron_routes'                   => ['any',      'bas/banking_application/cron/{path?}',                  'BasController@forwardCronRequest'              ],

        // this endpoint checks serviceability only for ICICI
        'banking_account_service_pincode_serviceability_check'        => ['get',     'bas/banking_application/check_pin_code_serviceability', 'BasController@checkPinCodeServiceability'      ],
        // this endpoint checks serviceability for both ICICI and RBL
        'banking_account_service_pincode_serviceability_check_bulk'   => ['get',     'bas/banking_application/check_pin_code_serviceability_bulk', 'BasController@checkPinCodeServiceabilityBulk'      ],
        // this endpoint checks serviceability and allocates a bank for the merchant
        'banking_account_service_common_serviceability_check'         => ['post',    'bas/allocate_lead',                                     'BasController@checkCommonServiceability'       ],

        'banking_account_slot_book'                           =>    ['post',    'booking/slot/book',                                     'BasController@slotBookForBankingAccount'      ],
        'banking_account_get_free_slot'                       =>    ['get',     'booking/slot/availableSlots',                           'BasController@getFreeSlotForBankingAccount'   ],
        'banking_account_slot_reschedule'                     =>    ['post',    'booking/slot/reschedule',                               'BasController@rescheduleSlotForBankingAccount'],
        'banking_account_get_recent_slot'                     =>    ['get',     'booking/slot/recentSlots',                              'BasController@getRecentFreeSlotForBankingAccount'],


        //creates balance and banking_account_statement_details
        'bas_banking_accounts_create'              => ['post',     'bas/merchant/{id}/banking_accounts',             'BasController@createCurrentAccountBankingDependencies'             ],
        'external_bvs_validation_request'          => ['post',     'bas/bvs_validation',                             'BasController@initiateExternalBvsValidation'                       ],
        'bas_ca_lead_to_sales_force'               => ['post',     'bas/ca_lead_to_salesforce',                      'BasController@sendCaLeadToSalesForce'                              ],
        'bas_ca_lead_status_to_sales_force'        => ['post',     'bas/ca_lead_status_updates_to_salesforce',       'BasController@sendCaLeadStatusToSalesForce'                        ],
        'bas_ca_lead_to_freshdesk'                 => ['post',     'bas/ca_lead_to_freshdesk',                       'BasController@sendCaLeadToFreshDesk'                               ],
        'rbl_in_progress_lead_to_sales_force'      => ['post',     'cron/rbl/lead_to_salesforce',                    'BasController@sendRblApplicationInProgressLeadsToSalesForce'       ],
        'get_banking_account_slot_booking_details' => ['get',      'booking/slot',                                   'BasController@getSlotBookingDetailsForBankingAccountAndChannel'    ],
        'bas_archive_banking_account_dependencies'     => ['post',     'bas/archive_banking_account_dependencies',       'BasController@archiveBankingAccountDependencies'               ],
        'bas_unarchive_banking_account_dependencies'   => ['post',     'bas/unarchive_banking_account_dependencies',     'BasController@unarchiveBankingAccountDependencies'             ],
        'bas_get_merchant_attributes'                  => ['get',      'bas/merchant_attributes/{merchant_id}/{group}',  'BasController@getMerchantAttributes'                           ],
        'bas_banking_accounts_notifications'       => ['post',     'bas/banking_accounts/notifications',             'BasController@handleNotifications'                                 ],
        'bas_tokenize_values'                      => ['post',     'bas/tokenize_values',                            'BasController@tokenizeValues'                                      ],

        //splitz service
        'splitz_route'                             => ['any',      'service/splitz',                                 'SplitzController@sendRequest'                                      ],
        'splitz_evaluate'                          => ['post',     'splitz/evaluate',                                'SplitzController@evaluateRequest'                                  ],
        'splitz_evaluate_bulk'                     => ['post',     'splitz/bulkEvaluate',                            'SplitzController@evaluateRequestBulk'                              ],
        'splitz_preflight'                         => ['options',  'splitz/evaluate',                                'SplitzController@allowCors'                                        ],
        'splitz_preflight_bulk_evaluate'           => ['options',  'splitz/bulkEvaluate',                            'SplitzController@allowCors'                                        ],
        'splitz_upload_segment_file'               => ['post',     'splitz/segment/upload',                          'SplitzController@uploadFileAndGetUrl'                              ],

        //splitz bulk evaluate route for proxy auth
        'splitz_evaluate_bulk_proxy'               => ['post',     'splitz/bulkEvaluateProxy',                       'SplitzController@evaluateRequestBulk'                              ],

        // Growth service
        'growth_get_asset_details'                 => ['post',     'growth/assets',                            'GrowthController@getAssetDetails'                                  ],
        'growth_create_pricing_subscription'       => ['post',     'pricing/merchant/subscriptions',             'GrowthController@createSubscription'                                  ],
        'growth_get_pricing_subscription_by_mid'   => ['get',      'pricing/merchant/subscriptions',             'GrowthController@getSubscriptionByMid'                                  ],
        'growth_check_pricing_subscription'        => ['get',      'pricing/merchant/subscriptions/exists',      'GrowthController@checkSubscriptionByMid'                                  ],
        'growth_get_template_by_id'                => ['get',      'growth/template/{id}',                     'GrowthController@getTemplateByIdDetails'                           ],
        'growth_get_public_asset_details'          => ['post',     'growth/public/assets',                     'GrowthController@getPublicAssetDetails'                            ],
        'growth_downtime_for_x'                    => ['post',     'growth/assets/enable_downtime_for_x',      'GrowthController@enableDowntimeNotificationForXDashboard'          ],
        'growth_filter_and_sync_cron'              => ['post',     'growth/assets/sync',                       'GrowthController@filterAndSyncEventsFromPinot'                     ],
        'growth_slack_csv_cron'                   => ['post',     'pricing/subscription/sync',                       'GrowthController@sendCsvFile'                     ],
        'growth_admin'                             => ['post',     'growth/admin/{path?}',                     'GrowthController@handleAdminRequests'                              ],
        'growth_upload_asset'                      => ['post',     'growth/assets/upload',                     'GrowthController@uploadAssets'                                     ],

        // growth service internal routes
        'growth_pricing_bundle_email'              => ['post',     'growth/pricing_bundle/send_email',         'GrowthInternalController@sendPricingBundleEmail'                         ],
        'growth_pricing_bundle_add_amount_credits' => ['post',     'growth/pricing_bundle/add_amount_credits', 'GrowthInternalController@addAmountCredits'                         ],

        // Account API routes
        'beta_account_create'                      => ['post',     'beta/accounts',                                  'AccountController@createLinkedAccount'                             ],
        'beta_account_fetch'                       => ['get',      'beta/accounts/{id}',                             'AccountController@get'                                             ],
        'beta_account_fetch_multiple'              => ['get',      'beta/accounts',                                  'AccountController@list'                                            ],
        'beta_account_post_bank_account'           => ['post',     'beta/accounts/{id}/bank_accounts',               'AccountController@createOrChangeBankAccount'                       ],
        'beta_account_fetch_setl_destinations'     => ['get',      'beta/accounts/{id}/settlement_destinations',     'AccountController@fetchSettlementDestinations'                     ],
        'account_features_add'                     => ['post',     'accounts/me/features',                           'FeatureController@addAccountFeatures'                              ],
        'account_features_get'                     => ['get',      'accounts/me/features',                           'FeatureController@getAccountFeatures'                              ],
        'gstin_e_invoice_cron'                     => ['post',     'accounts/gstin-cron',                            'FeatureController@suggestedOptInCron'                              ],

        'account_create'                           => ['post',     'accounts',                                       'AccountController@createAccount'                                   ],
        'account_list'                             => ['get',      'accounts',                                       'AccountController@listAccounts'                                    ],
        'account_fetch'                            => ['get',      'accounts/{id}',                                  'AccountController@fetchAccount'                                    ],
        'account_fetch_by_external_id'             => ['get',      'accounts/external/{id}',                         'AccountController@fetchByExternalId'                               ],
        'account_edit'                             => ['patch',    'accounts/{id}',                                  'AccountController@editAccount'                                     ],
        'account_action'                           => ['patch',    'accounts/{id}/{action}',                         'AccountController@performAction'                                   ],

        'stakeholder_create_v2'                    => ['POST',    'accounts/{id}/stakeholders',                      'StakeholderController@create'                                      ],
        'stakeholder_update_v2'                    => ['PATCH',   'accounts/{id}/stakeholders/{stakeholderId}',      'StakeholderController@update'                                      ],
        'stakeholder_fetch_v2'                     => ['GET',     'accounts/{id}/stakeholders/{stakeholderId}',      'StakeholderController@fetch'                                       ],
        'stakeholder_fetch_all_v2'                 => ['GET',     'accounts/{id}/stakeholders',                      'StakeholderController@fetchAll'                                    ],

        'account_service_updated_accounts_fetch'   => ['GET',     'account_service/updated_accounts',                'MerchantController@getUpdatedAccountsForAccountService'            ],
        'account_service_details_fetch'            => ['GET',     'account_service/accounts/{accountId}',            'MerchantController@getMerchantDetailsForAccountService'            ],
        'account_service_details_fetch_reverse_map'=> ['GET',     'account_service/accounts/reverse_map/{accountId}','MerchantController@getMerchantDetailsForAccountServiceReverseMap'  ],
        'account_service_trigger_sync'             => ['POST',    'account_service/trigger_sync',                    'AcsController@triggerSync'                                         ],
        'account_service_trigger_full_sync'        => ['POST',    'account_service/trigger_full_sync',               'AcsController@triggerFullSync'                                     ],
        'account_service_handle_update_event'      => ['POST',    'account_service/handle_update_event',             'AcsController@handleAccountUpdateEvent'                            ],

        'account_create_v2'                        => ['post',     'accounts',                                       'AccountControllerV2@createAccount'                                 ],
        'account_fetch_v2'                         => ['get',      'accounts/{id}',                                  'AccountControllerV2@fetchAccount'                                  ],
        'account_edit_v2'                          => ['patch',    'accounts/{id}',                                  'AccountControllerV2@editAccount'                                   ],
        'account_delete_v2'                        => ['delete',   'accounts/{id}',                                  'AccountControllerV2@deleteAccount'                                 ],

        'onboarding_webhook_create'                => ['post',     'accounts/{id}/webhooks',                         'OnboardingWebhookController@create'                                ],
        'onboarding_webhook_fetch'                 => ['get',      'accounts/{id}/webhooks/{webhookId}',             'OnboardingWebhookController@fetch'                                 ],
        'onboarding_webhook_fetch_all'             => ['get',      'accounts/{id}/webhooks',                         'OnboardingWebhookController@fetchAll'                              ],
        'onboarding_webhook_update'                => ['patch',    'accounts/{id}/webhooks/{webhookId}',             'OnboardingWebhookController@update'                                ],
        'onboarding_webhook_delete'                => ['delete',   'accounts/{id}/webhooks/{webhookId}',             'OnboardingWebhookController@delete'                                ],

        'product_config_fetch_v2'                  => ['get',      'accounts/{id}/products/{merchantProductId}',     'ProductConfigController@fetchConfigForMerchant'                    ],
        'product_config_update_v2'                 => ['patch',    'accounts/{id}/products/{merchantProductId}',     'ProductConfigController@updateConfigForMerchant'                   ],
        'product_config_create_v2'                 => ['post',     'accounts/{id}/products/',                        'ProductConfigController@createConfigForMerchant'                   ],

        // product_tnc
        'business_unit_tnc_fetch_v2'               => ['get',       'products/{name}/tnc',                           'TncMapController@fetchTncForBusinessUnit'                          ],
        'product_config_tnc_fetch_v2'              => ['get',       'accounts/{id}/tnc',                             'ProductTncController@fetchTncForMerchantProduct'                   ],
        'product_config_tnc_accept_v2'             => ['post',      'accounts/{id}/tnc',                             'ProductTncController@acceptTncForMerchantProduct'                  ],


        //tnc map
        'product_tnc_map_create'                   => ['post',       'products/tnc',                                  'TncMapController@create'                                          ],
        'product_tnc_map_fetch'                    => ['get',        'products/tnc/{id}',                             'TncMapController@get'                                             ],
        'product_tnc_map_fetch_all'                => ['get',        'products/tnc',                                  'TncMapController@list'                                            ],
        'product_tnc_map_update'                   => ['patch',      'products/tnc/{id}',                             'TncMapController@update'                                          ],

        // Pincode Service
        'pincode_get'                              => ['get',      'pincodes/{id}',                                  'PincodeSearchController@get'                                       ],
        '1cc_pincode_get'                          => ['get',      '1cc/pincodes/{id}',                              'PincodeSearchController@getFor1cc'                                 ],
        '1cc_country_pincode_get'                  => ['get',      'locations/country/{country}/pincode/{pincode}',  'PincodeSearchController@getByCountry'                              ],
        '1cc_location_autosuggest'                 => ['get',      'locations/autosuggest',                          'LocationController@getAddressSuggestions'                          ],
        'internal_pincode_get'                     => ['get',      'internal/pincodes/{id}',                         'PincodeSearchController@get'                                       ],
        'guest_pincode_get'                        => ['get',      'pincode/{id}',                                   'PincodeSearchController@get'                                       ],
        'cities_get'                               => ['get',      'cities',                                         'CityController@getCities'                                          ],
        'states_by_country'                        => ['get',      'locations/countries/{countryCode}/states',       'LocationController@getStatesByCountry'],
        'db_meta_query'                            => ['post',     'db_meta_query',                                  'AdminController@dbMetaDataQuery'                                   ],

        'zipcode_add'                              => ['post',      '1cc/zipcodes',                                  'LocationController@add'                                             ],
        'zipcode_remove'                           => ['post',      '1cc/zipcodes/remove',                           'LocationController@remove'                                          ],

        // Deprecated feature routes - maintaining for BC - Remove after dashboard changes
        'feature_get_multiple'                     => ['get',      'features/{entityId}',                            'FeatureController@getMerchantFeatures'                             ],
        'feature_get_multiple_internal'            => ['get',      'internal/features/{entityId}',                   'FeatureController@getMerchantFeatures'                             ],

        'feature_delete'                           => ['delete',   'features/{entityId}/{featureName}',              'FeatureController@deleteFeature'                                   ],
        'feature_delete_internal'                  => ['delete',   'internal/features/{entityId}/{featureName}',     'FeatureController@deleteFeature'                                   ],

        // Features
        'feature_add'                              => ['post',     'features',                                       'FeatureController@addFeatures'                                     ],
        'feature_add_internal'                     => ['post',     'internal/features',                              'FeatureController@addFeatures'                                     ],
        'feature_get'                              => ['get',      'features/{entityType}/{entityId}',               'FeatureController@getFeatures'                                     ],
        'feature_get_all'                          => ['get',      'feature/{entityType}/{entityId}',                'FeatureController@getFeatures'                                     ],
        'feature_get_all_internal'                 => ['get',      'feature/{entityType}/{entityId}/internal',       'FeatureController@getFeatures'                                     ],
        'internal_feature_get_all'                 => ['get',      'internal/feature/{entityType}/{entityId}',       'FeatureController@getFeatures'                                     ],
        'feature_get_status'                       => ['get',      'feature/{entityType}/{entityId}/{featureName}',  'FeatureController@getFeatureStatus'                                ],
        'feature_bulk_assign'                      => ['post',     'features/assign',                                'FeatureController@multiAssignFeature'                              ],
        'feature_bulk_remove'                      => ['post',     'features/remove',                                'FeatureController@multiRemoveFeature'                              ],
        'internal_feature_bulk_assign'             => ['post',     'internal/features/assign',                       'FeatureController@multiAssignFeature'                              ],
        'internal_feature_bulk_remove'             => ['post',     'internal/features/remove',                       'FeatureController@multiRemoveFeature'                              ],
        'internal_feature_bulk_fetch'              => ['post',     'internal/features/bulk_fetch',                   'FeatureController@bulkFetchFeatures'                               ],
        'feature_delete_entity'                    => ['delete',   '{entityType}/{entityId}/features/{featureName}', 'FeatureController@deleteEntityFeature'                             ],
        'feature_delete_entity_internal'           => ['delete',   'internal/{entityType}/{entityId}/features/{featureName}', 'FeatureController@deleteEntityFeature'                    ],
        'feature_get_merchants_internal'           => ['post',     'internal/feature/merchants',                     'FeatureController@getMerchantIdsHavingFeatures'                    ],
        'feature_migration_dcs_scheduled'          => ['post',     'features/dcs/migration/process',                 'FeatureController@processDcsFeatureMigrationJob'    ],

        //Recon summary
        'daily_reconciliation_summary_fetch'       => ['get',      'daily_recon_summary',                            'AdminController@getDailyReconciliationStatusSummary'               ],
        'hourly_reconciliation_summary_fetch'      => ['get',      'hourly_recon_summary',                           'AdminController@getHourlyReconciliationStatusSummary'              ],

        // Generic Lambda handler
        'lambda_post_h2h'                          => ['post',     'lambda/{type}',                                  'LambdaController@processLambda'                                    ],

        'nodal_beneficiary_update'                 => ['patch',    'nodal_beneficiaries',                            'NodalBeneficiaryController@update'                                 ],

        // Partner routes
        'merchants_access_map_create'              => ['post',     'merchants/{id}/access_maps',                     'MerchantController@createPartnerAccessMap'                         ],
        'merchants_access_map_delete'              => ['delete',   'merchants/{id}/access_maps',                     'MerchantController@deletePartnerAccessMap'                         ],
        'merchants_access_map_update'              => ['put',      'merchants/{id}/access_maps',                     'MerchantController@updatePartnerAccessMap'                         ],
        'merchants_access_map_upsert_bulk'         => ['post',     'access_map/bulk',                                'MerchantController@postPartnerAccessMapBulk'                       ],
        'partner_submerchant_map'                  => ['post',     'partner_submerchant_map',                        'MerchantController@createPartnerSubmerchantMap'                    ],
        'fetch_partner_intent'                     => ['get',      'merchant/partner-intent',                        'MerchantController@fetchPartnerIntent'                             ],
        'update_partner_intent'                    => ['patch',    'merchant/partner-intent',                        'MerchantController@updatePartnerIntent'                            ],
        'update_partner_type'                      => ['patch',    'merchant/partner_type',                          'MerchantController@updatePartnerType'                              ],
        'partner_referral_fetch'                   => ['get',      'merchant/referral',                              'MerchantController@fetchReferral'                                  ],
        'partner_referral_regenerate'              => ['post',     'merchant/referral/regenerate',                   'PartnershipsAdhocMigrationsController@regenerateReferralLinks'     ],
        'partner_referral_create'                  => ['post',     'merchant/referral',                              'MerchantController@createReferral'                                 ],
        'backfill_merchant_applications'           => ['post',     'merchant/backfill_merchant_apps',                'MerchantController@backFillMerchantApplications'                   ],
        'backfill_referred_application'            => ['post',     'merchant/backfill_referred_app',                 'MerchantController@backFillReferredApplication'                    ],
        'fetch_merchant_products'                  => ['get',      'merchant/merchant_products',                     'MerchantController@fetchProductUsedByMerchants'                    ],
        'partner_config_bulk_upsert'               => ['post',     'partner_configs/bulk',                           'PartnerConfigController@bulkUpsert'                                ],
        'partner_config_create_admin'              => ['post',     'partner_configs',                                'PartnerConfigController@create'                                    ],
        'partner_config_fetch_admin'               => ['get',      'partner_configs',                                'PartnerConfigController@getConfig'                                 ],
        'partner_config_edit_admin'                => ['put',      'partner_configs/{id}',                           'PartnerConfigController@update'                                    ],
        'partner_config_fetch'                     => ['get',      'partner_config',                                 'PartnerConfigController@getConfig'                                 ],
        'partner_config_edit'                      => ['put',      'partner_config/{id}',                            'PartnerConfigController@update'                                    ],
        'partner_config_edit_logo'                 => ['post',     'partner_config/{id}/logo',                       'PartnerConfigController@uploadLogo'                                ],
        'partner_config_fetch_guest'               => ['get',      'partner_config_guest',                           'PartnerConfigController@getConfig'                                 ],
        'create_partner_sub_merchant_config'       => ['post',     'partner_configs/submerchant/config',             'PartnerConfigController@createPartnersSubMerchantConfig'           ],
        'update_partner_sub_merchant_config'       => ['put',      'partner_configs/submerchant/config',             'PartnerConfigController@updatePartnersSubMerchantConfig'           ],
        'fetch_partner_first_user_experience'      => ['get',      'partner/first_user_experience',                  'MerchantController@getFUXDetailsForPartner'                        ],
        'fetch_partner_referral_batch'             => ['post',     'partner_referral/bulk',                          'MerchantController@fetchPartnerReferralViaBatch'                   ],
        'submerchant_partner_feature_check'        => ['get',      'submerchant/partner_feature_check/{featureName}', 'MerchantController@isFeatureEnabledForPartnerOfSubmerchant'                    ],

        //Partner activation routes
        'partner_activation_status'                => ['patch',    'partner/activation/{id}/status',                 'PartnerController@updatePartnerActivationStatus'         ],
        'partner_activation_update'                => ['put',      'partner/activation/{id}',                        'PartnerController@editPartnerActivationDetails'          ],
        'partner_activation_details'               => ['get',      'partner/activation',                             'PartnerController@getPartnerActivationDetails'           ],
        'partner_activation_save'                  => ['post',     'partner/activation',                             'PartnerController@savePartnerActivationDetails'          ],
        'partner_activation_migrate'               => ['post',     'partner/activation/migrate',                     'MerchantController@createPartnerActivationForPartners'             ],
        'partner_actions'                          => ['put',      'partner/{id}/action',                            'PartnerController@performAction'                         ],
        'partner_activation_bulk_assign_reviewer'  => ['post',     'partner/activation/bulk_assign_reviewer',        'PartnerController@bulkAssignReviewer'                    ],
        'partner_send_weekly_activation_summary_emails' => ['post', 'partner/send_weekly_activation_summary_emails', 'PartnerController@sendPartnerWeeklyActivationSummaryEmails'       ],
        'partner_bulk_update_onboarding_source'            =>  ['patch',    'partner_configs/submerchant/bulk_update_onboarding_source', 'PartnerConfigController@bulkUpdateOnboardingSource'],

        //route for sending events to partner with pending commission and Incomplete KYC
        'partner_commission_pending'               => ['post',     'partner/commissions_pending',                    'PartnerController@sendEventsOfPartnersWithCommissionPending'],

        'merchant_authorize_partner_save'          => ['post',     'merchant/{id}/authorize/partner',                'MerchantController@saveMerchantAuthorizationToPartner'                ],
        'merchant_authorize_partner_status'        => ['get',      'merchant/{id}/authorize/partner',                'MerchantController@getMerchantAuthorizationForPartner'                ],

        'partner_sales_poc'                        => ['get',      'partner/sales_poc',                              'PartnerController@getPartnerSalesPOC'           ],
        'partner_request_migration'                => ['post',     'partner/request_migration',                      'PartnerController@raisePartnerMigrationRequest'           ],


        //cron route for sending daily transacted submerchant events for all partners
        'partner_send_daily_transacted_submerchant_events' => ['post', 'partner/send_daily_transacted_submerchant_events',  'PartnerController@sendSubmerchantFirstTransactionSegmentEvents'],

        // Partner types migration routes
        'bulk_migrate_aggregator_to_reseller'      => ['put',      'partner/migrate_aggregator_to_reseller/bulk',       'MerchantController@bulkMigrateAggregatorToResellerPartner'      ],
        'bulk_migrate_reseller_to_aggregator'      => ['put',      'partner/migrate_reseller_to_aggregator/bulk',       'PartnerController@bulkMigrateResellerToAggregatorPartner'       ],
        'internal_migrate_reseller_to_aggregator'  => ['put',      'partner/migrate_reseller_to_aggregator/internal',   'PartnerController@migrateResellerToAggregatorPartner'           ],
        'internal_migrate_aggregator_to_reseller'  => ['put',      'partner/migrate_aggregator_to_reseller/internal',   'MerchantController@migrateAggregatorToResellerPartner'          ],
        'migrate_reseller_to_aggregator'           => ['put',      'partner/migrate_reseller_to_aggregator',            'PartnerController@migrateResellerToAggregatorPartner'           ],
        'migrate_aggregator_to_reseller'           => ['put',      'partner/migrate_aggregator_to_reseller',            'MerchantController@migrateAggregatorToResellerPartner'          ],
        'migrate_reseller_to_pure_platform'        => ['put',      'partner/migrate_reseller_to_pure_platform',         'PartnerController@migrateResellerToPurePlatformPartner'         ],
        'migrate_pure_platform_to_reseller'        => ['put',      'partner/migrate_pure_platform_to_reseller',         'PartnerController@migratePurePlatformToResellerPartner'         ],
        'partner_remove_switch_merchant_access'    => ['put',      'partner/remove_submerchant_dashboard_access/bulk',  'MerchantController@removeSubmerchantDashboardAccessOfPartner'   ],


        // partner kyc access
        'partner_kyc_access_request'              => ['post',     'partner/kyc_access_request',                     'PartnerKycAccessController@createRequestForKyc'                     ],
        'partner_kyc_approve_reject'              => ['post',     'partner/kyc_approve_reject',                     'PartnerKycAccessController@confirmRequestForKyc'                    ],
        'partner_kyc_approve_reject_cors'         => ['options',  'partner/kyc_approve_reject',                     'PartnerKycAccessController@confirmRequestForKycCors'                ],
        'partner_kyc_revoke_access'               => ['post',     'partner/kyc_revoke_access',                      'PartnerKycAccessController@revokeKycAccess'                         ],


        'merchant_sync_stakeholder'                => ['post',     'merchants/stakeholders/sync',                    'MerchantController@syncStakeholderFromMerchant'                    ],

        //partnership service usecase routes
        'fetch_commission_configs'                 => ['get',     'commission_configs',                       'CommissionController@fetchCommissionConfigsForPayment'                    ],
        'fetch_partner_commission_invoice_feature' => ['get',     'partner/commission_invoice_feature',       'CommissionInvoiceController@fetchPartnersWithCommissionInvoiceFeature'    ],
        'partnerships_service_proxy'               => ['post',    'partnerships/{path?}',                     'EdgeProxyController@proxy'                                                ],
        'prts_fetch_merchant_entities'             => ['get',     'internal/partnerships/merchant',             'PartnerController@fetchPartnerRelatedEntitiesForPRTS'                     ],


        'commissions_get_multiple'                 => ['get',      'commissions',                                    'CommissionController@list'                                         ],
        'commissions_get'                          => ['get',      'commissions/{id}',                               'CommissionController@get'                                          ],
        'commissions_capture'                      => ['post',     'commissions/{id}/capture',                       'CommissionController@capture'                                      ],
        'commissions_get_aggregates'               => ['get',      'commissions/partner/{id}/aggregate',             'CommissionController@fetchAggregateCommissionDetails'              ],
        'commissions_capture_by_partner'           => ['post',     'commissions/partner/{id}/capture',               'CommissionController@captureByPartner'                             ],
        'commissions_bulk_capture_by_partner'      => ['post',     'commissions/partner/capture/bulk',               'CommissionController@bulkCaptureByPartner'                         ],
        'commissions_mark_for_settlement'          => ['post',     'commissions/partner/{id}/on_hold/clear',         'CommissionController@clearOnHoldForPartner'                        ],
        'commissions_analytics'                    => ['get',      'commissions_analytics',                          'CommissionController@fetchAnalytics'                               ],

        'commissions_invoice_fetch_all'            => ['get',      'commissions/invoice/fetch/bulk',                 'CommissionInvoiceController@fetchBulk'                             ],
        'commissions_invoice_generate'             => ['post',     'commissions/invoice/create',                     'CommissionInvoiceController@postCreateInvoices'                    ],
        'commissions_invoice_status_change'        => ['put',      'commissions/invoice/{id}',                       'CommissionInvoiceController@changeStatus'                          ],
        'commissions_invoice_fetch'                => ['get',      'commissions/invoice/{id}',                       'CommissionInvoiceController@fetch'                                 ],
        'invoice_on_hold_clear_bulk'               => ['put',      'commissions/invoice/on_hold_clear/bulk',         'CommissionInvoiceController@clearOnHoldForInvoiceBulk'             ],
        'commissions_invoice_reminder'             => ['post',     'commissions/invoice/send_reminders',             'CommissionInvoiceController@sendInvoiceReminders'                  ],
        'fetch_partner_sub_mtu'                    => ['post',     'partner/sub_mtu/bulk',                           'CommissionInvoiceController@fetchPartnerSubMtusCount'                  ],

        'submerchants_fetch'                       => ['get',      'submerchants/{id}',                              'MerchantController@getSubmerchant'                                 ],
        'submerchants_fetch_multiple'              => ['get',      'submerchants',                                   'MerchantController@listSubmerchants'                               ],
        'submerchants_fetch_capital_applications'  => ['post',     'submerchants/capital/applications',             'MerchantController@getCapitalApplicationsForSubmerchants'           ],
        'merchant_partners_fetch'                  => ['get',      'merchants/{id}/partners',                        'MerchantController@getAffiliatedPartners'                          ],
        'merchant_associated_accounts_fetch'       => ['get',      'merchant/{id}/associated_accounts',              'MerchantController@getAssociatedAccounts'                          ],

        // Webhook Api Wrapper
        'webhook_fire'                             => ['post',     'webhook/{event}/fire',                           'WebhookV2Controller@processWebhook'                                ],
        'admin_mdr_update'                         => ['put',      'mdr_update',                                     'AdminController@updateMdr'                                         ],
        'merchant_bulk_edit_attributes'            => ['post',     'merchants/bulk/attributes',                      'MerchantController@bulkEditMerchantAttributes'                     ],

        // Apspdcl integration - bridge for remote endpoint access for hosted via api.
        'apspdcl_bridge'                           => ['any',      'apspdcl/{path?}',                                'ApspdclController@any'                                             ],
        'third_party_health_check'                 => ['post',     'externalapi/health',                             'GatewayController@getExternalApiHealth'                            ],

        // Instant Activations
        'merchant_instant_activation_post'         => ['post',     'merchant/instant_activation',                    'MerchantController@saveInstantActivationDetails'                   ],

        'dynamic_netbanking_url_update'            => ['post',     'gateway/netbanking/urlsync/{driver}',            'GatewayController@updateNetbankingUrlInStatusCake'                 ],

        // subscription registration
        'subscription_registration_list_tokens'         => ['get',      'subscription_registration/tokens',                    'SubscriptionRegistrationController@listTokens'                     ],
        'subscription_registration_list_links'          => ['get',      'subscription_registration/auth_links',                'SubscriptionRegistrationController@listAuthLinks'                  ],
        'subscription_registration_create_links'        => ['post',     'subscription_registration/auth_links',                'SubscriptionRegistrationController@createAuthLink'                 ],
        'subscription_registration_nach_migration'      => ['post',     'subscription_registration/migration',                'SubscriptionRegistrationController@migrateNach'                 ],

        'download_papernach_form'                       => ['get',      '{mode}/{authlinkid}/downloadnach',                    'SubscriptionRegistrationController@downloadNach'                   ],
        'paper_nach_fetch_failure'                      => ['post',     'admin/fetchPaperMandateIssues/',                      'SubscriptionRegistrationController@fetchPaperMandateIssues'        ],
        'paper_nach_approve_failure'                    => ['post',     'admin/approvePaperMandateIssues/',                    'SubscriptionRegistrationController@approvePaperMandateIssues'      ],
        'subscription_registration_fetch_link'          => ['get',      'subscription_registration/auth_links/{id}',           'SubscriptionRegistrationController@fetchAuthLink'                  ],
        'subscription_registration_resend_link'         => ['post',     'subscription_registration/auth_links/{id}/notify_by/{medium}', 'SubscriptionRegistrationController@sendNotification'      ],
        'subscription_registration_resend_links_batch'  => ['put',      'subscription_registration/auth_links/batch/{batchId}/notify',  'SubscriptionRegistrationController@notifyAuthLinksOfBatch'],
        'subscription_registration_cancel_link'         => ['post',     'subscription_registration/auth_links/{id}/cancel',             'SubscriptionRegistrationController@cancelAuthLink'        ],
        'subscription_registration_cancel_links_batch'  => ['post',     'subscription_registration/auth_links/batch/{batch_id}/cancel', 'SubscriptionRegistrationController@cancelAuthLinksOfBatch'],
        'subscription_registration_fetch_link_internal' => ['get',      'subscription_registration/auth_links/{id}/internal',  'SubscriptionRegistrationController@fetchAuthLinkInternal'          ],
        'subscription_registration_fetch_token'         => ['get',      'subscription_registration/tokens/{id}',               'SubscriptionRegistrationController@fetchToken'                     ],
        'subscription_registration_delete_token'        => ['delete',   'subscription_registration/tokens/{id}',               'SubscriptionRegistrationController@deleteToken'                    ],
        'subscription_registration_charge_token'        => ['post',     'subscription_registration/tokens/{id}/charge',        'SubscriptionRegistrationController@chargeToken'                    ],
        'subscription_registration_charge_token_bulk'   => ['post',     'subscription_registration/tokens/charge_bulk',        'SubscriptionRegistrationController@chargeTokenBulk'                ],
        'subscription_registration_auto_charge'         => ['post',     'subscription_registration/auto_charge',               'SubscriptionRegistrationController@postProcessAutoCharges'         ],
        'token_registration_token_associate'            => ['post',     'token.registration/{id}/token_associate',             'SubscriptionRegistrationController@associateToken'                 ],
        'token_registration_tokens_authenticate'        => ['post',     'token.registration/tokens_authenticate',              'SubscriptionRegistrationController@authenticateTokens'             ],
        'auth_link_paper_mandate_authenticate'          => ['post',     'token.registration/paper_mandate/authenticate',       'SubscriptionRegistrationController@paperMandateAuthenticate'       ],
        'auth_link_paper_mandate_authenticate_proxy'    => ['post',     'token.registration/paper_mandate/authenticate/proxy', 'SubscriptionRegistrationController@paperMandateAuthenticateProxy'  ],
        'auth_link_paper_mandate_retry_token'           => ['post',     'token.registration/paper_mandate/token/{id}/retry',    'SubscriptionRegistrationController@retryPaperMandateToken'        ],
        'auth_link_paper_mandate_validate'              => ['post',     'token.registration/paper_mandate/validate',           'SubscriptionRegistrationController@paperMandateValidate'           ],
        'auth_link_paper_mandate_validate_proxy'        => ['post',     'token.registration/paper_mandate/validate/proxy',     'SubscriptionRegistrationController@paperMandateValidate'           ],
        'get_paper_mandate_uploaded_url'                => ['get',      'token.registration/paper_mandate/uploaded_form',      'SubscriptionRegistrationController@getUploadedPaperMandateForm'    ],
        'nach_register_test_payment_authorize_or_fail'  => ['post',     'token.registration/auth_links/{id}/paper_mandate/test_payment','SubscriptionRegistrationController@nachRegisterTestPaymentAuthorizeOrFail'],

        'merchant_submit_support_call_request'      => ['post',     'merchants/support_call',                         'MerchantController@submitSupportCallRequest'                       ],
        'can_merchant_submit_support_call_request'  => ['get',      'merchants/support_call/can_submit',              'MerchantController@canSubmitSupportCallRequest'                    ],
        'get_merchant_support_option_flags'         => ['get',      'merchants/support/option/flags',                 'MerchantController@getMerchantSupportOptionFlags'                    ],
        'merchant_es_sync_cron'                     => ['post',     'merchant/sync_es/bulk',                          'MerchantController@syncMerchantsToEs'                              ],

        // Banking Contact Routes
        'contact_get'                              => ['get',      'contacts/{id}',                                  'ContactController@get'                                             ],
        'contact_get_internal'                     => ['get',      'contacts_internal/{id}',                         'ContactController@get'                                             ],
        'contact_get_checkout'                     => ['get',      'checkout/contacts/{id}',                         'ContactController@getContactDetailsForCheckout'                    ],
        'contact_list_internal'                    => ['get',      'contacts_internal',                              'ContactController@list'                                            ],
        'contact_update_internal'                  => ['post',     'contacts_internal/{id}',                         'ContactController@update'                                          ],
        'contact_list'                             => ['get',      'contacts',                                       'ContactController@list'                                            ],
        'contact_create'                           => ['post',     'contacts',                                       'ContactController@create'                                          ],
        'contact_create_internal'                  => ['post',     'contacts_internal',                              'ContactController@create'                                          ],
        //TODO: This is a hack, till batch changes with new endpoint are deployed in production - https://razorpay.atlassian.net/browse/RX-798
        'bulk_contact_create'                      => ['post',     'contacts/bulk',                                  'FundAccountController@createFundAccountBulk'                       ],
        'contact_update'                           => ['patch',    'contacts/{id}',                                  'ContactController@update'                                          ],
        'contact_delete'                           => ['delete',   'contacts/{id}',                                  'ContactController@delete'                                          ],
        'contact_types_get'                        => ['get',      'contacts/types',                                 'ContactController@getTypes'                                        ],
        'contact_types_post'                       => ['post',     'contacts/types',                                 'ContactController@postType'                                        ],
        'contact_types_get_internal'               => ['get',      'contacts_internal/types',                        'ContactController@getTypes'                                        ],
        'contact_create_address'                   => ['post',     'contacts/{id}/addresses',                        'ContactController@postCreateAddress'                               ],
        'contact_fetch_addresses'                  => ['get',      'contacts/{id}/addresses',                        'ContactController@getAddresses'                                    ],
        'contact_fetch_address'                    => ['get',      'contacts/{contactId}/addresses/{addressId}',     'ContactController@getAddress'                                      ],

        // Fund Account Validation
        'fund_account_validate'                    => ['post',     'fund_accounts/validations',                      'FundAccountValidationController@create'                            ],
        'fund_account_validate_fetch'              => ['get',      'fund_accounts/validations',                      'FundAccountValidationController@list'                              ],
        'fund_account_validate_fetch_by_id'        => ['get',      'fund_accounts/validations/{id}',                 'FundAccountValidationController@get'                               ],
        'fund_account_validate_bulk_patch_status'  => ['patch',    'fund_accounts/validations/bulk/fail',            'FundAccountValidationController@bulkPatchFavAsFailed'              ],

        //admin dashboard access
        'admin_fetch_fund_account_validate'        => ['get',      'fund_accounts/validations/{merchantId}/{favId}', 'FundAccountValidationController@getFavByMerchantIdAndFavId'        ],
        'admin_fund_account_validate'              => ['post',     'fund_accounts/validations/admin',                'FundAccountValidationController@create'                            ],

        'fund_account_get'                         => ['get',      'fund_accounts/{id}',                             'FundAccountController@get'                                         ],
        'fund_account_get_internal'                => ['get',      'fund_accounts_internal/{id}',                    'FundAccountController@get'                                         ],
        'fund_account_list'                        => ['get',      'fund_accounts',                                  'FundAccountController@list'                                        ],
        'fund_account_list_internal'               => ['get',      'fund_accounts_internal',                         'FundAccountController@list'                                        ],
        'fund_account_create'                      => ['post',     'fund_accounts',                                  'FundAccountController@create'                                      ],
        'fund_account_create_internal'             => ['post',     'fund_accounts_internal',                         'FundAccountController@create'                                      ],
        'fund_account_create_public'               => ['post',     'fund_accounts/public',                           'FundAccountController@create'                                      ],
        'fund_account_update'                      => ['patch',    'fund_accounts/{id}',                             'FundAccountController@update'                                      ],
        'fund_account_update_internal'             => ['patch',    'fund_accounts_internal/{id}',                    'FundAccountController@update'                                      ],
        'fund_account_delete'                      => ['delete',   'fund_accounts/{id}',                             'FundAccountController@delete'                                      ],
        'fund_account_bulk_create'                 => ['post',     'fund_accounts/bulk',                             'FundAccountController@createFundAccountBulk'                       ],

        // corporate cards routes
        'corporate_card_token_create'              => ['post',     'corporate_cards/token/{token}',                  'CorporateCardController@create'                                    ],
        'corporate_card_update'                    => ['patch',    'corporate_cards/{id}',                           'CorporateCardController@update'                                    ],
        'corporate_card_get'                       => ['get',      'corporate_cards/{id}',                           'CorporateCardController@get'                                       ],
        'corporate_card_list'                      => ['get',      'corporate_cards',                                'CorporateCardController@list'                                      ],
        'corporate_card_iframe_form'               => ['get',      'corporate_cards/iframe/form',                    'CorporateCardController@renderForm'                                ],


        // Banking statement routes
        'transaction_statement_fetch'              => ['get',      'transactions/{id}',                              'StatementController@get'                                           ],
        'transaction_statement_fetch_multiple'     => ['get',      'transactions',                                   'StatementController@list'                                          ],

        'transaction_statement_fetch_multiple_for_banking'          => ['get',   'transactions_banking',                      'StatementController@listForBanking'                       ],
        'transaction_statement_fetch_multiple_for_banking_internal' => ['get',   'transactions_banking_internal',             'StatementController@listForBanking'                       ],

        'credit_repayment_transaction_create'      => ['post',     'credit_repayments/transaction',                  'TransactionController@createCreditRepaymentTransaction'            ],
        'capital_transaction_create'               => ['post',     'capital_balances/transaction',                   'TransactionController@createCapitalTransaction'                    ],
        'capital_multiple_transaction_create'      => ['post',     'capital_balances/multi_transactions',            'TransactionController@createMultipleCapitalTransactions'           ],

        'ledger_fetch_multiple_transactions'        => ['post',     'ledger/transactions',                            'TransactionController@list'                                        ],

        // TODO:remove after migration,
        // Temporary route to fix settled_at in case of fund account validation
        'transaction_settled_data_fix'             => ['post',     'transactions/{entity}/settled/fix',              'TransactionController@fixSettled'                                  ],

        //API Routes for FTS
        'update_fts_fund_transfer'                 => ['post',     'update_fts_fund_transfer',                       'FundTransferAttemptController@updateSource'                        ],
        'update_fts_nodal_beneficiary'             => ['post',     'update_fts_nodal_beneficiary',                   'NodalBeneficiaryController@createOrUpdateNodalBeneficiary'         ],
        'fetch_nodal_beneficiary_code'             => ['get',      'fetch_nodal_beneficiary_code',                   'NodalBeneficiaryController@fetchNodalBeneficiaryCode'              ],

        // API Route for Vault
        'vault_token_create'                       => ['post',     'vault_token_create',                             'AdminController@createVaultToken'                                  ],
        'vault_token_renewal'                      => ['post',     'vault_token_renew',                              'AdminController@renewVaultToken'                                   ],

        'entity_origin_create'                     => ['post',     'entity_origins',                                 'EntityOriginController@create'                                     ],
        'create_credit_note'                       => ['post',     'creditnote',                                     'CreditNoteController@create'                                       ],
        'credit_note_list'                         => ['get',      'creditnote',                                     'CreditNoteController@list'                                         ],
        'credit_note_get'                          => ['get',      'creditnote/{id}',                                'CreditNoteController@get'                                          ],
        'credit_note_apply'                        => ['post',     'creditnote/{id}/apply',                          'CreditNoteController@apply'                                        ],

        // Governor Proxy APIs - Namespace
        'governor_create_namespace'               => ['post',     '{source}/rule_engine/namespace',                                                                           'GovernorController@createNamespace'    ],

        // Governor Proxy APIs - Domain Model
        'governor_domain_model_list'              => ['get',      '{source}/rule_engine/data_model/{namespace}',                                                              'GovernorController@getDomainModels'    ],
        'governor_create_domain_model'            => ['post',     '{source}/rule_engine/data_model/{namespace}',                                                              'GovernorController@createDomainModel'  ],
        'governor_update_namespace'               => ['put',      '{source}/rule_engine/data_model/{namespace}',                                                              'GovernorController@updateDomainModel'  ],

        // Governor Proxy APIs - Rule
        'governor_create_rule'                    => ['post',     '{source}/rule_engine/rule/{namespace}',                                                                    'GovernorController@createRule'         ],
        'governor_create_rule_bulk'               => ['post',     '{source}/rule_engine/rule/{namespace}/bulk',                                                               'GovernorController@createRules'        ],
        'governor_update_rule'                    => ['put',      '{source}/rule_engine/rule/{namespace}',                                                                    'GovernorController@updateRule'         ],
        'governor_update_rule_bulk'               => ['put',      '{source}/rule_engine/rule/{namespace}/bulk',                                                               'GovernorController@updateRules'        ],
        'governor_rule_list'                      => ['get',      '{source}/rule_engine/rule/{namespace}',                                                                    'GovernorController@getRules'           ],
        'governor_get_rule'                       => ['get',      '{source}/rule_engine/rule/{namespace}/{rulename}',                                                         'GovernorController@getRule'            ],

        // Governor Proxy APIs - Rule Chain
        'governor_create_rule_chain'              => ['post',     '{source}/rule_engine/rule_chain/{namespace}',                                                              'GovernorController@createRuleChain'    ],
        'governor_update_rule_chain'              => ['put',      '{source}/rule_engine/rule_chain/{namespace}',                                                              'GovernorController@updateRuleChain'    ],
        'governor_rule_chain_list'                => ['get',      '{source}/rule_engine/rule_chain/{namespace}',                                                              'GovernorController@getRuleChains'      ],

        // Governor Proxy APIs - Execute Rule Chain
        'governor_rule_chain_execute'             => ['post',     '{source}/rule_engine/execute/rule_chain/{namespace}',                                                      'GovernorController@executeChains'      ],

        //
        // Governor Proxy APIs New
        //

        'governor_get_client_v1'                  => ['get',      'clients',                                                                                                  'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Namespace
        'governor_create_namespace_v1'            => ['post',     'clients/{client_id}/namespaces',                                                                           'GovernorController@proxy'              ],
        'governor_list_namespace_v1'              => ['get',      'clients/{client_id}/namespaces',                                                                           'GovernorController@proxy'              ],
        'governor_get_namespace_v1'               => ['get',      'namespaces/{namespace_id}',                                                                                'GovernorController@proxy'              ],
        'governor_update_namespace_v1'            => ['put',      'namespaces/{namespace_id}',                                                                                'GovernorController@proxy'              ],
//        'governor_delete_namespace_v1'            => ['delete',   'namespaces/{namespace_id}',                                                                                'GovernorController@proxy'              ],

        //   Governor Proxy APIs New - GatewayConfig
        'governor_create_config_v1'               => ['post',     'namespaces/{namespace_id}/config',                                                                         'GovernorController@proxy'              ],
        'governor_list_config_v1'                 => ['get',      'namespaces/{namespace_id}/config',                                                                         'GovernorController@proxy'              ],
        'governor_list_config_map_v1'             => ['get',      'namespaces/{namespace_id}/config_map',                                                                     'GovernorController@proxy'              ],
        'governor_get_config_v1'                  => ['get',      'namespaces/{namespace_id}/config/{config_name}',                                                           'GovernorController@proxy'              ],
        'governor_update_config_v1'               => ['put',      'namespaces/{namespace_id}/config/{config_name}',                                                           'GovernorController@proxy'              ],
        'governor_delete_config_v1'               => ['delete',   'namespaces/{namespace_id}/config/{config_name}',                                                           'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Template
        'governor_create_template_v1'             => ['post',     'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/templates',              'GovernorController@proxy'              ],
        'governor_list_template_v1'               => ['get',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/templates',              'GovernorController@proxy'              ],
        'governor_update_template_v1'             => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/templates/{id}',         'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Rule
        'governor_create_rule_v1'                 => ['post',     'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules',                  'GovernorController@proxy'              ],
        'governor_list_rule_v1'                   => ['get',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules',                  'GovernorController@proxy'              ],
        'governor_get_rule_v1'                    => ['get',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules/{rule_id}',        'GovernorController@proxy'              ],
        'governor_delete_rule_v1'                 => ['delete',   'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules/{rule_id}',        'GovernorController@proxy'              ],
        'governor_update_rule_v1'                 => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules/{rule_id}',        'GovernorController@proxy'              ],
        'governor_update_rule_index_v1'           => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}/rules/{rule_id}/index',  'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Rule Chain
        'governor_list_rule_chains_v1'            => ['get',      'namespaces/{namespace_id}/rule_chains',                                                                    'GovernorController@proxy'              ],
        'governor_create_rule_chain_v1'           => ['post',     'namespaces/{namespace_id}/rule_chains',                                                                    'GovernorController@proxy'              ],
        'governor_update_rule_chain_v1'           => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}',                                                    'GovernorController@proxy'              ],
        'governor_delete_rule_chain_v1'           => ['delete',   'namespaces/{namespace_id}/rule_chains/{rule_chain_id}',                                                    'GovernorController@proxy'              ],
        'governor_update_chain_group_sequence_v1' => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/group_sequence',                                     'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Rule Groups
        'governor_list_rule_groups_v1'            => ['get',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups',                                        'GovernorController@proxy'              ],
        'governor_create_rule_group_v1'           => ['post',     'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups',                                        'GovernorController@proxy'              ],
        'governor_create_bulk_rule_group_v1'      => ['patch',    'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/bulk',                                   'GovernorController@proxy'              ],
        'governor_get_rule_group_v1'              => ['get',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}',                        'GovernorController@proxy'              ],
        'governor_delete_rule_group_v1'           => ['delete',   'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}',                        'GovernorController@proxy'              ],
        'governor_update_rule_group_v1'           => ['put',      'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/rule_groups/{rule_group_id}',                        'GovernorController@proxy'              ],

        // Governor Proxy APIs New - Search
        'governor_search_rules'                     => ['post',     'namespaces/{namespace_id}/rule_chains/{rule_chain_id}/search',                                           'GovernorController@proxy'              ],

        // Optimizer On-boarding
        'governor_optimizer_create_merchant'        => ['post',     'optimizer/merchant/create',                                                                              'GovernorController@proxy'              ],
        'governor_optimizer_update_merchant'        => ['put',      'optimizer/merchant/update',                                                                              'GovernorController@proxy'              ],

        // Governor Optimizer
        'governor_list_merchant_providers'          => ['get',      'merchant/mid/providers',                                                                                 'GovernorController@proxy'              ],
        'governor_list_merchant_rule_groups'        => ['get',      'merchant/mid/rule_groups',                                                                               'GovernorController@proxy'              ],
        'governor_get_merchant_rule_group'          => ['get',      'merchant/mid/rule_groups/{rule_group_id}',                                                               'GovernorController@proxy'              ],
        'governor_reorder_merchant_rule_groups'     => ['put',      'merchant/mid/reorder_rule_groups',                                                                       'GovernorController@proxy'              ],
        'governor_update_merchant_rule_group'       => ['put',      'merchant/mid/rule_groups/{rule_group_id}',                                                               'GovernorController@proxy'              ],
        'governor_update_merchant_rule_group_mode'  => ['put',      'merchant/mid/rule_groups/{rule_group_id}/mode/{mode}',                                                   'GovernorController@proxy'              ],
        'governor_create_merchant_rule_group'       => ['post',     'merchant/mid/rule_groups',                                                                               'GovernorController@proxy'              ],
        'governor_delete_merchant_rule_group'       => ['delete',   'merchant/mid/rule_groups/{rule_group_id}',                                                               'GovernorController@proxy'              ],
        'governor_optimizer_events'                 => ['get',      'optimizer/events/payment',                                                                               'GovernorController@proxyWithQueryParams'              ],
        'governor_optimizer_rulegroup_stats'        => ['get',      'optimizer/stats/rule_group',                                                                             'GovernorController@proxyWithQueryParams'              ],
        'governor_optimizer_merchant_stats'         => ['post',      'optimizer/stats/merchant',                                                                              'GovernorController@proxy'              ],
        'governor_routing_events'                   => ['post',      'router/events/payment',                                                                                 'GovernorController@proxy'              ],


        'gateway_downtime_for_payment'            => ['POST',     'router/gateway/downtimes',                                  'GatewayController@getGatewayDowntimeForRouter'             ],
        'router_gateway_downtime_create'          => ['post',     'create_update_downtime',                                    'SmartRoutingController@proxy'                              ],
        'router_gateway_downtime_delete'          => ['post',     'resolve_downtime',                                          'SmartRoutingController@proxy'                              ],
        'router_gateway_downtime_fetch'           => ['post',     'fetch_downtime',                                            'SmartRoutingController@proxy'                              ],
        'router_refresh_cron'                     => ['post',     'refresh_cache',                                             'SmartRoutingController@refreshCron'                        ],

        'banking_account_create'                  => ['post',     'banking_accounts',                                          'BankingAccountController@create'                           ],
        'banking_account_create_dashboard'        => ['post',     'banking_accounts_dashboard',                                'BankingAccountController@createDashboard'                  ],
        'banking_account_create_dashboard_admin'  => ['post',     'banking_accounts_admin_dashboard',                          'BankingAccountController@createDashboard'                  ],
        'banking_account_create_lms_mob'          => ['post',     'banking_accounts_lms_mob',                                  'BankingAccountController@create'                           ],
        'banking_account_create_admin'            => ['post',     'banking_accounts_admin',                                    'BankingAccountController@create'                           ],
        'banking_account_create_salesforce'       => ['post',     'salesforce/banking_account/rbl',                            'BankingAccountController@create'                           ],
        'banking_account_get_salesforce'          => ['get',      'salesforce/banking_accounts/{id}',                          'BankingAccountController@get'                               ],
        'banking_account_activate'                => ['post',     'banking_accounts/{id}/activate',                            'BankingAccountController@activate'                         ],
        'banking_serviceable_pincodes'            => ['post',     'banking_account/serviceability/{channel}/pincodes',         'BankingAccountController@postServiceablePincodes'          ],
        'admin_fetch_banking_accounts_multiple'   => ['get',      'admin_lms/banking_accounts',                                'BankingAccountController@fetchMultipleRblApplicationsFromApiAndBas' ],
        'admin_fetch_banking_account'             => ['get',      'admin_lms/banking_accounts/{id}',                           'BankingAccountController@fetchRblApplicationFromApiAndBas'          ],
        'banking_accounts_list'                   => ['get',      'banking_accounts',                                          'BankingAccountController@list'                             ],
        'activated_banking_accounts_list'         => ['get',      'banking_accounts/activated',                                'BankingAccountController@fetchActivatedAccounts'           ],
        'banking_accounts_list_internal'          => ['get',      'banking_accounts_internal',                                 'BankingAccountController@list'                             ],
        'banking_accounts_get'                    => ['get',      'banking_accounts/{id}',                                     'BankingAccountController@get'                               ],
        'banking_accounts_get_internal'           => ['get',      'banking_accounts_internal/{id}',                            'BankingAccountController@get'                              ],
        'banking_account_update'                  => ['patch',    'banking_accounts/{id}',                                     'BankingAccountController@update'                           ],
        'banking_account_update_lms_mob'          => ['patch',    'banking_accounts_lms_mob/{id}',                             'BankingAccountController@update'                           ],
        'banking_account_update_dashboard'        => ['patch',    'banking_accounts_dashboard/{id}',                           'BankingAccountController@updateDashboard'                  ],
        'banking_account_verify_otp'              => ['post',      'banking_accounts/verify_otp/{id}',                         'BankingAccountController@verifyOtp'],
        'banking_account_send_notification_to_spoc_cron' => ['any', 'banking_accounts/send_notification',                      'BankingAccountController@sendNotificationToSPOC'],
        'banking_account_bulk_assign_reviewer'    => ['post',     'banking_accounts/reviewers',                                'BankingAccountController@bulkAssignReviewer'               ],
        'banking_account_gateway_balance_fetch'   => ['put',      'banking_accounts/gateway/{channel}/balance',                'BankingAccountController@processGatewayBalanceUpdate'      ],
        'banking_account_create_lead'             => ['post',     'banking_accounts/rbl/lead',                                 'BankingAccountController@createRblLead'                    ],
        'banking_account_webhook_account_info'    => ['post',     'banking_accounts/webhooks/account_info/{channel}',          'BankingAccountController@processAccountInfoWebhook'        ],
        'banking_account_webhook_account_info'
         . '_internal'                            => ['post',     '/banking_accounts/internal/webhooks/account_info/{channel}','BankingAccountController@processAccountInfoWebhook'        ],

        'banking_account_webhook_data_reset'      => ['post',     'banking_accounts/{id}/webhooks/account_info/reset',         'BankingAccountController@resetWebhookData'                 ],
        'banking_account_customer_appointment_dates'      => ['get',     'banking_accounts/customer_appointment_dates/{city}',  'BankingAccountController@getCustomerAppointmentDateOptions'],

        'banking_account_activation_status_'
        . 'change_log'                            => ['get',      'banking_accounts/activation/{id}/status_change_log',        'BankingAccountController@getActivationStatusChangeLog'   ],
        'banking_account_comments_create'         => ['post',     'banking_accounts/activation/{id}/comments',                 'BankingAccountController@createActivationComment'        ],
        'banking_account_comments_list'           => ['get',      'banking_accounts/activation/{id}/comments',                 'BankingAccountController@getActivationComments'          ],
        'banking_account_comment_edit'            => ['patch',    'banking_accounts/activation/comments/{id}',                 'BankingAccountController@patchUpdateActivationComment'   ],
        'banking_account_comments_create_batch'   => ['post',     'banking_accounts/activation/comments/batch',                'BankingAccountController@postActivationCommentsFromBatchService'],
        'banking_account_call_log_list'           => ['get',      'banking_accounts/activation/{id}/call_logs',                'BankingAccountController@getActivationCallLogs'          ],
        'banking_account_activation_details'.
        '_via_batch'                              => ['post',     'banking_accounts/activation/details/batch',                'BankingAccountController@postUpdateActivationDetailsFromBatchService' ],

        'banking_account_statement_generate'            => ['post',     'banking_account_statement/generate',                        'BankingAccountStatementController@generate'                                  ],
        'banking_account_statement_process_cron'        => ['post',     'banking_account_statement/process',                         'BankingAccountStatementController@fetchStatementForAccount'                  ],

        'banking_account_statement_process_pool'        => ['post',     'banking_account_statement/pool/process',                    'BankingAccountStatementController@fetchStatementForPoolAccount'              ],
        'banking_account_statement_channel_fetch'       => ['post',     'banking_account_statement/process/{channel}',               'BankingAccountStatementController@processAccountStatementForChannel'         ],
        'banking_account_statement_insert_missing'      => ['post',     'banking_account_statement/insert_missing',                  'BankingAccountStatementController@insertMissingStatements'                   ],
        'banking_account_statement_insert_missing_cron' => ['post',     'banking_account_statement/cron/insert_missing',             'BankingAccountStatementController@insertMissingStatements'                   ],
        'banking_account_statement_fetch_missing'       => ['post',     'banking_account_statement/fetch_missing/{channel}',         'BankingAccountStatementController@fetchMissingAccountStatementsForChannel'   ],
        'banking_account_statement_fetch_missing_cron'  => ['post',     'banking_account_statement/cron/fetch_missing/{channel}',    'BankingAccountStatementController@fetchMissingAccountStatementsForChannel'   ],
        'banking_account_statement_automate_recon_cron' => ['post',     'banking_account_statement/cron/automate_recon/{channel}',   'BankingAccountStatementController@automateAccountStatementsReconByChannel'   ],
        'banking_account_statement_update_missing'      => ['post',     'banking_account_statement/update_missing/{channel}',        'BankingAccountStatementController@handleMissingStatementUpdateBatchFailure'  ],

        'banking_account_statement_details_create'      => ['post',     'banking_account_statement/details',                         'BankingAccountStatementController@createBankingAccountStatementDetails'      ],
        'banking_account_statement_fetch'               => ['post',     'banking_account_statement/process_fetch',                         'BankingAccountStatementController@processStatementFetch'               ],
        'banking_account_statement_detect_missing'      => ['post',     'banking_account_statement/detect_missing/{channel}',        'BankingAccountStatementController@detectMissingStatements'                   ],
        'banking_account_statement_detect_missing_cron' => ['post',     'banking_account_statement/cron/detect_missing/{channel}',   'BankingAccountStatementController@detectMissingStatements'                   ],

        'banking_account_statement_async_insert_missing'      => ['post',     'banking_account_statement/insert_missing/{channel}',        'BankingAccountStatementController@insertMissingStatementsAsync'        ],
        'banking_account_statement_async_insert_missing_cron' => ['post',     'banking_account_statement/cron/insert_missing/{channel}',   'BankingAccountStatementController@insertMissingStatementsAsync'        ],

        'banking_account_activation_detail_create'=> ['post',     'banking_accounts/activation/{id}/details',                   'BankingAccountController@postCreateActivationDetail'       ],
        'banking_account_activation_detail'
        .'_update'                                => ['patch',    'banking_accounts/activation/{id}/details',                   'BankingAccountController@patchActivationDetail'            ],
        'banking_account_activation_detail'
        .'_update_internal'                        => ['patch',    'banking_accounts_internal/activation/{id}/details',                   'BankingAccountController@patchActivationDetail'            ],
        'banking_account_activation_detail'
        .'_slot_booking'                          => ['post',    'banking_accounts/activation/{id}/details/slot_booking',      'BankingAccountController@addActivationSlotBookingDetail'   ],

        'banking_account_activation_mis_download' => ['get',      'banking_accounts/activation/mis/download',                  'BankingAccountController@downloadActivationMis'            ],
        'banking_account_activation_mis_report'   => ['get',      'banking_accounts/activation/mis/report',                    'BankingAccountController@requestActivationMisReport'       ],

        // Bank LMS Routes
        'banking_account_bank_lms_fetch_multiple'         => ['get', 'banking_accounts/rbl/lms/banking_account', 'BankingAccountController@fetchMultipleBankingAccountEntity'],
        'banking_account_bank_lms_fetch_by_id'            => ['get', 'banking_accounts/rbl/lms/banking_account/{id}', 'BankingAccountController@fetchBankingAccountEntityById'],
        'banking_account_bank_lms_patch_lead'             => ['patch', 'banking_accounts/rbl/lms/banking_account/{id}', 'BankingAccountController@updateBankingAccountLeadByBank'],
        'banking_account_bank_lms_activity_list'          => ['get', 'banking_accounts/rbl/lms/activation/{id}/activity', 'BankingAccountController@fetchBankingAccountActivationActivityById'],
        'banking_account_bank_lms_comments_list'          => ['get', 'banking_accounts/rbl/lms/activation/{id}/comments', 'BankingAccountController@fetchBankingAccountActivationCommentsById'],
        'banking_account_bank_lms_comment_create'         => ['post', 'banking_accounts/rbl/lms/activation/{id}/comments', 'BankingAccountController@createBankingAccountActivationComment'],
        'banking_account_bank_lms_download_mis'           => ['get', 'banking_accounts/rbl/lms/activation/mis/download', 'BankingAccountController@downloadActivationMisForBank'],
        'banking_account_bank_lms_send_complete_mis'      => ['get', 'banking_accounts/rbl/lms/activation/mis/send_report', 'BankingAccountController@requestActivationMisForBank'],
        'banking_account_bank_lms_assign_bank_poc'        => ['patch', 'banking_accounts/rbl/lms/activation/{id}/bank_poc', 'BankingAccountController@assignBankPocUserToApplication'],
        'update_to_ca_onboarding_partner_type'            => ['patch', 'banking_accounts/rbl/lms/merchant/admin/partner_type', 'BankingAccountController@updatePartnerTypeToMerchantBankCaOnboarding'],
        'create_invitation_for_ca_onboarding_partner'     => ['post', 'banking_accounts/rbl/lms/merchant/admin/invitation', 'InvitationController@sendBankLmsInvitations'],
        'fetch_branch_list'                               => ['get','banking_accounts/rbl/lms/bank_branches','BankingAccountController@fetchBranchList'],
        'fetch_rm_list'                                   => ['get','banking_accounts/rbl/lms/bank_pocs','BankingAccountController@fetchRmList'],
        'banking_account_bank_lms_assign_to_partner_bulk' => ['post', 'banking_accounts/rbl/lms/banking_account/assign_partner', 'BankingAccountController@attachCaApplicationMerchantToBankPartnerBulk'],

        'banking_account_statement_source_update'            => ['post',   'banking_account_statement/source/update',                  'BankingAccountStatementController@updateSourceLinking'            ],
        'banking_account_statement_source_update_validate'   => ['post',   'banking_account_statement/source/update/validate',         'BankingAccountStatementController@validateSourceLinkingUpdate'            ],

        'banking_account_activation_spocs'        => ['get',      'banking_accounts/activation/spocs',                          'BankingAccountController@getBankingAccountSalesPOCs'       ],
        'banking_account_ops_mx_pocs'             => ['get',      'banking_accounts/activation/ops_mx_pocs',                    'BankingAccountController@getBankingAccountOpsMxPocs'       ],
        'banking_accounts_auditor_daily_updates'  => ['post',     'banking_accounts/activation/{auditorType}/daily-updates',   'BankingAccountController@sendDailyUpdatesToAuditors'        ],

        // Create for payout service
        'banking_account_fetch_by_account_number' => ['get',      'banking_accounts/{account_number}/{merchant_id}',           'BankingAccountController@getBankingAccountForAccountNumber'],
        'banking_account_fetch_by_balance_id'     => ['get',      'banking_accounts_balance_id/{balance_id}',                  'BankingAccountController@getBankingAccountForBalanceId'],
        'banking_account_beneficiary_fetch'       => ['get',      'banking_accounts_beneficiary/{account_number}/{ifsc}',           'BankingAccountController@getBankingAccountBeneficiary'],

        'rbl_current_account_serviceability_get'  => ['get',      'banking_accounts/serviceability/rbl/pincode/{pincode}',      'BankingAccountController@checkPincodeServiceabilityByRBL'       ],

        'rbl_current_account_serviceability_get_admin'  => ['get',      'banking_accounts_admin/serviceability/rbl/pincode/{pincode}',      'BankingAccountController@checkPincodeServiceabilityByRBL'       ],

        'fetch_throttle_settings'                 => ['get',      'throttle/settings',                                         'ThrottleController@list'                                   ],
        'edit_throttle_settings'                  => ['put',      'throttle/settings',                                         'ThrottleController@create'                                 ],
        'bootstrap_key_cache'                     => ['post',     'throttle/bootstrap_key_cache',                              'ThrottleController@bootstrapKeyCache'                      ],
        'throttle_migrate_redis'                  => ['post',     'throttle/throttle_migrate_redis',                           'ThrottleController@migrateThrottleKeysFromRedisLabs'        ],
        'throttle_create_config'                  => ['post',     'throttle/config',                                           'ThrottleController@createConfig'                           ],
        'throttle_create_config_spinnaker'        => ['post',     'spinnaker/throttle/config',                                 'ThrottleController@createConfig'                           ],
        'throttle_get_config'                     => ['get',      'throttle/config',                                           'ThrottleController@fetchConfig'                            ],
        'throttle_delete_config'                  => ['delete',   'throttle/config',                                           'ThrottleController@deleteConfig'                           ],

        'edge_list_services'                      => ['get',      'edge/services',                                             'EdgeThrottleController@listServices'                       ],
        'edge_list_routes'                        => ['get',      'edge/service/{service}/routes',                             'EdgeThrottleController@listRoutes'                         ],
        'edge_create_rate_limit_rule'             => ['post',     'edge/rate_limiter/rule',                                    'EdgeThrottleController@createRule'                         ],
        'edge_list_rate_limit_rules'              => ['get',      'edge/rate_limiter/rules',                                   'EdgeThrottleController@listRules'                          ],
        'edge_update_rate_limit_rule'             => ['patch',    'edge/rate_limiter/rule/{id}',                               'EdgeThrottleController@updateRule'                         ],
        'edge_delete_rate_limit_rule'             => ['delete',   'edge/rate_limiter/rule/{id}',                               'EdgeThrottleController@deleteRule'                         ],
        'edge_create_rate_limit_limit'            => ['post',     'edge/rate_limiter/rule/{rule_id}/limit',                    'EdgeThrottleController@createLimit'                        ],
        'edge_list_rate_limit_limits'             => ['get',      'edge/rate_limiter/limits',                                  'EdgeThrottleController@listLimits'                         ],
        'edge_update_rate_limit_limit'            => ['patch',    'edge/rate_limiter/limit/{id}',                              'EdgeThrottleController@updateLimit'                        ],
        'edge_delete_rate_limit_limit'            => ['delete',   'edge/rate_limiter/limit/{id}',                              'EdgeThrottleController@deleteLimit'                        ],
        'edge_update_rate_limit_spinnaker'        => ['patch',    'spinnaker/edge/rate_limiter/limit/{id}',                    'EdgeThrottleController@updateLimit'                        ],
        'waf_rule_signed_url'                     => ['get',      'edge/waf_rules_url',                                        'EdgeThrottleController@getWAFRulesSignedURL'               ],
        'edge_get_consumer'                       => ['get',      'edge/consumers/{id}',                                       'EdgeThrottleController@getConsumer'                        ],
        'developer_console_action'                => ['post',     'developer_console/{type}/fetch/{action}',                   'DeveloperConsoleController@dashboardSearch'                ],
        'developer_console_maintenance'           => ['post',     'developer_console/{type}/re-arrange',                       'DeveloperConsoleController@runMaintenance'                 ],
        'developer_console_merchant_action'       => ['post',     'developer_console/merchant/{path?}',                        'DeveloperConsoleController@merchantDashboard'              ],
        'developer_console_admin_action'          => ['post',     'developer_console/admin/{path?}',                           'DeveloperConsoleController@adminDashboard'                 ],

        //merchant document related routes
        'merchant_document_delete'                => ['delete',   'merchant/documents/{id}',                                   'DocumentController@delete'                                 ],
        'merchant_document_upload'                => ['post',     'merchant/documents/upload',                                 'DocumentController@uploadMerchantDocuments'                ],
        'merchant_document_upload_internal'       => ['post',     'merchant/internal/documents/{id}/upload',                   'DocumentController@uploadMerchantDocumentsInternal'        ],
        'merchant_document_fetch'                 => ['get',      'merchant/documents',                                        'DocumentController@getMerchantDocuments'                   ],
        'merchant_document_admin_fetch'           => ['get',      'merchant/documents/{mid}',                                  'DocumentController@getMerchantDocumentsByAdmin'            ],
        'merchant_document_types_fetch'           => ['get',      'merchant_document/types',                                   'DocumentController@getDocumentTypes'                       ],
        'merchant_document_admin_upload'          => ['post',     'merchant_document',                                         'DocumentController@uploadFilesByAgent'                     ],
        'merchant_document_admin_delete'          => ['delete',   'merchant/{mid}/document/{id}',                              'DocumentController@merchantDocumentDelete'                       ],
        'merchant_document_url_fetch'             => ['get',      'merchant/document/url/{document_id}',                       'DocumentController@getSignedUrl'                           ],

        //account and stakeholder document related routes
        'document_upload_v1'                         => ['post',      'documents',                                                          'GenericDocumentController@uploadDocumentV1'                ],
        'document_get_v1'                            => ['get',       'documents/{fileStoreId}',                                            'GenericDocumentController@getDocumentV1'                   ],
        'document_download_v1'                       => ['get',       'documents/{fileStoreId}/content',                                    'GenericDocumentController@getDocumentContentV1'            ],
        'document_upload_v2'                         => ['post',      'documents',                                                          'GenericDocumentController@uploadDocument'                  ],
        'document_get_v2'                            => ['get',       'documents/{fileStoreId}',                                            'GenericDocumentController@getDocument'                     ],
        'document_download_v2'                       => ['get',       'documents/{fileStoreId}/content',                                    'GenericDocumentController@getDocumentContent'              ],
        'link_account_documents_v2'                  => ['post',      'accounts/{accountId}/documents',                                     'DocumentControllerV2@postAccountDocumentsByPartner'        ],
        'get_account_documents_v2'                   => ['get',       'accounts/{accountId}/documents',                                     'DocumentControllerV2@getAccountDocuments'                  ],
        'link_stakeholder_documents_v2'              => ['post',      'accounts/{accountId}/stakeholders/{stakeholderId}/documents',        'DocumentControllerV2@postStakeHolderDocumentsByPartner'    ],
        'get_stakeholder_documents_v2'               => ['get',       'accounts/{accountId}/stakeholders/{stakeholderId}/documents',        'DocumentControllerV2@getStakeHolderDocuments'              ],

        // Excel Store Proxy APIs
        'excel_store_list_pages'                  => ['get',      'excel-store/pages',                                         'ExcelStoreController@dummy'                                  ],
        'excel_store_create_page'                 => ['post',     'excel-store/pages',                                         'ExcelStoreController@dummy'                                  ],
        'excel_store_update_page'                 => ['put',      'excel-store/pages/{id}',                                    'ExcelStoreController@dummy'                                  ],
        'excel_store_get_records'                 => ['get',      'excel-store/pages/{id}/records',                            'ExcelStoreController@dummy'                                  ],
        'excel_store_update_records'              => ['post',     'excel-store/pages/{id}/records',                            'ExcelStoreController@dummy'                                  ],
        'excel_store_delete_records'              => ['delete',   'excel-store/pages/{id}/records',                            'ExcelStoreController@dummy'                                  ],
        'excel_store_page_by_url'                 => ['get',      'excel-store/pages/{url}',                                   'ExcelStoreController@dummy'                                  ],
        'banking_account_yesb_bulk_create'        => ['post',     'banking_accounts/bulk/create/yesbank',                      'BankingAccountController@bulkCreateBankingAccountsForYesbank' ],

        // P2P Admin and Internal Routes
        'p2p_admin_add_handle'                    => ['post',     'p2p/handles',                                               'P2p\VpaController@createHandle'],
        'p2p_admin_update_handle'                 => ['put',      'p2p/handles/{code}',                                        'P2p\VpaController@updateHandle'],
        'p2p_admin_manage_banks'                  => ['post',     'p2p/banks/bulk/manage',                                     'P2p\BankAccountController@manageBulkBanks'],
        'p2p_reminder_send'                       => ['post',     'p2p/reminders/send/{handle}/{entity}/{id}/{action}',        'P2p\UpiController@sendReminder'],
        'p2p_retrieve_banks_cron'                 => ['post',      'p2p/bank/retrieve',                                         'P2p\BankAccountController@retrieveBanks'],

        // Mpan related routes
        'mpans_issue'                             => ['post',     'mpans/issue',                                               'MpanController@issueMpans'                                ],
        'mpans_fetch'                             => ['get',      'mpans',                                                     'MpanController@fetchMpans'                                ],
        'mpans_bulk'                              => ['post',     'mpans/bulk',                                                'MpanController@postMpansBulk'                             ],
        'mpans_tokenize_existing'                 => ['post',     'mpans/tokenize',                                            'MpanController@postTokenizeMpans'                         ],
        'terminal_mpans_tokenize_existing'        => ['post',     'terminals/mpans/tokenize',                                  'TerminalController@postTokenizeMpans'                     ],
        'qr_code_mpans_tokenize_existing'         => ['post',     'qr_code/mpans/tokenize',                                    'QrCodeController@postTokenizeQrStringMpans'               ],

        // Core Payment Service Routes
        'cps_sync_gateway_entities_cron'          => ['post',     'cps/sync_gateway_entities',                                 'CpsController@syncGatewayEntities'                        ],

        //route for testing raven sms gateways
        'send_test_sms'                           => ['post',      'admin/test-sms',                                           'AdminController@sendTestSms'                              ],

        // routes for Rendering Preferences / Options service
        'create_merchant_options'                 => ['post',      'options',                                                   'OptionsController@createOptions'                         ],
        'read_merchant_options'                   => ['get',       'options/{namespace}/{service}',                             'OptionsController@getOptions'                            ],
        'read_options_by_id'                      => ['get',       'options/{id}',                                              'OptionsController@getOptionsById'                        ],
        'read_options_by_ref_id'                  => ['get',       'options/{namespace}/{service}/reference/{id}',              'OptionsController@getOptionsByReferenceId'               ],
        'update_merchant_options'                 => ['patch',     'options/{id}',                                              'OptionsController@updateOptions'                         ],
        'delete_merchant_options'                 => ['delete',    'options/{id}',                                              'OptionsController@deleteOption'                          ],

        'create_merchant_options_admin'           => ['post',      'options/{merchantId}',                                      'OptionsController@createOptionsAdmin'                    ],
        'read_merchant_options_admin'             => ['get',       'options/{namespace}/{service}/{merchantId}',                'OptionsController@getOptionsAdmin'                       ],
        'update_merchant_options_admin'           => ['patch',     'options/{namespace}/{service}/{merchantId}',                'OptionsController@updateOptionsAdmin'                    ],
        'delete_merchant_options_admin'           => ['delete',    'options/{namespace}/{service}/{merchantId}',                'OptionsController@deleteOptionAdmin'                     ],

        //developed for Facebook testing allowing facebook change activation status of any merchant. Behind feature flag present in omega only.
        'merchant_activation_update_partner'      => ['put',      'partner/merchant/{id}/activation/update',                    'MerchantController@putEditMerchantDetailsAfterLockPartner' ],
        'merchant_activation_status_partner'      => ['patch',    'partner/merchant/{id}/activation/status',                    'MerchantController@updateActivationStatusPartner'          ],

        //route for updating merchant mtu
        'merchant_mtu_update'                      => ['post',      'merchant_mtu_update',                                     'MerchantController@merchantsMtuUpdate'                    ],
        // same route for updating merchant mtu from dashboard
        'merchant_mtu_update_dashboard'            => ['post',      'merchant_mtu_update_dashboard',                           'MerchantController@merchantsMtuUpdate'                    ],

        //route to create/update segments at splitz
        'segment_create_update'                    => ['post',      'segment_create_update',                                   'SegmentationController@segmentPopulate'                    ],

        //balance configs apis
        'fetch_merchant_balance_configs'           => ['get',      'balance_configs',                                           'BalanceConfigController@getMerchantBalanceConfigs'       ],
        'get_merchant_balance_config'              => ['get',      'balance_configs/{id}',                                      'BalanceConfigController@getBalanceConfigById'            ],
        'add_merchant_balance_config'              => ['post',     'balance_configs/{merchant_id}',                             'BalanceConfigController@addBalanceConfig'                ],
        'edit_merchant_balance_config'             => ['patch',    'balance_configs/{id}',                                      'BalanceConfigController@editBalanceConfig'               ],

        'merchant_locked_balance_update'           => ['patch',    'balance/{id}/locked-balance',                               'MerchantController@updateLockedBalance'                  ],
        'update_free_payouts_attributes'           => ['post',     'balance/{id}/free_payout',                                  'BalanceController@postUpdateFreePayout'                  ],
        'get_free_payouts_attributes'              => ['get',      'payouts/{balance_id}/free_payout',                          'PayoutController@getFreePayoutsAttributes'               ],
        'admin_get_free_payouts_attributes'        => ['get',      'admin/payouts/{balance_id}/free_payout',                    'PayoutController@getFreePayoutsAttributes'               ],
        'admin_free_payout_migration'              => ['post',     'admin/payouts/free_payout_migration',                       'PayoutController@postFreePayoutMigration'                ],

        'increase_transaction_limit_self_serve'    => ['post',     'merchant/transaction_limit',                                'MerchantController@postIncreaseTransactionLimitSelfServe' ],
        'merchant_workflow_details'                => ['get',      'merchant/{workflowType}/details',                           'MerchantController@getMerchantWorkflowDetails'            ],
        'internal_merchant_workflow_details_fetch' => ['get',      'internal/merchant/{merchantId}/workflow_details',           'MerchantController@getMerchantWorkflowDetailsBulk'        ],
        'merchant_workflow_clarification'          => ['post',     'merchant/submit_clarification/{workflowType}',              'MerchantController@postMerchantWorkflowClarification'     ],


        'add_additional_website_self_serve'        => ['post',      'merchant/additional_website/{urlType}',                     'MerchantController@postAddAdditionalWebsiteSelfServe'    ],
        'additional_website_status'                => ['get',       'merchant/additional_website_status',                        'MerchantController@getAdditionalWebsiteWorkflowStatus'   ],

        //route to add additional website and delete additional websites(plural) through admin dashboard
        'add_additional_website'                  => ['put',       'merchant/{id}/websites',                                    'MerchantController@putAdditionalWebsite'                   ],
        'delete_additional_websites'              => ['delete',    'merchant/{id}/websites',                                    'MerchantController@deleteAdditionalWebsites'               ],

        // merchant config inheritance
        'merchant_inheritance_parent_fetch'       => ['get',       'merchants/{id}/inheritance_parent',                          'MerchantController@getInheritanceParent'                  ],
        'merchant_inheritance_parent_set'         => ['post',      'merchants/{id}/inheritance_parent',                          'MerchantController@postInheritanceParent'                 ],
        'merchant_inheritance_parent_set_bulk'    => ['post',      'merchants/inheritance_parent/bulk',                          'MerchantController@postInheritanceParentBulk'             ],
        'merchant_inheritance_parent_delete'      => ['delete',    'merchants/{id}/inheritance_parent',                          'MerchantController@deleteInheritanceParent'               ],

         //route for sending request to server from device
        'create_virtual_account_from_order'       => ['post',       'virtual_accounts/offline_qr',                              'VirtualAccountController@createOfflineQr'                 ],

        // Offline
        'fetch_offline_device_multiple'           => ['get',       'offlines/devices',                                          'OfflineController@fetchMultiple'                              ],

        'activate_test_offline_device'            => ['post',      't/offlines/devices/activate/initiate',                         'OfflineController@initiateDeviceActivationTest'            ],
        'activate_live_offline_device'            => ['post',      'l/offlines/devices/activate/initiate',                         'OfflineController@initiateDeviceActivationLive'            ],
        'offline_qr_poll_test_order_status'       => ['get',       't/offlines/devices/{did}/virtual_accounts/{id}/order/status',  'OfflineController@fetchVaOrderStatusTest'                  ],
        'offline_qr_poll_live_order_status'       => ['get',       'l/offlines/devices/{did}/virtual_accounts/{id}/order/status',  'OfflineController@fetchVaOrderStatusLive'                  ],

        'fd_reserve_balance_ticket'               => ['post',      'fd/reserve_balance/tickets',                                 'FreshdeskTicketController@postReserveBalanceTicketDetails'   ],
        'fd_reserve_balance_ticket_status'        => ['get',       'fd/reserve_balance/tickets/status',                          'FreshdeskTicketController@getReserveBalanceTicketStatus'     ],

        'dispute_automation'                      => ['post',      'dispute/chargeback_automation/{gateway}',                   'DisputeController@postBatchChargebackAutomation',                                ],

        'fd_create_ticket'                        => ['post',      'fd/{type}/ticket',                                          'FreshdeskTicketController@postTicketV2',                      ],
        'fd_insert_into_db'                       => ['post',      'fd/insert_into_db',                                         'FreshdeskTicketController@insertIntoDB',                      ],
        'internal_fd_create_ticket'               => ['post',      'internal/fd/ticket',                                        'FreshdeskTicketController@internalPostTicketV2',              ],
        'internal_fd_add_note'                    => ['post',      'internal/fd/ticket/{id}/note',                              'FreshdeskTicketController@addNoteToTicket',                  ],
        'internal_fd_fetch_agent_detail_for_ticket' => ['get',     'fd/ticket/{id}/agent',                                      'FreshdeskTicketController@getAgentDetailForFreshdeskTicket'   ],
        'fd_fetch_tickets'                        => ['get',       'fd/{type}/ticket',                                          'FreshdeskTicketController@getTickets'                         ],
        'internal_fd_fetch_agents'                => ['get',       'internal/fd/{type}/agent',                                  'FreshdeskTicketController@getAgents'                         ],
        'fd_fetch_converations'                   => ['get',       'fd/{type}/ticket/{id}/conversations',                       'FreshdeskTicketController@getConversations'                   ],
        'fd_fetch_ticket'                         => ['get',       'fd/{type}/ticket/{id}',                                     'FreshdeskTicketController@getTicket'                          ],
        'fd_post_ticket_reply'                    => ['post',      'fd/{type}/ticket/{id}/reply',                               'FreshdeskTicketController@postTicketReply'                    ],
        'internal_fd_post_ticket_reply'           => ['post',      'internal/fd/{type}/ticket/{id}/reply',                      'FreshdeskTicketController@postTicketReply'                    ],
        'fd_post_ticket_grievance'                => ['post',      'fd/{type}/ticket/{id}/grievance',                           'FreshdeskTicketController@postTicketGrievance'                ],
        'internal_fetch_merchant_freshdesk_tickets' => ['get',     'internal/merchant_freshdesk_tickets',                       'FreshdeskTicketController@internalFetchMerchantFreshdeskTickets'],

        'fd_consume_webhook'                      => ['post',      'fd/webhook/{event}',                                        'FreshdeskTicketController@postWebhook'                        ],

        'freshdesk_create_ticket'                 => ['post',      'freshdesk/tickets',                                          'FreshdeskTicketController@postTicket'                        ],
        'freshdesk_account_recovery_create_ticket'=> ['post',      'freshdesk/account_recovery_ticket',                          'FreshdeskTicketController@postTicketForAccountRecovery'      ],
        'freshdesk_update_ticket_internal'        => ['patch',     'internal/freshdesk/ticket/{id}',                             'FreshdeskTicketController@patchTicketInternal'               ],
        'freshdesk_otp_send'                      => ['post',      'freshdesk/tickets/otp',                                      'FreshdeskTicketController@postOtp'                           ],

        'freshdesk_post_reply'                    => ['post',      'freshdesk/ticket/customer/{id}/reply',                       'FreshdeskTicketController@postCustomerTicketReply'           ],
        'freshdesk_fetch_conversations'           => ['post',      'freshdesk/ticket/customer/{id}/conversations',               'FreshdeskTicketController@fetchCustomerTicketsConversations' ],
        'freshdesk_fetch_tickets'                 => ['post',      'freshdesk/tickets/customer',                                 'FreshdeskTicketController@fetchCustomerTickets'              ],
        'freshdesk_raise_grievance'               => ['post',      'freshdesk/grievance',                                        'FreshdeskTicketController@raiseGrievance'                    ],

        'freshchat_extract_report_cron'           => ['post',      'freshchat/extract_report',                                    'FreshchatController@postExtractReport'                      ],
        'freshchat_retrieve_report_cron'          => ['post',      'freshchat/retrieve_report',                                   'FreshchatController@postRetrieveReport'                     ],
        'freshchat_put_chat_timings_config'       => ['put',       'chat/timings_config',                                         'FreshchatController@putChatTimingsConfig'                   ],
        'freshchat_get_chat_timings_config'       => ['get',       'chat/timings_config',                                         'FreshchatController@getChatTimingsConfig'                   ],
        'freshchat_get_chat_timings_config_proxy' => ['get',       'merchants/chat/timings_config',                               'FreshchatController@getChatTimingsConfig'                   ],
        'freshchat_put_chat_holidays_config'      => ['put',       'chat/holidays_config',                                        'FreshchatController@putChatHolidaysConfig'                  ],
        'freshchat_get_chat_holidays_config'      => ['get',       'chat/holidays_config',                                        'FreshchatController@getChatHolidaysConfig'                  ],
        'freshchat_get_chat_holidays_config_proxy'=> ['get',       'merchants/chat/holidays_config',                              'FreshchatController@getChatHolidaysConfig'                  ],

        'entity_bulk_update'                      => ['post',      'entities/bulk-update',                                         'MerchantController@merchantsBulkUpdate'                    ],
        'fetch_batch_actions'                     => ['get',       'batch_actions',                                          'MerchantController@getBatchActions'                        ],
        'fetch_batch_action_entities'             => ['get',       'batch_action_entities',                                  'MerchantController@getBatchActionEntities'                 ],
        'fetch_payment_merchant_actions'          => ['get',       '/payment/{id}/merchant/actions',                         'PaymentController@getPaymentMerchantActions'               ],

        // Razorpay Capital
        // Financial Data Service Routes
        'financial_data_service'                  => ['any',      'financial_data_service/admin/{path?}',                      'FinancialDataServiceController@handleAny'                         ],
        'financial_data_service_perfios_webhook'  => ['post',     'financial_data_service/webhook/perfios/update_status',      'FinancialDataServiceController@handlePerfiosWebhook'              ],

        'update_wait_timeout'                     => ['post',      'db/wait_timeout',                                        'AdminController@setWaitTimeout'                 ],
        'consume_typeform_webhook'                => ['post',      'typeform/webhook_consumption',                                  'TypeformController@webhookConsumption'          ],
        'fetch_product_status'                    => ['get',       'merchants/product_international/workflow/status/all',       'MerchantController@getProductInternationalStatus'                 ],
        'merchant_product_international_request'  => ['patch',     'merchant/international/product',                            'MerchantController@requestInternationalProduct'                   ],

        //cron job to retry penny testing for initiated case
        'retry_penny_testing_cron'                => ['post',      'merchants/retry_penny_testing',                           'MerchantController@retryPennyTestingCron'                 ],

        //cron job to retry storing legal documents
        'retry_store_legal_documents_cron'        => ['post',      'merchant/retry_store_legal_documents',                   'MerchantController@retryStoreLegalDocuments'                 ],

        // low balance notification config apis
        'create_low_balance_config'               => ['post',       'low_balance_configs',                    'LowBalanceConfigController@create'],
        'create_low_balance_config_admin'         => ['post',       'low_balance_configs/admin',              'LowBalanceConfigController@adminCreate'],
        'update_low_balance_config'               => ['patch',      'low_balance_configs/{id}',               'LowBalanceConfigController@update'],
        'update_low_balance_config_admin'         => ['patch',      'low_balance_configs/{id}/admin',         'LowBalanceConfigController@adminUpdate'],
        'fetch_low_balance_config'                => ['get',        'low_balance_configs/{id}',               'LowBalanceConfigController@get'],
        'list_low_balance_config'                 => ['get',        'low_balance_configs',                    'LowBalanceConfigController@list'],
        'list_low_balance_config_admin'           => ['get',        'low_balance_configs/admin/{mid}',        'LowBalanceConfigController@adminList'],
        'delete_low_balance_config'               => ['delete',     'low_balance_configs/{id}',               'LowBalanceConfigController@delete'],
        'delete_low_balance_config_admin'         => ['delete',     'low_balance_configs/{id}/admin',         'LowBalanceConfigController@adminDelete'],
        'disable_low_balance_config'              => ['post',       'low_balance_configs/{id}/disable',       'LowBalanceConfigController@disableConfig'],
        'disable_low_balance_config_admin'        => ['post',       'low_balance_configs/{id}/disable/admin', 'LowBalanceConfigController@adminDisableConfig'],
        'enable_low_balance_config'               => ['post',       'low_balance_configs/{id}/enable',        'LowBalanceConfigController@enableConfig'],
        'enable_low_balance_config_admin'         => ['post',       'low_balance_configs/{id}/enable/admin',  'LowBalanceConfigController@adminEnableConfig'],
        'low_balance_config_alert_cron'           => ['post',       'low_balance_configs/alert',              'LowBalanceConfigController@alert'],

        'payouts_intermediate_transactions_cron_update' => ['post',  'payouts_intermediate_transactions/update', 'PayoutsIntermediateTransactionsController@updatePayoutIntermediateTransactions'],

        // merchant notification config APIs
        'create_merchant_notification_config'     => ['post',   'merchant_notification_configs',              'MerchantNotificationConfigController@create'],
        'update_merchant_notification_config'     => ['patch',  'merchant_notification_configs/{id}',         'MerchantNotificationConfigController@update'],
        'fetch_merchant_notification_config'      => ['get',    'merchant_notification_configs/{id}',         'MerchantNotificationConfigController@get'],
        'list_merchant_notification_config'       => ['get',    'merchant_notification_configs',              'MerchantNotificationConfigController@list'],
        'delete_merchant_notification_config'     => ['delete', 'merchant_notification_configs/{id}',         'MerchantNotificationConfigController@delete'],
        'disable_merchant_notification_config'    => ['post',   'merchant_notification_configs/{id}/disable', 'MerchantNotificationConfigController@disableConfig'],
        'enable_merchant_notification_config'     => ['post',   'merchant_notification_configs/{id}/enable',  'MerchantNotificationConfigController@enableConfig'],

        // Admin merchant notification config APIs
        'create_merchant_notification_config_admin'     => ['post',   'admin/merchants/{merchantId}/merchant_notification_configs',              'MerchantNotificationConfigController@createAsAdmin'],
        'update_merchant_notification_config_admin'     => ['patch',  'admin/merchants/{merchantId}/merchant_notification_configs/{id}',         'MerchantNotificationConfigController@updateAsAdmin'],
        'fetch_merchant_notification_config_admin'      => ['get',    'admin/merchants/{merchantId}/merchant_notification_configs/{id}',         'MerchantNotificationConfigController@getAsAdmin'],
        'list_merchant_notification_config_admin'       => ['get',    'admin/merchants/{merchantId}/merchant_notification_configs',              'MerchantNotificationConfigController@listAsAdmin'],
        'delete_merchant_notification_config_admin'     => ['delete', 'admin/merchants/{merchantId}/merchant_notification_configs/{id}',         'MerchantNotificationConfigController@deleteAsAdmin'],
        'disable_merchant_notification_config_admin'    => ['post',   'admin/merchants/{merchantId}/merchant_notification_configs/{id}/disable', 'MerchantNotificationConfigController@disableConfigAsAdmin'],
        'enable_merchant_notification_config_admin'     => ['post',   'admin/merchants/{merchantId}/merchant_notification_configs/{id}/enable',  'MerchantNotificationConfigController@enableConfigAsAdmin'],

        'get_internal_instrument_request_by_id'   => ['get',       'internal_instrument_request/{id}',                          'InstrumentRequestController@getInternalInstrumentRequestById'   ],
        'patch_internal_instrument_request_by_id' => ['patch',     'internal_instrument_request/{id}',                          'InstrumentRequestController@patchInternalInstrumentRequestById' ],
        'pause_internal_instrument_request_by_id' => ['patch',     'internal_instrument_request/{id}/toggle_pause',             'InstrumentRequestController@pauseInternalInstrumentRequestById'],
        'bulk_copy_internal_instrument_request'   => ['post',      'internal_instrument_request',                               'InstrumentRequestController@bulkCopyInternalInstrumentRequest' ],
        'delete_internal_instrument_request_by_id'=> ['delete',    'internal_instrument_request/{id}',                          'InstrumentRequestController@deleteInternalInstrumentRequestById'],
        'fetch_internal_instrument_requests'      => ['post',      'internal_instrument_request_fetch',                         'InstrumentRequestController@fetchInternalInstrumentRequests'    ],
        'patch_internal_instrument_requests'      => ['patch',     'internal_instrument_request',                               'InstrumentRequestController@patchInternalInstrumentRequests'    ],
        'bulk_cancel_internal_instrument_requests'     => ['patch',     'cancel_internal_instrument_request',                        'InstrumentRequestController@cancelInternalInstrumentRequests'    ],
        'instrument_request_razorx_admin'         => ['get',       'instrument_request/razorx/admin',                           'InstrumentRequestController@getRazorxForAdminDashboard'         ],
        'fetch_instrument_comment_list'           => ['get',       'instrument_request_comment_list',                           'InstrumentRequestController@fetchInstrumentCommentList'         ],
        'fetch_instrument_previous_status'        => ['get',       'terminals/proxy/instrument_request_previous_status/{id}',    'TerminalController@proxyV2TerminalService'         ],
        'update_template_mappings'                => ['patch',     'terminals/proxy/template_mappings/{id}',                    'TerminalController@proxyV2TerminalService'                      ],
        'fetch_template_mappings'                 => ['get',       'terminals/proxy/template_mappings/{id}',                    'TerminalController@proxyV2TerminalService'                      ],
        'terminals_proxy_fetch_multiple'          => ['post',      'terminals/proxy/admin_fetch_multiple/{entity_type}',        'TerminalController@proxyV2TerminalService'                      ],
        'trigger_instrument_rules_event'          => ['post',      'instrument_rules/events/trigger',                           'TerminalController@triggerInstrumentRulesEvent'                 ],
        'terminals_proxy_update_methods_from_rules' => ['patch',   'terminals/proxy/update_merchant_methods_from_rules',        'TerminalController@proxyV2TerminalService'                      ],

        // merchant_instrument_requests
        'merchant_instrument_request_create'                =>  ['post',    'merchant_instrument_request',                      'InstrumentRequestController@createMerchantInstrumentRequest'    ],
        'merchant_instrument_request_create_bulk'           =>  ['post',    'merchant_instrument_requests',                     'InstrumentRequestController@createMerchantInstrumentRequests'   ],
        'merchant_instrument_request_create_bulk_v2'        =>  ['post',    'merchant_instrument_requests_v2',                  'InstrumentRequestController@createMerchantInstrumentRequestsV2' ],
        'merchant_instrument_request_get_by_merchant_id'    =>  ['get',     'merchant_instrument_request',                      'InstrumentRequestController@getMerchantInstrumentRequest'       ],
        'merchant_instrument_status_get_by_merchant_id'     =>  ['get',     'merchant_instrument_status',                       'InstrumentRequestController@getMerchantInstrumentStatus'        ],
        'mir_instruments_get'                               =>  ['get',     'merchant_instruments',                             'InstrumentRequestController@getMIRInstruments'        ],
        'mir_instrument_set'                                =>  ['patch',   'merchant_instrument',                              'InstrumentRequestController@setMIRInstrument'        ],
        'merchant_instrument_request_get_by_id'             =>  ['get',     'merchant_instrument_request/{id}',                 'InstrumentRequestController@getMerchantInstrumentRequestById'   ],
        'merchant_instrument_request_update_by_id'          =>  ['patch',   'merchant_instrument_request/{id}',                 'InstrumentRequestController@patchMerchantInstrumentRequestById' ],
        'fetch_merchant_instrument_requests'                       =>  ['post',    'merchant_instrument_request_fetch',                              'InstrumentRequestController@getMerchantInstruments'             ],

        'terminals_universal_proxy'               => ['any',       'terminals/proxy/universal/{path?}/{subpath?}',                             'TerminalController@proxyV2TerminalService' ],
        'get_discrepancy_list'                    => ['get',       'terminals/proxy/discrepancy_list',                                         'TerminalController@proxyV2TerminalService' ],
        'get_discrepancy_list_merchant'           => ['get',       'terminals/proxy/discrepancy_list_merchant',                                'TerminalController@proxyV2TerminalService' ],
        'create_iir_discrepancy'                  => ['post',      'terminals/proxy/iir_discrepancies',                                        'TerminalController@proxyV2TerminalService' ],
        'create_iir_discrepancy_bulk'             => ['post',      'terminals/proxy/iir_discrepancies_bulk',                                   'TerminalController@proxyV2TerminalService' ],
        'fetch_iir_discrepancies_of_iir'          => ['get',       'terminals/proxy/internal_instrument_request/{id}/iir_discrepancies',       'TerminalController@proxyV2TerminalService' ],
        'fetch_iir_discrepancies_for_merchant'    => ['get',       'terminals/proxy/merchants/{id}/iir_discrepancies',                         'TerminalController@proxyV2TerminalService' ],
        'patch_iir_discrepancy_by_id'             => ['patch',     'terminals/proxy/iir_discrepancies/{id}',                                   'TerminalController@proxyV2TerminalService' ],
        'fetch_iir_discrepancies_of_mir'          => ['get',       'terminals/proxy/merchant_instrument_request/{id}/iir_discrepancies',       'TerminalController@proxyV2TerminalService' ],
        'create_iir_discrepancy_answer'           => ['post',      'terminals/proxy/iir_discrepancy_answers',                                  'TerminalController@proxyV2TerminalService' ],
        'create_iir_discrepancy_answer_admin'     => ['post',      'terminals/proxy/iir_discrepancy_answers/admin',                            'TerminalController@proxyV2TerminalService' ],
        'create_static_discrepancy'               => ['post',      'terminals/proxy/discrepancy',                                              'TerminalController@proxyV2TerminalService' ],
        'edit_static_discrepancy'                 => ['patch',     'terminals/proxy/discrepancy/{id}',                                              'TerminalController@proxyV2TerminalService' ],

        'create_promotions_events'                => ['post',      'promotions/events',                                        'PromotionEventController@create'],

        // routes related to fund loading downtime detection via test transactions
        'create_test_payouts_for_downtime_detection_icici' => ['post', 'payouts/test/downtime_detection_icici',              'PayoutController@createTestPayoutsForDowntimeDetectionICICI'              ],
        'create_test_payouts_for_downtime_detection_yesb'  => ['post', 'payouts/test/downtime_detection_yesb',               'PayoutController@createTestPayoutsForDowntimeDetectionYESB'               ],
        'check_status_of_test_payouts'                     => ['post', 'payouts/test/check_status',                          'PayoutController@checkTestPayoutsStatus'                                  ],
        'add_balance_to_source_for_test_payouts'           => ['post', 'payouts/test/add_balance_to_source',                 'PayoutController@addBalanceToSourceAccountForTestMerchant'                ],

        //payout downtime methods
        'create_payout_downtime'                  => ['post',      'payouts/downtime',                                        'PayoutDowntimeController@createPayoutDowntime'              ],
        'update_payout_downtime_by_id'            => ['patch',     'payouts/downtime/{id}',                                   'PayoutDowntimeController@updatePayoutDowntime'              ],
        'fetch_payout_downtime_by_id'             => ['get',       'payouts/downtime/{id}',                                   'PayoutDowntimeController@fetchPayoutDowntime'               ],
        'fetch_payout_downtimes_enabled'          => ['get',       'payouts/downtimes/enabled',                               'PayoutDowntimeController@fetchPayoutDowntimesEnabled'       ],
        'fetch_payout_downtimes'                  => ['get',       'payouts/downtimes',                                       'PayoutDowntimeController@fetchPayoutDowntimes'              ],

        // fund loading downtime routes
        'create_fund_loading_downtime'            => ['post',      'fund_loading/downtime',                                        'FundLoadingDowntimeController@createFundLoadingDowntime'              ],
        'update_fund_loading_downtime_by_id'      => ['patch',     'fund_loading/downtime/{id}',                                   'FundLoadingDowntimeController@updateFundLoadingDowntime'              ],
        'fetch_fund_loading_downtime_by_id'       => ['get',       'fund_loading/downtime/{id}',                                   'FundLoadingDowntimeController@fetchFundLoadingDowntime'               ],
        'list_active_fund_loading_downtimes'      => ['get',       'fund_loading/downtimes/active',                                'FundLoadingDowntimeController@listActiveFundLoadingDowntimes'         ],
        'list_fund_loading_downtimes'             => ['get',       'fund_loading/downtimes',                                       'FundLoadingDowntimeController@listFundLoadingDowntimes'               ],
        'delete_fund_loading_downtime_by_id'      => ['delete',    'fund_loading/downtime/{id}',                                   'FundLoadingDowntimeController@deleteFundLoadingDowntime'              ],
        'notification_flow_fund_loading_downtime' => ['post',      'fund_loading/downtime/notification/{flowType}',                'FundLoadingDowntimeController@notificationFlow'                             ],

        // Routes related to payments rearch for fetching/writing data
        'api_entity_fetch'                        => ['get',     'entities/{entity}/{id}',                                 'CardPSController@FetchEntity'                                  ],
        'cps_iin_flow_disable'                    => ['post',    'cardps/iins/disable',                                    'IinController@disableMultipleIINFlows'                         ],
        'cps_backfill_entities'                   => ['get',     'cardps/backfill/{entity}/{column}',                      'CardPSController@BackfillRouteProxy'                           ],
        'cps_card_entity_create'                  => ['post',    'cardps/entity/create/card',                              'CardPSController@CreateCardEntity'                             ],

        'merchant_verify_attributes'              => ['post',    'merchant/verify/{verificationType}',                      'MerchantController@postVerifyMerchantAttributes'              ],
        'checkout_personalisation'                => ['get',     'personalisation',                                         'MerchantController@getPersonalisedMethods'                    ],
        'checkout_personalisation_internal'       => ['get',     'internal/personalisation',                                'MerchantController@getPersonalisedMethods'                    ],
        'update_payout_status'                    => ['patch',   'payouts/{id}/manual/status',                              'PayoutController@updatePayoutStatusManually'                  ],
        'update_payout_status_batch'              => ['patch',   'payouts/manual/status_update/batch',                       'PayoutController@updatePayoutStatusManuallyInBatch'          ],
        'salesforce_event'                        => ['post',    'merchant/{mid}/salesforce_event',                         'SalesForceController@sendSalesForceEvent'                     ],
        'salesforce_event_admin'                  => ['post',    'admin/merchant/{mid}/salesforce_event',                         'SalesForceController@sendSalesForceEvent'                     ],
        'salesforce_event_admin_one_ca'            => ['post',    'admin/merchant/{mid}/one_ca_salesforce_event',             'SalesForceController@sendSalesForceEventForOneCa'           ],
        'salesforce_event_website'                => ['post',    'merchant/{mid}/salesforce_event_website',                 'SalesForceController@sendSalesForceEventWebsite'              ],
        'salesforce_event_website_cors'           => ['options', 'merchant/{mid}/salesforce_event_website',                 'SalesForceController@sendSalesForceEventWebsiteCors'          ],
        'salesforce_opportunity_details'          => ['get',     'merchant/{mid}/salesforce_opportunity_detail',            'SalesForceController@getMerchantDetailsOnOpportunity'         ],
        'salesforce_details_internal'             => ['get',     'internal/salesforce_details',                             'SalesForceController@getSalesforceDetailsForMerchantIDs'      ],
        'banking_account_statement_process_admin' => ['post',    'banking_account_statement/admin/process',                 'BankingAccountStatementController@fetchStatementForAccount'   ],
        'merchant_banking_accounts_webhook'       => ['post',    'merchant/{id}/banking_accounts/',                         'MerchantController@sendBankingAccountsViaWebhook'             ],
        'reward_create'                           => ['post',    'rewards',                                                 'RewardController@createReward'                                ],
        'reward_update'                           => ['patch',   'rewards/update',                                          'RewardController@updateReward'                                ],
        'reward_activate_or_deactivate'           => ['patch',   'rewards',                                                 'RewardController@activateDeactivateReward'                    ],
        'reward_delete'                           => ['delete',  'rewards/{id}',                                            'RewardController@deleteReward'                                ],
        'reward_fetch'                            => ['get',     'rewards',                                                 'RewardController@fetchReward'                                 ],
        'reward_redirect_url'                     => ['get',     'rewards/redirect/{reward_id}/{payment_id}',               'RewardController@rewardRedirectUrl'                           ],
        'rewards_batch_email'                     => ['post',    'rewards/batch_email',                                     'RewardController@sendRewardMailToMerchants'                   ],

        //Razorpay Trusted Badge
        'trusted_badge_eligibility_cron'          => ['post',     'trusted_badge/eligibility_cron',                         'TrustedBadgeController@eligibilityCron'                       ],
        'fetch_trusted_badge_status'              => ['get',      'trusted_badge',                                          'TrustedBadgeController@fetch'                                 ],
        'trusted_badge_merchant_status'           => ['put',      'trusted_badge/merchant_status',                          'TrustedBadgeController@updateMerchantStatus'                  ],
        'update_trusted_badge_status'             => ['put',      'trusted_badge/status',                                   'TrustedBadgeController@updateTrustedBadgeStatus'              ],
        'trusted_badge_redirect'                  => ['get',      'trusted_badge/redirect',                                 'TrustedBadgeController@redirectUrl'                           ],
        'trusted_badge_get_experiment_list'       => ['get',      'trusted_badge/experiment_list',                          'TrustedBadgeController@fetchExperimentList'                   ],
        'trusted_badge_put_experiment_list'       => ['put',      'trusted_badge/experiment_list',                          'TrustedBadgeController@putExperimentList'                     ],

        //Routes related to app framework
        'app_mapping_create'                      => ['post',    'app/mapping',                                             'ApplicationFrameworkController@createAppMapping'              ],
        'app_mapping_delete'                      => ['delete',  'app/tags/mapping',                                        'ApplicationFrameworkController@deleteAppMapping'              ],
        'app_tags_delete'                         => ['delete',  'app/tags',                                                'ApplicationFrameworkController@deleteTag'                     ],

        'app_create'                              => ['post',    'app',                                                     'ApplicationFrameworkController@createApp'                     ],
        'app_update'                              => ['patch',   'app/{id}',                                                'ApplicationFrameworkController@updateApp'                     ],
        'app_get'                                 => ['get',     'app/{id}',                                                'ApplicationFrameworkController@getApp'                        ],

        'app_merchant_mapping_create'             => ['post',     'merchant/app/mapping',                                   'ApplicationFrameworkController@createMerchantMapping'         ],
        'app_merchant_mapping_update'             => ['patch',    'merchant/app/mapping',                                   'ApplicationFrameworkController@updateMerchantMapping'         ],
        'app_merchant_mapping_get'                => ['get',      'merchant/{id}/app/mapping',                              'ApplicationFrameworkController@getAppsForMerchant'            ],

        'merchant_tag_map_create'                 => ['post',     'merchant/{id}/tag',                                      'ApplicationFrameworkController@createMerchantTag'             ],
        'merchant_tag_map_update'                 => ['patch',    'merchant/{id}/tag',                                      'ApplicationFrameworkController@updateMerchantTag'             ],
        'checkout_rewards'                        => ['get',     'checkout/rewards',                                        'MerchantController@getRewardsForCheckout'                     ],
        'reward_terms'                            => ['get',     'reward/{id}/{payment_id}/terms',                          'RewardController@getRewardTerms'                              ],
        'reward_metrics'                          => ['get',     'reward/{id}/{payment_id}/{event_type}/metrics',           'RewardController@getRewardMetrics'                            ],
        'reward_expire_cron'                      => ['post',    'rewards/expire',                                          'RewardController@expireRewards'                               ],
        'advertiser_logo'                         => ['get',     'advertiser/logo/{id}',                                    'RewardController@getAdvertiserLogo'                           ],

        // pagination operations routes
        'fix_merchant_data_cron'                  => ['post',    'pagination/trim_space/start',                             'PaginationController@trimSpacesForMerchant'                   ],
        'populate_merchant_trim_data_cron'        => ['put',     'pagination/trim_space/populate',                          'PaginationController@populateRedisKeyForTrimSpace'            ],
        // GupShup Incoming Messages Webhook
        'gupshup_incoming_messages_callback'      => ['post',    'gupshup/incoming_messages/callback',                      'GupShupController@handleIncomingMessagesCallback'             ],
        'nps_survey_process_scheduled'            => ['post',    'survey/scheduled/process',                                'NPSSurveyController@initiateSurvey'                           ],
        'survey_create'                           => ['post',    'survey',                                                  'NPSSurveyController@createSurvey'                             ],
        'survey_edit'                             => ['patch',   'survey/{id}',                                             'NPSSurveyController@editSurvey'                               ],
        'pending_survey_get'                      => ['get',     'survey/pending',                                          'NPSSurveyController@getPendingSurvey'                         ],
        'update_survey_tracker'                   => ['patch',   'survey/tracker/{id}',                                     'NPSSurveyController@editSurveyTracker'                        ],
        'consume_survey_typeform_webhook'         => ['post',    'survey/typeform/nps/webhook',                             'NPSSurveyController@consumeTypeformWebhook'                   ],

         // Typeform survey response to datalake routes
        'push_to_datalake'                        => ['post',    'survey/push_to_datalake',                                 'NPSSurveyController@pushTypeFormResponsesToDataLake'          ],

        // merchant risk alerts
        'merchant_risk_alerts_foh_workflow' => [
            'post',
            'merchant_risk_alerts/merchant/foh/workflow',
            'MerchantRiskAlertController@createFOHWorkflow'
        ],
        'merchant_risk_alerts_create_rule' => [
            'post',
            'merchant_risk_alerts/rules/create',
            'MerchantRiskAlertController@createRule'
        ],
        'merchant_risk_alerts_update_rule' => [
            'post',
            'merchant_risk_alerts/rules/{rule_id}/update',
            'MerchantRiskAlertController@updateRule'
        ],
        'merchant_risk_alerts_delete_rule' => [
            'post',
            'merchant_risk_alerts/rules/{rule_id}/delete',
            'MerchantRiskAlertController@deleteRule'
        ],
        'merchant_risk_alerts_foh_workflow_trigger_nc'    => [
            'post',
            'merchant_risk_alerts/merchant/foh/workflow/{workflow_action_id}/needs_clarification',
            'MerchantRiskAlertController@postTriggerNeedsClarification',
        ],
        'merchant_risk_alerts_needs_clarification_fetch_mapping'    => [
            'get',
            'merchant_risk_alerts/needs_clarification/mappings',
            'MerchantRiskAlertController@fetchMappings',
        ],

        'merchant_risk_alerts_details' => [
            'get',
            'merchant_risk_alerts/merchant/{mid}/details',
            'MerchantRiskAlertController@getMerchantDetails'
        ],
        'merchant_risk_alerts_dispute_details' => [
            'get',
            'merchant_risk_alerts/merchant/{mid}/dispute_details',
            'MerchantRiskAlertController@getMerchantDisputeDetails'
        ],
        'merchant_risk_identify_blacklist_country_alerts' => [
            'post',
            'merchant_risk_alerts/blacklist_country/identify',
            'MerchantRiskAlertController@identifyBlacklistCountryAlerts'
        ],
        'merchant_risk_alerts_set_dedupe_key' => [
            'post',
            'merchant_risk_alerts/merchant/{mid}/dedupe',
            'MerchantRiskAlertController@setMerchantDedupeKey'
        ],

        // international enablement
        'merchant_international_enablement_preview' => [
            'get',
            'international_enablement/preview',
            'MerchantInternationalEnablementController@preview',
        ],
        'merchant_international_visibility_info' => [
            'get',
            'international_enablement/visibility',
            'MerchantInternationalEnablementController@getInternationalVisibilityInfo',
        ],
        'merchant_international_enablement_get' => [
            'get',
            'international_enablement',
            'MerchantInternationalEnablementController@get',
        ],
        'merchant_international_enablement_draft' => [
            'post',
            'international_enablement/draft',
            'MerchantInternationalEnablementController@draft',
        ],
        'merchant_international_enablement_submit' => [
            'post',
            'international_enablement/submit',
            'MerchantInternationalEnablementController@submit',
        ],
        'merchant_international_enablement_discard' => [
            'delete',
            'international_enablement',
            'MerchantInternationalEnablementController@discard',
        ],
        'merchant_international_enablement_reminder' => [
            'post',
            'international_enablement/reminders/{mode}/{id}',
            'MerchantInternationalEnablementController@reminderCallBack'
        ],
        'emerchantpay_apm_onboard_maf' => [
            'post',
            'merchant/international/apm_request/reminder/{mode}/{mid}',
            'MerchantApmEnablementController@generateEmerchantpayMaf'
        ],

        // CyberCrime Help Desk Api
        'cyber_crime_helpdesk_send_mail_to_lea'   => ['post',    'cybercrime_helpdesk/send_mail_to_lea',   'CyberCrimeHelpDeskController@sendMailToLEAFromCyberCrimeHelpdesk'      ],
        'cybercrime_helpdesk_workflow_action'     => ['post',    'cybercrime_helpdesk/workflow_action',    'CyberCrimeHelpDeskController@postCyberCrimeWorflowCreateAction'        ],

        //TPV - Third party validation
        //- validations on source accounts through which money gets loaded to va.
        'admin_tpv_create'                        => ['post',    'admin/tpv/create',                                        'BankingAccountTpvController@adminCreateTpv'                   ],
        'admin_tpv_edit'                          => ['patch',   'admin/tpv/{id}',                                          'BankingAccountTpvController@adminEditTpv'                     ],
        'merchant_fetch_tpvs'                     => ['get',     'merchant/tpvs',                                           'BankingAccountTpvController@fetchMerchantTpvs'                ],
        'admin_fetch_tpvs'                        => ['get',     'admin/merchant/{id}/tpvs',                                'BankingAccountTpvController@fetchMerchantTpvsWithFav'         ],
        'admin_merchants_tpvs_create'             => ['post',    'admin/merchants/tpv_bulk_create',                         'BankingAccountTpvController@manualAutoApproveTpv'             ],
        'merchant_tpv_create'                     => ['post',    'merchant/tpv',                                            'BankingAccountTpvController@createTpvFromXDashboard'          ],
        'care_service_get_dashboard_proxy'        => ['get',     'care_service/merchant/{path?}',                           'CareProxyController@getDashboardProxyRequest'                 ],
        'care_service_dashboard_proxy'            => ['post',    'care_service/merchant/{path?}',                           'CareProxyController@postDashboardProxyRequest'                ],
        'care_service_cron_proxy'                 => ['post',    'care_service/cron/{path?}',                               'CareProxyController@postCronProxyRequest'                     ],
        'care_service_admin_proxy'                => ['post',    'care_service/admin/{path?}',                              'CareProxyController@postAdminProxyRequest',                   ],
        'care_service_chat_proxy'                 => ['post',    'care_service/chat/{path?}',                               'CareProxyController@postChatProxyRequest',                   ],
        'care_service_dark_proxy'                 => ['post',    'care_service/dark/admin',                                 'CareProxyController@postDarkProxyRequest',                   ],

        'internal_merchant_partnership'           => ['get',    'internal/merchant/{merchantId}/partnership',               'MerchantController@isPartnershipMerchant',                   ],
        'cmma_service_admin_proxy'                => ['post',    'cmma_service/admin/{path?}',                              'CmmaProxyController@handleAdminProxyRequests',               ],
        'cmma_service_cron_proxy'                 => ['post',    'cmma_service/cron/{path?}',                               'CmmaProxyController@handleCronProxyRequests'                     ],
        'myoperator_v1_proxy_get'                 => ['get',     'myoperator/{path?}',                                      'MyOperatorController@getProxyCallToMyOperatorV1'              ],
        'myoperator_v2_proxy_post'                => ['post',    'myoperator/campaign/{path?}',                             'MyOperatorController@postProxyCallToMyOperatorV2'              ],

        // Templating Service
        'templating_create_namespace'             => ['post',    'templating/namespaces',                                   'TemplatingServiceController@createNamespace'                  ],
        'templating_list_namespace'               => ['get',     'templating/namespaces',                                   'TemplatingServiceController@listNamespace'                    ],
        'templating_create_template_config'       => ['post',    'templating/template_configs',                             'TemplatingServiceController@createTemplateConfig'             ],
        'templating_update_template_config'       => ['patch',   'templating/template_configs/{id}',                        'TemplatingServiceController@updateTemplateConfig'             ],
        'templating_get_template_config'          => ['get',     'templating/template_configs/{id}',                        'TemplatingServiceController@getTemplateConfig'                ],
        'templating_list_template_config'         => ['get',     'templating/template_configs',                             'TemplatingServiceController@listTemplateConfig'               ],
        'templating_view_template_config'         => ['get',     'templating/template_configs/view/{id}',                   'TemplatingServiceController@viewTemplateConfig'               ],
        'templating_delete_template_config'       => ['delete',  'templating/template_configs/{id}',                        'TemplatingServiceController@deleteTemplateConfig'             ],
        'templating_test_pre_processor'           => ['post',    'templating/preprocessor/test',                            'TemplatingServiceController@testPreProcessor'                 ],
        'templating_render_template'              => ['post',    'templating/template_configs/render',                      'TemplatingServiceController@renderTemplate'                   ],
        'templating_assign_user_role'             => ['post',    'templating/user_roles/assign',                            'TemplatingServiceController@assignRole'                       ],
        'templating_revoke_user_role'             => ['post',    'templating/user_roles/revoke',                            'TemplatingServiceController@revokeRole'                       ],
        'care_service_myoperator_webhook_proxy'   => ['post',    'care_service/myoperator_webhook/{path?}',                 'CareProxyController@postMyOperatorWebhookProxyRequest'        ],
        'merchant_rtb_details_fetch'              => ['get',     'badge_details',                                           'MerchantController@getRZPTrustedBadgeDetails'                 ],
        'payment_verify_new'                      => ['post',    'payments/{id}/verify_new',                                'PaymentController@postVerifyNew'                              ],
        // Merchant Fraud
        'bulk_fraud_notify'                      => ['post',    'fraud/bulk/{source}',                                            'MerchantController@bulkFraudNotify'                          ],
        'health_checker'                         => ['post',    'merchant/{checker_type}/checker',                                'MerchantController@healthChecker'                            ],
        'health_checker_periodic_cron'           => ['post',    'merchant/{checker_type}/checker/cron',                           'MerchantController@healthCheckerPeriodicCron'                ],
        'health_checker_milestone_cron'          => ['post',    'merchant/{checker_type}/checker/milestone/cron',                 'MerchantController@healthCheckerMilestoneCron'               ],
        'health_checker_risk_score_cron'         => ['post',    'merchant/{checker_type}/checker/risk/score/cron',                'MerchantController@healthCheckerRiskScoreCron'               ],
        'health_checker_retry_cron'              => ['post',    'merchant/{checker_type}/checker/retry/cron',                     'MerchantController@healthCheckerRetryCron'                   ],
        'health_checker_reminder_cron'           => ['post',    'merchant/{checker_type}/checker/reminder/cron',                  'MerchantController@healthCheckerReminderCron'                ],
        'fraud_checker_milestone_cron'           => ['post',    'merchant/fraud/{category}/milestone/checker',                    'MerchantController@fraudCheckerMilestoneCron'                ],
        'create_fraud_batch'                     => ['post',    'fraud/batch',                                                    'MerchantController@createFraudBatch'                         ],
        'post_batch_bulk_fraud_notify'           => ['post',    'notify/fraud/bulk',                                              'MerchantController@bulkFraudNotifyPostBatch'                 ],
        'get_fraud_attributes'                   => ['get',     'payments/fraud/attributes',                                      'PaymentFraudController@getFraudAttributes'                   ],
        'save_payment_fraud'                     => ['post',    'payments/fraud',                                                 'PaymentFraudController@savePaymentFraud'                     ],

        // Merchant Payment Limit
        'max_payment_limit_update'               => ['post',    'merchant/payment_limit/update',                                  'MerchantController@uploadMaxPaymentLimitViaFile'                    ],
        'execute_max_payment_limit_workflow'     => ['post',    'merchant/payment_limit/execute_workflow',                        'MerchantController@executeMaxPaymentLimitWorkflow'                  ],

        // Merchant Risk Notes
        'merchant_risk_notes_get'              => ['get',       'merchants/{merchant_id}/risk_notes',                       'MerchantRiskNotesController@getAll'    ],
        'merchant_risk_notes_create'           => ['post',      'merchants/{merchant_id}/risk_notes',                       'MerchantRiskNotesController@create'    ],
        'merchant_risk_notes_delete'           => ['delete',    'merchants/{merchant_id}/risk_notes/{id}',                  'MerchantRiskNotesController@delete'    ],

        // Credit Transfer Routes
        'credit_transfer_create'                  => ['post',     'credit_transfer/create_async',                           'CreditTransferController@createAsync'                         ],

        // Payout service url's
        'create_payout_entry'                     => ['post',     'payouts_service/create',                                 'PayoutController@createPayoutEntry'                           ],
        'create_FTA_payout_service'               => ['post',     'payouts_service/create_fta/{payout_id}',                 'PayoutController@createFTAForPayoutService'                   ],
        'create_ledger_payout_service'            => ['post',     'payouts_service/create_ledger',                          'PayoutController@createPayoutServiceTransaction'              ],
        'deduct_credits_via_payout_service'       => ['post',     'payouts_service/deduct_credits',                         'PayoutController@deductCreditsViaPayoutService'               ],
        'reverse_credits_via_payout_service'      => ['post',     'payouts_service/reverse_credits',                        'ReversalController@reverseCreditsViaPayoutService'            ],
        'create_pricing_for_payout_service'       => ['post',     'payouts_service/fetch_pricing_info',                     'PayoutController@fetchPricingInfoForPayoutService'            ],
        'create_workflow_for_payout'              => ['post',     'payouts_service/create_workflow_for_payout',              'PayoutController@createWorkflowForPayout'                    ],
        'create_reversal_entry'                   => ['post',     'payouts_service/reversal/create',                        'ReversalController@createReversalEntryForPayoutService'       ],
        'payout_service_process_scheduled_payout' => ['post',     'payouts_service/scheduled/process',                      'PayoutController@processSchedulePayoutOnPayoutService'        ],
        'retry_payouts_on_service'                => ['post',     'payouts_service/retry',                                  'PayoutController@retryPayoutsOnPayoutService'                 ],
        'create_payment_payout_service_axis_cc'   => ['post',     'payouts_service/payments/create/axis',                   'PaymentCreateController@postCreateS2SPayment'                 ],
        'update_payout_payout_service'            => ['patch',    'payouts_service/payout/{payout_id}/update',              'PayoutController@updatePayoutEntry'                           ],
        'payout_outbox_partition_cron'            => ['post',     'payout_outbox/partition',                                'PayoutOutboxController@createPayoutOutboxPartition'           ],
        'payment_analytics_partition_cron'        => ['post',     'payment_analytics/partition',                            'PaymentController@createPaymentAnalyticsPartition'            ],
        'decrement_free_payouts_payouts_service'  => ['post',     'payouts_service/decrement_free_payouts',                 'PayoutController@decrementFreePayoutsForPayoutsService'       ],
        'rollback_free_payouts'                   => ['post',     'payouts_service/free_payout_rollback',                   'PayoutController@freePayoutRollback'                          ],
        'payouts_service_redis_key_set'           => ['post',     'payouts_service_redis_key_set',                          'PayoutController@payoutServiceRedisKeySet'                    ],
        'payouts_service_mail_and_sms'            => ['post',     'payouts_service/mail_and_sms',                           'PayoutController@payoutServiceMailAndSms'                     ],
        'payouts_source_update'                   => ['post',     'payouts_service/source_update',                          'PayoutController@payoutSourceUpdate'                          ],
        'status_details_source_update'            => ['post',     'payouts_service/status_details_source_update',           'PayoutController@statusDetailsSourceUpdate'                   ],
        'payouts_service_dual_write'              => ['post',     'payouts_service/dual_write',                             'PayoutController@payoutServiceDualWrite'                      ],
        'delete_card_meta_data_and_vault_token'   => ['delete',   'payouts_service/delete_card_metadata',                   'PayoutController@payoutServiceDeleteCardMetaData'             ],
        'rename_attachments_for_payouts'          => ['post',     'payouts_service/renameAttachments/{id}',                 'PayoutController@payoutServiceRenameAttachments'              ],

        // Data Consistency Checker Routes
        'initiate_payouts_consistency_check'      => ['post',     'consistency_checker',                                    'PayoutController@initiatePayoutsConsistencyCheck'             ],
        'dcc_payouts_details_fetch'               => ['post',     'consistency_checker/fetch',                              'PayoutController@fetchPayoutsDetailsForDcc'                   ],

        'payout_service_idempotency_key_feature_remove' => ['post', 'ps_idempotency_key_feature_remove', 'FeatureController@removePayoutServiceIntermediateIdempotencyFeatures'],

        //auditing
        'audit_info_partition_cron'            => ['post',     'audit_info/partition',                                'AuditingController@createAuditInfoPartition'           ],

        // Sub Virtual Account Routes
        'sub_virtual_account_list'                => ['get',      'sub_virtual_accounts',                                      'SubVirtualAccountController@list'                             ],
        'sub_virtual_account_create'              => ['post',     'admin/sub_virtual_accounts',                                'SubVirtualAccountController@create'                           ],
        'sub_virtual_account_list_admin'          => ['get',      'admin/sub_virtual_accounts/merchant/{id}',                  'SubVirtualAccountController@listAdmin'                        ],
        'sub_virtual_account_enable_disable'      => ['post',     'admin/sub_virtual_accounts/{id}',                           'SubVirtualAccountController@enableOrDisable'                  ],
        'sub_virtual_account_transfer_with_otp'   => ['post',     'sub_virtual_account_transfer_with_otp',                     'SubVirtualAccountController@transferWithOtp'                  ],
        'sub_virtual_account_transfer_list'       => ['get',      'sub_virtual_accounts/credit_transfers',                     'SubVirtualAccountController@listCreditTransfers'              ],
        'sub_virtual_account_migrate'             => ['post',      'admin/sub_virtual_accounts/merchant/{merchantId}/migrate', 'SubVirtualAccountController@migrate'                          ],
        // Ledger Routes
        'create_ledger_account'                           => ['post',      'ledger_service/create_account',                             'LedgerController@createAccount'],
        'create_ledger_accounts_on_event'                 => ['post',      'ledger_service/create_accounts_on_event',                   'LedgerController@createAccountsOnEvent'],
        'create_ledger_accounts_in_bulk'                  => ['post',      'ledger_service/create_accounts_in_bulk',                    'LedgerController@createAccountsInBulk'],
        'activate_ledger_account'                         => ['post',      'ledger_service/activate_account',                           'LedgerController@activateAccount'],
        'deactivate_ledger_account'                       => ['post',      'ledger_service/deactivate_account',                         'LedgerController@deactivateAccount'],
        'archive_ledger_account'                          => ['post',      'ledger_service/archive_account',                            'LedgerController@archiveAccount'],
        'update_ledger_account'                           => ['post',      'ledger_service/update_account',                             'LedgerController@updateAccount'],
        'update_ledger_account_detail'                    => ['post',      'ledger_service/update_account_detail',                      'LedgerController@updateAccountDetail'],
        'create_ledger_journal'                           => ['post',      'ledger_service/create_journal',                             'LedgerController@createJournal'],
        'create_ledger_journal_batch'                     => ['post',      'ledger_service/batch/create_journal_batch',                 'LedgerController@createJournalFromBatch'],
        'fetch_journal_by_transactor'                     => ['post',      'ledger_service/fetch_by_transactor',                        'LedgerController@fetchByTransactor'],
        'update_account_by_entities_and_mid'              => ['post',      'ledger_service/update_account_by_entities_and_mid',         'LedgerController@updateAccountByEntitiesAndMerchantID'],
        'create_ledger_ledger_config'                     => ['post',      'ledger_service/create_ledger_config',                       'LedgerController@createLedgerConfig'],
        'update_ledger_ledger_config'                     => ['post',      'ledger_service/update_ledger_config',                       'LedgerController@updateLedgerConfig'],
        'delete_ledger_ledger_config'                     => ['post',      'ledger_service/delete_ledger_config',                       'LedgerController@deleteLedgerConfig'],
        'request_governor'                                => ['post',      'ledger_service/request_governor',                           'LedgerController@requestGovernor'],
        'fetch_ledger'                                    => ['post',      'ledger_service/fetch',                                      'LedgerController@fetch'],
        'fetch_multiple_ledger'                           => ['post',      'ledger_service/fetch_multiple',                             'LedgerController@fetchMultiple'],
        'fetch_filter_ledger'                             => ['post',      'ledger_service/fetch_filter',                               'LedgerController@fetchFilter'],
        'fetch_account_form_field_options_ledger'         => ['post',      'ledger_service/fetch_account_form_field_options',           'LedgerController@fetchAccountFormFieldOptions'],
        'fetch_journal_form_field_options_ledger'         => ['post',      'ledger_service/fetch_journal_form_field_options',           'LedgerController@fetchJournalFormFieldOptions'],
        'fetch_accounts_by_entities_and_merchant_id'      => ['post',      'ledger_service/fetch_accounts_by_entities_and_merchant_id', 'LedgerController@fetchAccountsByEntitiesAndMerchantID'],
        'replay_journal_rejected_events_ledger'           => ['post',      'ledger_service/replay_journal_rejected_events',             'LedgerController@replayJournalRejectedEvents'],
        'fetch_ledger_config_form_field_options_ledger'   => ['post',      'ledger_service/fetch_ledger_config_form_field_options',     'LedgerController@fetchLedgerConfigFormFieldOptions'],
        'fetch_account_types_ledger'                      => ['post',      'ledger_service/fetch_account_types',                        'LedgerController@fetchAccountTypes'],
        'delete_merchants_ledger'                         => ['post',      'ledger_service/delete_merchants',                           'LedgerController@deleteMerchants'],
        'create_ledger_journal_cron'                      => ['post',      'ledger_service/create_journal_cron',                        'LedgerController@createJournalCron'],

        // Order Outbox cron
        'order_outbox_retry'                              => ['post',      'order_outbox/retry',                                        'OrderOutboxController@retryOrderUpdate'                ],
        'order_outbox_partition_cron'                     => ['post',      'order_outbox/partition',                                    'OrderOutboxController@createOrderOutboxPartition'      ],

        'merchant_risk_data'                      => ['get',       'merchants/{id}/risk/data',                              'MerchantController@getMerchantRiskData'],


        //PG Ledger Routes
        'pg_onboard_merchant'                           => ['post',     'pg_ledger/merchant/onboard',           'FeatureController@onboardMerchantsOnPgLedger'],
        'pg_offboard_merchant'                          => ['post',      'pg_ledger/merchant/offboard', 'FeatureController@offboardMerchantsOnPgLedger'],
        'pg_sync_balances_merchant'                     => ['post', 'pg_ledger/merchant/sync_balances', 'FeatureController@syncMerchantBalancesOnPgLedger'],
        // Creates refund reversal for ledger timed out refunds
        'refunds_reversal_create'                       => ['post',  'refunds/reversal_create', 'RefundController@reversalCreateForVirtualRefund'],
        // Ledger Outbox cron
        'ledger_outbox_retry'                           => ['post',           'ledger_outbox/retry',                               'LedgerOutboxController@postRetryFailedReverseShadowTransactions'],
        'ledger_outbox_partition_cron'           => ['post',      'ledger/outbox/partition',                    'LedgerOutboxController@createLedgerOutboxPartition'              ],

        // Recon service proxy route
        'recon_service_request_proxy'             => ['any',        'recon/service/common/{path?}',                         'ReconServiceController@handleAny'                             ],
        'recon_service_file_upload_proxy'          => ['post',       'recon/service/upload_file',                             'ReconServiceController@uploadFile'                            ],
        'recon_service_workflow_file_upload_proxy'  => ['post',       'recon/service/workflow_file_upload',                     'ReconServiceController@workflowFileUpload'                     ],
        'recon_service_admin_request_proxy'       => ['post',       'recon/service/admin/{path?}',                          'ReconServiceController@handleAdminCall'                       ],

        // Metro
        'metro_project_create'                    => ['post',       'metro/projects',                                       'EdgeProxyController@proxy'                                    ],
        'metro_project_credentials_create'        => ['post',       'metro/projects/{id}/credentials',                      'EdgeProxyController@proxy'                                    ],
        'metro_project_topic_update'              => ['put',        'metro/projects/{id}/topics/{name}',                    'EdgeProxyController@proxy'                                    ],

        // Routes for PgRouter
        'internal_validate_order_token_params'       => ['post',       'internal/order/validate/token',                       'OrderController@internalOrderValidateTokenParams'],
        'internal_validate_order_transfer_params'    => ['post',       'internal/order/validate/transfer',                    'OrderController@internalOrderValidateTransferParams'],
        'internal_validate_order_bank'               => ['post',       'internal/order/validate/bank',                        'OrderController@internalOrderValidateBank'],
        'internal_validate_order_amount'             => ['post',       'internal/order/validate/amount',                      'OrderController@internalOrderValidateAmount'],
        'internal_validate_order_currency'           => ['post',       'internal/order/validate/currency',                    'OrderController@internalOrderValidateCurrency'],
        'internal_validate_order_checkout_config'    => ['post',       'internal/order/validate/checkout_config',             'OrderController@internalOrderValidateCheckoutConfig'],
        'internal_validate_order_tpv'                => ['post',       'internal/order/validate/tpv',                         'OrderController@internalOrderValidateTPV'],
        'internal_create_order_relations'            => ['post',       'internal/create/order/relations',                     'OrderController@internalCreateOrderRelations'],
        'internal_create_order_bank_account'         => ['post',       'internal/create/order/bank_account',                  'OrderController@internalCreateOrderBankAccountRelations'],
        'payment_update_reference6'                  => ['patch',      'payments/{id}/updateReference6',                       'PaymentController@updateReference6'                           ],
        'internal_payment_pricing'                   => ['get',        'internal/payments/{id}/pricing',                       'PaymentController@internalPricingFetchForPayment'                         ],
        'internal_pricing'                           => ['get',        'internal/entity/{entityType}/{entityId}/pricing',     'PaymentController@internalPricingFetch'                         ],
        'internal_merchant_risk_notification'        => ['post',       'internal/payments/{id}/risk_notification',            'PaymentController@internalRiskNotificationForRearch'                      ],
        'internal_token_create'                      => ['post',       'internal/tokens',                                      'TokenController@internalTokenCreateForRearch'                      ],
        'internal_sign_payload'                      => ['post',       'internal/payments/signer',                             'PaymentController@signPayloadInternal'                      ],
        'internal_generate_coproto'                  => ['post',       'internal/payments/coproto',                           'PaymentCreateController@generateCoprotoForRearch'            ],

        // Onboarding APIs
        'complete_submerchant_onboarding'         => ['post',       'submerchants/{id}/onboard',                             'MerchantController@completeSubmerchantOnboarding'],

        // Risk Audit Workflow Actions
        'w-actions_merchant_risk_audit_get'       => ['get',        'merchants/{merchant_id}/risk-audit/w-actions',           'WorkflowController@getActionsForRiskAudit'                   ],

        // network tokenization
        'token_create'                            => ['post',        'tokens',                                                   'TokenController@create'                                   ],
        'token_fetch'                             => ['post',        'tokens/fetch',                                             'TokenController@fetch'                                    ],
        'token_fetch_cryptogram'                  => ['post',        'tokens/service_provider_tokens/token_transactional_data',  'TokenController@fetchCryptoGram'                          ],
        'token_delete'                            => ['post',        'tokens/delete',                                            'TokenController@delete'                                   ],
        'token_status'                            => ['post',        'internal/tokens/status',                                   'TokenController@updateStatus'                             ],
        'update_token_on_authorized'              => ['post',        'internal/tokens/update_on_authorized',                     'TokenController@updateTokenOnAuthorized'                  ],
        'par_api'                                 => ['post',        'cards/fingerprints',                                       'TokenController@fetchParValue'                            ],

        'vault_migrate_token_bulk'                => ['post',        'tokens/vault/migrate/namespace',                           'TokenController@migrateVaultTokenViaBatch'                ],

        'token_hq_charge_batch'                   => ['post',         'token_hq/charge',                                         'TokenController@tokenHqChargeProcessingViaBatch'          ],
        'token_hq_cron'                           => [ 'post',        'tokenhq/cron',                                            'TokenController@tokenHqCron'                              ],

       'token_pause_not_supported_card_tokens'    => ['post',        'tokens/pause_not_supported/card',                          'TokenController@pauseNotSupportedCardTokens'                                                         ],

        //Push Token Provisioning
        'tokens_push'                             => ['post',          'tokens/push',                                          'TokenController@tokensPush'                                  ],
        'tokens_list'                             => ['post',          'tokens/list',                                          'TokenController@tokensList'                                  ],
        'tokens_push_fetch'                       => ['get',           'tokens/push/{id}',                                     'TokenController@tokensPushFetch'                             ],

        // Async tokenisation
        'tokenisation_local_cards'                => ['post',        'tokenisation/local_cards',                                 'TokenController@localSavedCardAsyncTokenisation'          ],
        'tokenisation_local_cards_recurring'      => ['post',        'tokenisation/local_cards/recurring',                       'TokenController@localSavedCardAsyncTokenisationRecurring' ],
        'tokenisation_local_cards_bulk'           => ['post',        'tokenisation/local_cards/bulk',                            'TokenController@localSavedCardBulkTokenisation'           ],
        'tokenisation_global_cards'               => ['post',        'tokenisation/global_cards',                                'TokenController@globalSavedCardAsyncTokenisation'         ],
        'tokenisation_global_customer_local_cards' => ['post',       'tokenisation/global/local_cards',                          'TokenController@globalCustomerLocalSavedCardAsyncTokenisation'],

        // migrate global tokens to local tokens on which consents are received
        'create_local_tokens_from_consents_bulk' => ['post',         'create_local_tokens_from_consents/bulk',                   'TokenController@bulkCreateLocalTokensFromConsents'],

        // 1 click checkout
       'third_watch_address_check'               => ['post',       'tw/address/check_cod_eligibility',                      'ThirdWatchController@checkAddressServiceability'   ],
       '1cc_cod_check'                           => ['post',       '1cc/check_cod_eligibility',                             'ThirdWatchController@checkCodEligibility'   ],
       'third_watch_address_cod_score'           => ['post',       'tw/address/cod_score',                                  'ThirdWatchController@saveCodScoreForAddress'                  ],

        // Risk Actions
        'create_risk_action'                        => ['post',       'risk-actions/create',                                     'RiskActionController@createRiskAction'                        ],
        'internal_create_risk_action'               => ['post',       'internal/risk-actions/create',                            'RiskActionController@createRiskActionInternal'                        ],
        'create_exec_risk_action'                   => ['post',       'risk-actions/execute',                                    'RiskActionController@createAndExecuteRiskAction'              ],
        'risk_attributes_get'                       => ['get',        'risk-actions/risk_attributes',                            'RiskActionController@getRiskAttributes'                       ],
        'bulk_risk_action_status_comment'           => ['post',       'bulk-action/comment',                                     'BulkActionController@addBulkRiskActionCommentPostExecution'   ],
        'chargeback_poc'                            => ['post',       'bulk_edit/chargeback_poc',                                'MerchantController@updateChargebackPOC'                       ],
        'whitelisted_domain'                        => ['post',       'bulk_edit/whitelisted_domain',                            'MerchantController@updateWhitelistedDomain'                   ],

        // 1 click checkout merchant calls
        'merchant_coupons'                        => ['post',         'merchant/coupons',                                        'MerchantController@fetchCouponCodes'                           ],
        'merchant_coupon_validity'                => ['post',         'merchant/coupon/apply',                                   'MerchantController@applyCoupon'                              ],
        'merchant_coupon_remove'                  => ['post',         'merchant/coupon/remove',                                  'MerchantController@removeCoupon'                              ],
        'update_fetch_coupons_url'                => ['post',         'merchant/coupons/url',                                     'MerchantController@updateFetchCouponsUrl'                    ],
        'update_fetch_coupons_url_dark'           => ['post',         'merchant/coupons/url_dark',                                     'MerchantController@updateFetchCouponsUrl'                    ],
        'update_coupon_validity_url'              => ['post',         'merchant/coupon/apply/url',                               'MerchantController@updateApplyCouponUrl'                  ],
        'update_coupon_validity_url_dark'         => ['post',         'merchant/coupon/apply/url_dark',                               'MerchantController@updateApplyCouponUrl'                  ],
        'shipping_info'                             => ['post',       'merchant/shipping_info',                                'MerchantController@getShippingInfo'                          ],
        'update_serviceability_url'                 => ['post',       'merchant/shipping_info/url',                            'MerchantController@updateShippingInfoUrl'                   ],
        'update_serviceability_url_dark'           => ['post',       'merchant/shipping_info/url_dark',                            'MerchantController@updateShippingInfoUrl'                   ],
        'update_merchant_platform'                 => ['post',        'merchant/1cc_platform',                                     'MerchantController@updateMerchantPlatform'                  ],
        'update_merchant_platform_dark'             => ['post',       'merchant/1cc_platform_dark',                             'MerchantController@updateMerchantPlatform'                  ],
        'update_merchant_1cc_config_dark'           => ['post',       'merchant/1cc_config_dark',                             'MerchantController@updateMerchant1ccConfigDark'                  ],
        'update_cod_slabs'                          => ['post',       'merchant/slabs/cod',                                    'MerchantController@updateCodSlabs'                           ],
        'update_cod_slabs_dark'                     => ['post',       'merchant/slabs/cod_dark',                                    'MerchantController@updateCodSlabs'                           ],
        'update_shipping_slabs'                     => ['post',       'merchant/slabs/shipping',                               'MerchantController@updateShippingSlabs'                      ],
        'update_shipping_slabs_dark'                => ['post',       'merchant/slabs/shipping_dark',                               'MerchantController@updateShippingSlabs'                      ],
        'update_cod_serviceability_slabs_dark'      => ['post',       'merchant/slabs/dark',                               'MerchantController@updateCodServiceabilitySlabDark'                      ],
        'order_update_customer_details_1cc'         => ['patch',      'orders/1cc/{id}/customer/',                             'OrderController@updateCustomerDetailsFor1CCOrder'             ],
        'order_reset_1cc'                           => ['post',       'orders/1cc/{id}/reset',                                 'OrderController@reset1CCOrder'                                ],
        '1cc_configs_update'                        => ['post',       '1cc/merchant/configs',                                  'MerchantController@update1ccConfig'],
        '1cc_configs_get'                           => ['get',        '1cc/merchant/configs',                                  'MerchantController@get1ccConfig'],
        '1cc_prepay_cod_configs_get'                => ['get',        '1cc/prepay/configs',                           'MerchantController@get1ccPrepayCodConfig'],
        'internal_1cc_prepay_cod_configs_get'       => ['get',        'internal/1cc/merchants/{id}/prepay_configs',            'MerchantController@getInternal1ccPrepayCodConfig'],
        'internal_1cc_configs_get'                  => ['get',         'internal/1cc/merchants/{id}/configs',                  'MerchantController@getInternal1ccConfig'],
        'checkout_1cc_configs_get'                  => ['get',        'checkout/1cc/merchant/configs',                         'MerchantController@getCheckout1ccConfig'],
        '1cc_merchant_preferences'                  => ['get',        'merchant/1cc_preferences',                                  'MerchantController@get1ccMerchantPreferences'],
        '1cc_disable_magic'                         => ['post',       '1cc/magic/disable',                                       'MerchantController@disable1ccMagicCheckout'],
        '1cc_apply_gift_card'                       => ['post',       '1cc/orders/{id}/giftcard/apply',                          'MerchantController@applyGiftCard'             ],
        '1cc_remove_gift_card'                      => ['post',       '1cc/orders/{id}/giftcard/remove',                          'MerchantController@removeGiftCard'             ],
        '1cc_order_notes_update'                    => ['patch',      'orders/1cc/{id}/order-notes',                             'OrderController@update1CCOrderNotes'             ],
        'update_merchant_1cc_coupon_config'         => ['post',       '1cc/merchant/coupon/configs',                             'MerchantController@updateMerchant1ccCouponConfig'],
        '1cc_update_shipping_provider_config'       => ['post',       '1cc/shipping-provider/configs',                           'MerchantController@updateShippingProviderConfig'],
        '1cc_get_shopify_configs'                   => ['get',        '1cc/merchant/shopify/configs',                            'MerchantController@getShopify1ccConfigs'],
        'internal_1cc_shopify_customer_addresses_get' => ['get',        'internal/1cc/shopify/merchants/{id}/customer_addresses',                   'MerchantController@getInternalShopifyCustomerAddresses'],
        'offers_fetch_for_order'                    => ['get',        'order/{id}/payment_offers',                               'OrderController@getOffersForOrder'],

        '1cc_shipping_service_merchant_config_create'               => ['post',      '1cc/shipping_service/merchant_config/create',                     'MerchantConfigController@create'],
        '1cc_shipping_service_merchant_config_update_by_type'       => ['post',      '1cc/shipping_service/merchant_config/update_by_type',             'MerchantConfigController@updateByType'],
        '1cc_shipping_service_remove_shipping_providers'            => ['delete',    '1cc/shipping_service/merchant_config/merchant/{merchantId}',      'MerchantConfigController@removeShippingProvider'],
        '1cc_shipping_service_connect_shipping_providers'           => ['post',      '1cc/shipping_service/shipping_providers/connect',                 'ShippingProviderController@connect'],
        '1cc_shipping_service_merchant_config_assign_shopify_dark'           => ['post',      '1cc/shipping_service/merchant_config/connect/shopify',      'MerchantConfigController@assignShopifyAsShippingProvider'],
        '1cc_shipping_service_disable_shopify_dark'           => ['post',      '1cc/shipping_service/merchant_config/disable/shopify',      'MerchantConfigController@disableShopifyAsShippingProvider'],


        '1cc_cod_eligibility_attribute_list'                => ['get',    '1cc/rto_prediction_service/cod_eligibility_attribute/{cod_eligibility_type}',             'CODEligibilityAttributeController@list'       ],
        '1cc_cod_eligibility_attribute_upsert_bulk'         => ['post',   '1cc/rto_prediction_service/cod_eligibility_attribute/{cod_eligibility_type}/upsert/bulk', 'CODEligibilityAttributeController@bulkUpsert' ],
        '1cc_cod_eligibility_attribute_upsert_batch'        => ['post',   '1cc/rto_prediction_service/cod_eligibility_attribute/{cod_eligibility_type}/upsert/batch', 'CODEligibilityAttributeController@batchUpsert' ],
        '1cc_cod_eligibility_attribute_delete'              => ['delete', '1cc/rto_prediction_service/cod_eligibility_attribute/{id}',        'CODEligibilityAttributeController@delete'     ],
        '1cc_cod_eligibility_attribute_delete_by_attribute' => ['delete',   '1cc/rto_prediction_service/cod_eligibility_attribute/{cod_eligibility_type}/{attribute_type}/{attribute_value}',        'CODEligibilityAttributeController@deleteByAttribute'     ],

        '1cc_merchant_order_review_automation_rule_configs_get'    => ['get',  '1cc/orders/review/automation/rule_configs', 'MerchantOrderReviewAutomationController@get'],
        '1cc_merchant_order_review_automation_rule_configs_upsert' => ['post', '1cc/orders/review/automation/rule_configs', 'MerchantOrderReviewAutomationController@upsert'],

        '1cc_merchant_file_upload_audit_create'        => ['post', '1cc/rto_prediction_service/file_upload_audits/create', 'RtoMerchantFileUploadAuditsController@createFileUploadAudit'],
        '1cc_merchant_file_upload_audit_list'          => ['get', '1cc/rto_prediction_service/file_upload_audits/list', 'RtoMerchantFileUploadAuditsController@listFileUploadAudits'],

        //1cc rto mlmodel configs
        '1cc_rto_mlmodel_configs_create_admin'        => ['post', '1cc/rto_prediction_service/mlmodel_configs', 'RtoPredictionConfigsController@createMLModelConfigs'],
        '1cc_rto_mlmodel_configs_get_admin'           => ['get', '1cc/rto_prediction_service/mlmodel_configs', 'RtoPredictionConfigsController@getMLModelConfigs'],
        '1cc_rto_mlmodel_configs_update_admin'        => ['patch', '1cc/rto_prediction_service/mlmodel_configs', 'RtoPredictionConfigsController@updateMLModelConfigs'],
        //1cc rto merchant model configs
        '1cc_rto_merchant_model_configs_get_admin'           => ['get', '1cc/rto_prediction_service/merchant_mlmodels/configs', 'RtoPredictionConfigsController@getMerchantConfigs'],
        '1cc_rto_merchant_model_configs_update_admin'        => ['patch', '1cc/rto_prediction_service/merchant_mlmodels/configs', 'RtoPredictionConfigsController@updateMerchantConfigs'],
        '1cc_rto_merchant_model_configs_delete_admin'        => ['delete', '1cc/rto_prediction_service/merchant_mlmodels/configs', 'RtoPredictionConfigsController@deleteMerchantConfigs'],
        '1cc_rto_merchant_mlmodel_update_admin'              => ['patch', '1cc/rto_prediction_service/merchant_mlmodels/model', 'RtoPredictionConfigsController@updateMerchantModel'],

        '1cc_rto_dashboard_list'                     => ['post',   '1cc/rto_prediction_service/dashboard', 'RtoDashboardController@list' ],
        '1cc_cod_order_list'                         => ['get', '1cc/cod/orders', 'OrderController@getCODOrders'],
        '1cc_prepay_order_list'                      => ['get', '1cc/prepay/orders', 'OrderController@getPrepayOrders'],
        '1cc_prepay_order_details'                   => ['get', '1cc/prepay/orders/{id}', 'OrderController@getPrepayOrder'],
        '1cc_cod_order_review'                       => ['post', '1cc/orders/cod/review','OrderController@updateActionFor1ccOrder'],
        'internal_1cc_order_review'                  => ['post', 'internal/1cc/orders/review','OrderController@review1ccOrder'],

        // 1 click checkout shopify integration
        '1cc_shopify_checkout'                      => ['post',       '1cc/shopify/checkout',                                  'OneClickCheckoutController@shopifyCreateCheckout'                ],
        '1cc_shopify_checkout_preflight'            => ['options',    '1cc/shopify/checkout',                                  'OneClickCheckoutController@allowCors'                  ],
        '1cc_shopify_checkout_update'               => ['post',       '1cc/shopify/abandon_checkout',                          'OneClickCheckoutController@shopifyUpdateCheckout'                ],
        '1cc_shopify_checkout_update_preflight'     => ['options',    '1cc/shopify/abandon_checkout',                          'OneClickCheckoutController@allowCors'                  ],
        '1cc_shopify_complete'                      => ['post',       '1cc/shopify/complete',                                  'OneClickCheckoutController@shopifyCompleteCheckout'                ],
        '1cc_shopify_complete_preflight'            => ['options',    '1cc/shopify/complete',                                  'OneClickCheckoutController@allowCors'                  ],
        '1cc_shopify_add_checkout_url'              => ['post',       '1cc/shopify/checkout/url',                              'OneClickCheckoutController@shopifyUpdateCheckoutUrl'                ],
        '1cc_shopify_add_checkout_url_preflight'    => ['options',    '1cc/shopify/checkout/url',                              'OneClickCheckoutController@allowCors'                  ],
        '1cc_shopify_checkout_options'              => ['get',        '1cc/shopify/checkout_options',                          'OneClickCheckoutController@getCheckoutOptions'                ],
        '1cc_shopify_checkout_options_preflight'    => ['options',    '1cc/shopify/checkout_options',                          'OneClickCheckoutController@allowCors'                  ],
        '1cc_shopify_oauth_redirect'                => ['get',        '1cc/shopify/oauth/redirect',                            'OneClickCheckoutController@shopifyOAuthRedirect'                ],
        '1cc_shopify_oauth_callback'                => ['get',        '1cc/shopify/oauth/callback',                            'OneClickCheckoutController@shopifyOAuthRedirect'                ],
        '1cc_shopify_order'                         => ['post',       '1cc/shopify/order',                                     'OneClickCheckoutController@createOrderAndGetPreferences'                ],
        '1cc_process_webhooks'                      => ['post',       '1cc/process_webhooks/{platform}',                                   'OneClickCheckoutController@processWebhook'              ],
        'update_shopify_1cc_config'               => ['post',         'merchant/1cc/shopify/config',                           'MerchantController@updateShopify1ccConfig'                   ],
        '1cc_fetch_analytics'                       => ['post',       '1cc/analytics/shopify',                                 'OneClickCheckoutController@getOrderAnalytics'                   ],
        'update_shopify_1cc_credentials'            => ['post',       '1cc/merchants/{merchant_id}/shopify/credentials',       'MerchantController@updateShopify1ccCredentials'                 ],
        '1cc_address_ingestion_config_get'          => ['get',        '1cc/merchant/address_ingestion/config',    'MerchantController@get1ccAddressIngestionConfig' ],
        '1cc_address_ingestion_addresses_post'      => ['post',       '1cc/merchant/address_ingestion/addresses', 'MerchantController@push1ccAddresses' ],

        '1cc_wooc_ingestion_plugins_post'           => ['post',       '1cc/merchant/woocommerce/plugins_list', 'MerchantController@push1ccWoocPluginInfo' ],

        '1cc_process_prepay_cod_orders'             => ['post',       '1cc/orders/cod/convert',                    'MerchantController@convert1ccPrepayCODOrders'],
        '1cc_get_woocommerce_configs'               => ['get',        'internal/1cc/merchants/woocommerce/configs',                         'MerchantController@getWoocommerce1ccConfigs'],

        '1cc_shopify_fetch_meta_fields'             => ['get',        '1cc/admin/merchants/{id}/shopify/metafields',                            'OneClickCheckoutController@fetchShopifyMetaFields'            ],
        '1cc_shopify_update_meta_fields'            => ['post',       '1cc/admin/merchants/{id}/shopify/metafields',                            'OneClickCheckoutController@updateShopifyMetaFields'           ],
        '1cc_shopify_fetch_themes'                  => ['get',        '1cc/admin/merchants/{id}/shopify/themes',                                'OneClickCheckoutController@fetchShopifyThemes'                ],
        '1cc_shopify_insert_theme'                  => ['put',        '1cc/admin/merchants/{id}/shopify/snippets/insert',                  'OneClickCheckoutController@insertShopifySnippet'                ],
        '1cc_shopify_render_magic_snippet'          => ['put',        '1cc/admin/merchants/{id}/shopify/snippets/render',                  'OneClickCheckoutController@renderMagicSnippet'                ],
        '1cc_fetch_dashboard_analytics'             => ['get',        '1cc/analytics',                                        'OneClickCheckoutController@handleMerchantDashboardReq'                ],

        'get_affordability_suite'                 => ['get',          'affordability',                                         'AffordabilityController@__invoke'                             ],

        // magic checkout service
        '1cc_create_fee_rules'                          =>['post',      '1cc/shipping/cod/fee_rules',                 'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_create_fee_rule'                           =>['post',      '1cc/shipping/cod/fee_rule' ,                 'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_fetch_fee_rule'                            =>['get',       '1cc/shipping/cod/fee_rule/{fee_rule_id}',    'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_filter_fee_rule'                           =>['post',      '1cc/shipping/cod/fee_rule/filter',           'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_delete_fee_rule'                           =>['delete',    '1cc/shipping/cod/fee_rule/{fee_rule_id}',    'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_create_zone'                               =>['post',      '1cc/shipping/cod/zone',                      'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_update_zone'                               =>['put',       '1cc/shipping/cod/zone',                      'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_add_locations'                             =>['post',      '1cc/shipping/cod/zone/locations/add' ,       'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_remove_locations'                          =>['post',      '1cc/shipping/cod/zone/locations/remove',     'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_fetch_zone'                                =>['get',       '1cc/shipping/cod/zone/{zone_id}',            'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_filter_zone'                               =>['post',      '1cc/shipping/cod/zone/filter',               'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_delete_zone'                               =>['delete',    '1cc/shipping/cod/zone/{zone_id}',            'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_fetch_all_countries_with_zone'             =>['get',       '1cc/shipping/cod/countries',                 'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_cod_engine_config_summary'                 =>['get',       '1cc/shipping/cod/summary',                   'OneClickCheckoutController@handleMerchantDashboardReq'],
        // advanced cod engine api
        '1cc_create_item_category'                      =>['post',      '1cc/shipping/cod/item/category',                           'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_update_item_category'                      =>['put',       '1cc/shipping/cod/item/category',                           'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_fetch_item_category'                       =>['get',       '1cc/shipping/cod/item/category/{item_category_id}',        'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_filter_item_category'                      =>['post',      '1cc/shipping/cod/item/category/filter',                    'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_delete_item_category'                      =>['delete',    '1cc/shipping/cod/item/category/{item_category_id}',        'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_config_item_category'                      =>['put',       '1cc/shipping/cod/item/category/config',                    'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_item_category_search_product'              =>['get',       '1cc/shipping/cod/item/category/search/products',           'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_fee_rule_associations'                     =>['put',       '1cc/shipping/cod/fee_rule/mapping',                        'OneClickCheckoutController@handleMerchantDashboardReq'],
        '1cc_clear_fee_rule'                            =>['post',      '1cc/shipping/cod/fee_rule/clear',                          'OneClickCheckoutController@handleMerchantDashboardReq'],

     //Tokenisation Bin internal routes
        'create_token_iin'                          =>  ['post',       'tokens/iin',                                       'TokenisedIinController@createIin'                                    ],
        'fetch_token_iin'                           =>  ['post',       'tokens/iin/fetch/{iin}',                           'TokenisedIinController@fetchIin'                                     ],
        'update_token_iin'                          =>  ['post',       'tokens/iin/update',                                'TokenisedIinController@updateIin'                                    ],
        'fetch_token_iin_by_range'                  =>  ['post',       'tokens/iin/{iin}',                                 'TokenisedIinController@fetchbyTokenIin'                              ],
        'fetch_iin_by_token_iin'                    =>  ['get',        'tokens/iin/{iin}',                                 'TokenisedIinController@fetchbyTokenIin'                              ],
        'add_token_iin_bulk'                        =>  ['post',       'tokens/bulk/iin',                                  'TokenisedIinController@addIinBulk'                                   ],
        'delete_iin'                                =>  ['post',       'tokens/delete/{id}',                               'TokenisedIinController@deleteIin'                                    ],
        'delete_iin_bulk'                           =>  ['post',       'tokens/bulk/delete/{id}',                          'TokenisedIinController@deleteBulk'                                   ],

        'shipping_provider_list'                   => ['get',      '1cc/shipping_providers',                              'ShippingProviderController@list'                           ],
        'shipping_provider_post'                   => ['post',     '1cc/shipping_providers',                              'ShippingProviderController@create'                           ],
        'shipping_provider_patch'                  => ['put',      '1cc/shipping_providers/{id}',                        'ShippingProviderController@update'                           ],
        'shipping_provider_delete'                 => ['delete',   '1cc/shipping_providers/{id}',                        'ShippingProviderController@delete'                           ],

        'shipping_method_provider_list'                   => ['get',      '1cc/shipping_method_providers',                              'ShippingMethodProviderController@list'                           ],
        'shipping_method_provider_post'                   => ['post',     '1cc/shipping_method_providers',                              'ShippingMethodProviderController@create'                           ],
        'shipping_method_provider_patch'                  => ['put',      '1cc/shipping_method_providers/{id}',                         'ShippingMethodProviderController@update'                           ],
        'shipping_method_provider_delete'                 => ['delete',   '1cc/shipping_method_providers/{id}',                         'ShippingMethodProviderController@delete'                           ],

        //relay routes
        'relay_get_apps'                => ['get',                  'relay/apps',                                           'RelayController@getApps'],
        'relay_get_app_by_id'           => ['get',                  'relay/apps/{app_id}',                                  'RelayController@getAppByID'],
        'relay_create_app'              => ['post',                 'relay/apps',                                           'RelayController@createApp'],
        'relay_update_apps'             => ['patch',                'relay/apps/{app_id}',                                  'RelayController@updateApps'],
        'relay_delete_apps'             => ['delete',               'relay/apps/{app_id}',                                  'RelayController@deleteApps'],

        'relay_get_props'               => ['get',                  'relay/apps/{app_id}/props',                            'RelayController@getProps'],
        'relay_create_props'            => ['post',                 'relay/apps/{app_id}/props',                            'RelayController@createProps'],
        'relay_delete_props'            => ['delete',               'relay/apps/{app_id}/props/{prop_id}',                  'RelayController@deleteProps'],
        'relay_update_props'            => ['put',                  'relay/apps/{app_id}/props/{prop_id}',                  'RelayController@updateProps'],
        'relay_get_pending_props'       => ['get',                  'relay/apps/{app_id}/props/pending',                    'RelayController@getPendingProps'],
        'relay_create_bulk_props'       => ['post',                 'relay/apps/{app_id}/props/bulk',                       'RelayController@createBulkProps'],

        'relay_props_action'            => ['post',                  'relay/props/action',                                  'RelayController@propsAction'],

        //CAC routes
        'cac_role_fetch_all'                    => ['get',                    'cac/roles',                                               'RolesController@listRolesForMerchant'],
        'cac_role_fetch_role_map'               => ['get',                    'cac/role_map',                                               'RolesController@listRolesMap'],
        'admin_fetch_role_map'               => ['get',                    'cac/admin/role_map',                                               'RolesController@listRolesMapForAdmin'],
        'view_cac_role'                         => ['get',                    'cac/role/{id}',                                                  'RolesController@getRole'],
        'role_self_get'                         => ['get',                    'cac/self/role',                                                   'RolesController@getSelfRole'                                    ],
        'fetch_authz_roles_by_role_id'             => ['get',                    'cac/role/{id}/authz_roles',                                                   'RolesController@fetchAuthZRolesByRoleId'  ],
        //'delete_cac_role'                       => ['delete',                 'cac/role/{id}',                                                  'RolesController@deleteRole'                                 ],
        'cac_privileges_fetch'                  => ['get',                    'cac/privileges',                                          'AccessControlPrivilegesController@listPrivileges'],
        'create_cac_role'                       => ['post',                   'cac/role',                                                   'RolesController@create'],
        'edit_cac_role'                         => ['patch',                  'cac/role/{id}',                                       'RolesController@edit'],
        'relay_get_props_history'               => ['get',                    'relay/apps/{app_id}/props/{prop_id}/history',                'RelayController@getPropsHistory'],
        'fetch_customer_eligibility'            => ['post',          'customers/eligibility',                               'EligibilityController@fetchCustomerEligibility'],
        'fetch_customer_eligibility_by_id'      => ['get',           'customers/eligibility/{id}',                          'EligibilityController@fetchCustomerEligibilityById'],
        'fetch_public_customer_eligibility'     => ['post',          'public/customers/eligibility',                        'EligibilityController@fetchPublicCustomerEligibility'],
        //Capital corp card for payouts
        'corp_card_banking_account_create'      => ['post', 'merchant/onboardCCCForBanking', 'CorpCardController@onboardCapitalCorpCardForRzpX'],

        '1cc_methods_offers' => ['get', '1cc/merchant/methods_offers', 'OneClickCheckoutController@getMethodsAndOffersForMerchant'],
        '1cc_methods_offers_preflight'    => ['options',    '1cc/merchant/methods_offers',                          'OneClickCheckoutController@allowCors'],

        'admin_1cc_whitelist_coupons'           => ['post', '1cc/admin/merchants/{id}/coupons/whitelist', 'OneClickCheckoutController@adminWhitelistCoupons'],
        'wallet_dashboard_proxy'                => ['any',  'wallet/proxy/{path?}',                  'WalletProxyController@proxy']
    ];

    public static $public = [
        '1cc_methods_offers_preflight',
        '1cc_methods_offers',
        'test_mailgun',
        'fetch_international_virtual_account_by_vacurrency',
        '1cc_shopify_checkout',
        '1cc_shopify_checkout_preflight',
        '1cc_shopify_checkout_options',
        '1cc_shopify_checkout_options_preflight',
        '1cc_shopify_complete',
        '1cc_shopify_complete_preflight',
        '1cc_shopify_oauth_redirect',
        '1cc_shopify_oauth_callback',
        'create_checkout_order',
        'close_checkout_order',
        'checkout',
        'payment_create',
        'payment_create_checkout',
        'payment_create_jsonp',
        'payment_mandate_hq_redirect_authenticate',
        'payment_create_ajax',
        'payment_create_checkout_json',
        'payment_create_fees',
        'payment_calculate_fees',
        'payment_otp_submit',
        'payment_otp_resend',
        'payment_otp_resend_json',
        'payment_otp_generate',
        'payment_topup_ajax',
        'payment_topup_post',
        'payment_redirect_callback',
        'payment_cancel',
        'payment_add_metadata',
        'payment_get_status',
        'payment_callback_post',
        'payment_callback_get',
        'payment_callback_ajax_get',
        'payment_get_flows',
        'payment_get_iin_details',
        'card_issuer_validate',
        'invoice_get_status',
        'invoice_send_notification',
        'invoice_get_pdf',
        'pages_view',
        'payment_page_hosted_button_preferences',
        'payment_page_hosted_button_details',
        'hosted_subscription_button_details',
        'payment_page_view_get',
        'payment_button_hosted_preferences',
        'payment_button_hosted_button_details',
        'subscription_button_hosted_button_details',
        'merchant_public_get_banks',
        'merchant_methods',
        'merchant_checkout_preferences',
        'mock_acs',
        'mock_atom_payment',
        'mock_amex_payment',
        'mock_axis_migs_payment',
        'mock_first_data_payment',
        'mock_axis_genius_payment',
        'mock_paytm_payment',
        'mock_mobikwik_payment',
        'mock_netbanking_payment',
        'mock_netbanking_payment_get',
        'mock_mozart_payment_post',
        'mock_mozart_payment_get',
        'mock_cardless_emi_payment',
        'mock_paylater_payment',
        'mock_emandate_payment',
        'mock_card_fss_payment',
        'mock_card_fss_payment_post',
        'mock_paysecure_payment',
        'mock_sharp_payment_post',
        'mock_sharp_payment_get',
        'mock_sharp_payment_submit',
        'mock_wallet_payment',
        'mock_wallet_payment_get',
        'mock_upi_payment',
        'mock_aeps_payment',
        'mock_wallet_payment_with_paymentid',
        'dummy_return_callback',
        'emi_plans_fetch_multiple',
        'customer_get_saved_status',
        'app_delete_token',
        'customer_logout_global',
        'customer_create_token_public',
        'otp_post',
        'otp_verify',
        '1cc_otp_verify',
        '1cc_customer_truecaller_verify',
        'otp_verify_app',
        'device_create',
        'merchant_methods_downtime',
        'virtual_account_order_create',
        //'qr_code_checkout_create',
        'qr_code_fetch_payment_status',
        'payment_redirect_3ds',
        'payment_redirect_3ds_get',
        'currency_fetch_all',
        'payment_validate_account',
        'fund_account_create_public',
        'auth_link_paper_mandate_authenticate',
        'auth_link_paper_mandate_validate',
        'validate_checkout_offers',
        'payout_links_generate_end_user_otp',
        'payout_links_verify_customer_otp',
        'payout_links_customer_hosted_page',
        'payout_links_added_fund_accounts',
        'payout_links_initiate',
        'payout_links_generate_end_user_otp_cors',
        'payout_links_verify_customer_otp_cors',
        'payout_links_initiate_cors',
        'payout_links_added_fund_accounts_cors',
        'payout_links_status',
        'payout_links_status_cors',
        'checkout_personalisation',
        'payment_button_hosted_view',
        'subscription_button_hosted_view',
        'subscription_button_create_subscription',
        'subscription_button_create_subscription_v2',
        'checkout_embedded',
        'checkout_embedded_get',
        'checkout_hdfcvas',
        'checkout_rewards',
        'merchant_coupons',
        'merchant_coupon_validity',
        'merchant_coupon_remove',
        'shipping_info',
        'customer_update_global',
        'customer_truecaller_verify',
        'customer_create_global_address',
        'customer_edit_global_address',
        'customer_record_1cc_address_consent_view',
        'customer_record_1cc_address_consent',
        'record_1cc_customer_consent',
        'order_update_customer_details_1cc',
        'order_reset_1cc',
        '1cc_pincode_get',
        '1cc_country_pincode_get',
        '1cc_location_autosuggest',
        'third_watch_address_check',
        '1cc_cod_check',
        'banking_axis_invitations_send',
        'states_by_country',
        'country_fetch',
        'state_fetch',
        '1cc_shopify_checkout_update',
        '1cc_shopify_checkout_update_preflight',
        'app_fetch_tokens_v2',
        'app_delete_tokens_v2',
        '1cc_shopify_add_checkout_url',
        '1cc_shopify_add_checkout_url_preflight',
        '1cc_order_notes_update',
        '1cc_apply_gift_card',
        '1cc_remove_gift_card',
        'offers_fetch_for_order',
        'fetch_public_customer_eligibility'
    ];

    public static $device = [
        'set_mpin',
        'reset_mpin',
        'customer_balance_fetch',
        'customer_bank_account_fetch',
        'upi_customer_bank_accounts_fetch',
        'upi_customer_razor_accounts_fetch',
        'device_fetch',
        'device_refresh_token',
        'p2p_create',
        'p2p_fetch_multiple',
        'p2p_fetch',
        'p2p_authorize',
        'p2p_reject',
        'customer_collect_request_fetch',
        'device_customer_fetch',
    ];

    public static $publicCallback = [
        'payment_callback_with_key_post',
        'payment_callback_with_key_get',
        'payment_callback_ajax_with_key_get',
    ];

    /**
     * Routes for which merchant access check is skipped, mainly CA LMS routes, as lots
     * of cross selling is done for CA, need to skip this check so CA Initiation form can be raised
     * @var array
     */
    public static $skipMerchantAccessCheckOnSpecificAdminAuthRoutes = [
        'banking_account_create_admin',
        'banking_account_create_lms_mob',
        'banking_account_update_lms_mob',
        'admin_fetch_banking_account',
        'admin_fetch_banking_accounts_multiple',
        'banking_account_activation_detail_update_internal',
        'external_merchant_composite_details_fetch',
        'banking_account_service_lms_routes_all',
        'mob_ca_lms_routes',
        'mob_admin_routes',
        'merchant_create_lead_to_salesforce_admin',
        'salesforce_event_admin',
        'salesforce_event_admin_one_ca',
        'merchant_create_lead_to_salesforce_admin_for_one_ca',
        'mob_admin_routes_for_one_ca',
        'mob_intent_apply_application',
        'mob_fetch_application',
        'mob_fetch_multiple_applications',
        'mob_create_intent',
        'mob_fetch_intent',
        'mob_fetch_multiple_intents',
        'mob_get_workflow',
        'mob_save_workflow',
        'merchant_consents_admin_fetch',
        'ufh_admin_upload_file',
        'ufh_get_file_signed_url_by_mid'
    ];

    /**
     * Routes which are supposed to always render a view and not JSON(Api like behavior)
     * @var array
     */
    public static $publicView = [
        'pages_view',
        'pages_view_by_slug',
        'payment_page_view_get',
        'pages_view_by_slug_empty',
    ];

    public static $private = [
        'customAction',

        'banking_account_statement_fetch',
        'collect_info_merchant_details_patch',
        'mock_bvs_validation_event',
        'bulk_migrate_aggregator_to_reseller',
        'bulk_migrate_reseller_to_aggregator',
        'internal_migrate_reseller_to_aggregator',
        'internal_migrate_aggregator_to_reseller',
        'partner_remove_switch_merchant_access',
        'qr_configs_create',
        'qr_configs_fetch',
        'qr_configs_delete',
        'qr_configs_update',
        'payout_reject',
        'payout_approve',
        'payout_create_with_otp',
        'payout_create_2FA',
        'payout_validate',
        'user_otp_create',
        'merchant_balance_fetch',
        'activated_banking_accounts_list',
        'payment_page_get_payments',
        'qr_code_fetch_multiple',
        'qr_payments_fetch_multiple',
        'qr_payment_fetch_for_qr_code',
        'wallet_service',
        'mir_instruments_get',
        'fetch_iir_discrepancies_of_mir',
        'get_discrepancy_list_merchant',
        'create_iir_discrepancy_answer',
        'settlement_ondemand_fees',
        'settlement_ondemand_create',
        'settlement_ondemand_fetch',
        'settlement_ondemand_fetch_by_id',
        'setl_merchant_dashboard_config_get',
        'setl_fetch_details',
        'payment_links_get',
        'payment_links_create',
        'payment_links_update',
        'payment_links_cancel',
        'payment_links_expire',
        'payment_links_fetch_multiple',
        'payment_links_notify_by_medium',
        'payment_links_get_reminder_next_run',
        'payment_links_get_batch_status',
        'payment_links_service_count_route',
        'payout_links_fetch_multiple',
        'payout_links_fetch_by_id',
        'payout_links_create',
        'payout_links_update',
        'payout_links_cancel',
        'payment_create_private',
        'payment_create_private_old',
        'payment_create_private_json',
        'payment_fees',
        'payment_create_recurring',
        'payment_create_nach_register',
        'payment_create_wallet',
        'payment_create_upi',
        'payment_create_openwallet',
        'payment_create_razorpaywallet',
        'payment_create_aeps',
        'payment_otp_submit_private',
        'payment_otp_resend_private',
        'payment_refund',
        'payment_capture',
        'release_submerchant_payment',
        'payment_fetch_transfers',
        'payment_transfer',
        'payments_downtime',
        'refresh_payments_resolved_downtimes',
        'refresh_payments_scheduled_downtimes',
        'fetch_payments_ongoing_downtimes',
        'fetch_payments_resolved_downtimes',
        'fetch_payments_scheduled_downtimes',
        'payments_downtime_by_id',
        'payment_fetch_by_id',
        'payment_fetch_multiple',
        'payment_status_count',
        'payment_fetch_refunds',
        'payment_fetch_refund_by_id',
        'payment_fetch_transaction',
        'payment_fetch_card_details',
        'payment_payout',
        'payment_validate_vpa_old',
        'payment_validate_vpa',
        'payment_edit',
        'payment_charge_token',
        'recurring_token_pre_debit_notify',
        'refund_create',
        'refund_fetch_fee',
        'refund_fetch_creation_data',
        'refund_fetch_by_id',
        'refund_fetch_multiple',
        'refund_edit',
        'card_check_recurring',
        'card_fetch_by_id',
        'iin_list_by_flow',
        'iin_get',
        'balance_fetch',
        'track_plugins_events_segment',
        'order_create',
        'order_create_admin',
        'order_fetch',
        'order_fetch_by_id',
        'order_fetch_by_id_1cc',
        'order_edit',
        'order_payments',
        'feature_dummy',
        'razorx_dummy',

        // Routes webhook_create and webhook_edit exist in this list as exception, a merchant i.e. Limetray uses it.
        'webhook_create',
        'webhook_edit',
        'webhook_fetch_multiple',
        'setl_amount',
        'setl_fetch_by_id',
        'setl_fetch_multiple',
        'setl_combined_report',
        'setl_combined_recon',
        'setl_fetch_transactions',
        'setl_amount_check',
        'customer_create',
        'customer_update',
        'customer_create_token',
        'customer_fetch_by_id',
        'customer_fetch_multiple',
        'customer_update_token',
        'customer_delete_token',
        'customer_fetch_token',
        'customer_cancel_token',
        'customer_fetch_tokens',
        'customer_add_bank_account',
        'customer_fetch_bank_account',
        'customer_delete_bank_account',
        'customer_wallet_payout',
        'invoice_create',
        'invoice_fetch',
        'invoice_get_count',
        'invoice_fetch_multiple',
        'invoice_update',
        'invoice_issue',
        'invoice_cancel',
        'invoice_cancel_by_batch',
        'invoice_delete',
        'invoice_send_notification_private',
        'item_create',
        'item_fetch',
        'item_fetch_multiple',
        'item_update',
        'item_delete',
        'customer_create_address',
        'customer_delete_address',
        'customer_fetch_addresses',
        'customer_set_primary_address',
        'subscription_settings_get',
        'subscription_settings',
        'subscriptions_overview',
        'subscription_pause',
        'subscription_resume',
        'subscription_delete_offer',
        'plan_create',
        'plan_fetch',
        'plan_fetch_multiple',
        'subscription_create',
        'subscription_fetch',
        'subscription_fetch_multiple',
        'subscription_cancel',
        'subscription_create_addon',
        'addon_fetch',
        'addon_fetch_multiple',
        'addon_delete',
        'subscription_item_create',
        'subscription_item_fetch',
        'subscription_item_fetch_multiple',
        'subscription_item_update',
        'subscription_item_delete',
        'subscription_update',
        'subscription_fetch_changes',
        'subscription_cancel_changes',
        'p2p_fetch_private',
        'customer_collect_request_fetch_private',
        'payout_purpose_get',
        'payout_purpose_post',
        'payout_fetch_by_id',
        'payout_fetch_multiple',
        'payout_create',
        'payout_validate',
        'payouts_batch_create',
        'payout_cancel',
        'customer_get_wallet_balance',
        'customer_get_wallet_statement',
        'transfer_fetch_multiple',
        'transfer_fetch',
        'transfer_edit',
        'transfer_create',
        'transfer_create_reversal',
        'qr_code_create',
        'qr_code_close',
        'qr_code_fetch',
        'virtual_account_create',
        'virtual_account_create_for_banking',
        'virtual_account_edit',
        'virtual_account_close',
        'virtual_account_fetch',
        'virtual_account_fetch_multiple',
        'virtual_account_add_receivers',
        'virtual_account_add_allowed_payer',
        'virtual_account_delete_allowed_payer',
        'payment_bank_transfer_fetch',
        'payment_upi_transfer_fetch',
        'virtual_account_fetch_payments',
        'transfer_fetch_reversals',
        'payout_fetch_reversals',
        'reversal_fetch',
        'reversal_fetch_multiple',
        'dispute_fetch_multiple',
        'beta_account_create',
        'beta_account_fetch',
        'beta_account_fetch_multiple',
        'beta_account_post_bank_account',
        'beta_account_fetch_setl_destinations',
        'linked_account_update_bank_account',
        'dispute_fetch',
        'get_dispute_document_types_metadata',
        'patch_dispute_contest_by_id',
        'post_dispute_accept_by_id',
        'account_features_add',
        'account_features_get',
        'payment_acknowledge',
        'bharat_qr_pay_test',
        'payment_get_flows_private',
        'contact_types_get',
        'contact_types_post',
        'contact_get',
        'contact_list',
        'contact_create',
        'contact_update',
        //'contact_delete',
        'banking_account_beneficiary_fetch',
        'fund_account_validate',
        'fund_account_validate_fetch',
        'fund_account_validate_fetch_by_id',
        'fund_account_get',
        'fund_account_list',
        'fund_account_create',
        'fund_account_update',
        'subscription_registration_list_links',
        'subscription_registration_create_links',
        'subscription_registration_fetch_link',
        'subscription_registration_resend_link',
        'subscription_registration_cancel_link',
        //'fund_account_delete',
        'transaction_statement_fetch',
        'transaction_statement_fetch_multiple',
        'transaction_statement_fetch_multiple_for_banking',
        'create_credit_note',
        'credit_note_list',
        'credit_note_get',
        'credit_note_apply',
        'terminal_enable',
        'terminal_disable',
        'terminal_fetch',
        'terminal_onboard',

        'account_create',
        'account_list',
        'account_fetch',
        'account_fetch_by_external_id',
        'account_edit',
        'account_action',

        'stakeholder_create_v2',
        'stakeholder_update_v2',
        'stakeholder_fetch_v2',
        'stakeholder_fetch_all_v2',

        'account_create_v2',
        'account_fetch_v2',
        'change_banking_user_role',
        'account_edit_v2',
        'account_delete_v2',
        'subscription_registration_auto_charge',
        'mpans_issue',
        'mpans_fetch',
        'update_submerchant_user_contact',
        'update_bucket_name_region',

        'partner_referral_regenerate',
        'fetch_partner_sub_mtu',

        // webhooks for onboarding APIs
        'onboarding_webhook_create',
        'onboarding_webhook_fetch',
        'onboarding_webhook_fetch_all',
        'onboarding_webhook_update',
        'onboarding_webhook_delete',

        'create_merchant_options',
        'read_merchant_options' ,
        'read_options_by_id',
        'read_options_by_ref_id',
        'update_merchant_options',
        'delete_merchant_options',

        'merchant_activation_update_partner',
        'merchant_activation_status_partner',
        'merchant_fetch_schedule_tasks',
        'setl_holidays',
        'fb_setl_fetch_transactions',
        'create_virtual_account_from_order',

        // Offline QR
        'fetch_offline_device_multiple',

        // merchant_instrument_requests
        'merchant_instrument_request_create',
        'merchant_instrument_request_get_by_id',
        'merchant_instrument_request_update_by_id',
        'merchant_instrument_request_get_by_merchant_id',
        'merchant_instrument_status_get_by_merchant_id',
        'terminals_proxy_fetch_terminals_credentials',

        // payment page routes required for plugin
        'payment_page_get',
        'payment_page_get_details',
        'payment_page_list',
        'payment_page_deactivate',
        'payment_page_activate',

        'payment_handle_get',

        // payment button routes
        'payment_button_get',
        'payment_button_list',
        'payment_button_get_details',
        'payment_button_activate',
        'payment_button_deactivate',

        // accounting integration routes for tally plugin
        'accounting_integration_tally_invoices',
        'accounting_integration_tally_fetch_invoice',
        'accounting_integration_tally_cancel_invoice',
        'accounting_integration_tally_fetch_payment',
        'accounting_integration_tally_acknowledge_payment',
        'accounting_integration_tally_integrate',

        'accounting_integration_tally_cash_flow_acknowledge',
        'accounting_integration_tally_cash_flow_update_mapping',
        'accounting_integration_tally_fetch_cash_flow_entries',
        'accounting_integration_tally_ack_bank_transactions',
        'accounting_integration_tally_get_bank_transactions',
        'accounting_integration_tally_create_contact',
        'accounting_integration_tally_sync_status',
        'accounting_integration_add_or_update_settings',
        'accounting_integration_tally_tax_slab_rates',
        'accounting_integration_tally_banking_accounts',
        'accounting_integration_update_rx_tally_ledger_mapping',


        // routes for account and stakeholder documents
        'document_upload_v1',
        'document_get_v1',
        'document_download_v1',
        'document_upload_v2',
        'document_get_v2',
        'document_download_v2',
        'link_account_documents_v2',
        'link_stakeholder_documents_v2',
        'get_account_documents_v2',
        'get_stakeholder_documents_v2',

        'product_config_fetch_v2',
        'product_config_update_v2',
        'product_config_create_v2',
        'business_unit_tnc_fetch_v2',
        'product_config_tnc_fetch_v2',
        'product_config_tnc_accept_v2',

        // network tokenization routes
        'par_api',
        'token_create',
        'token_fetch',
        'token_fetch_cryptogram',
        'token_delete',

        //Push Token Provisioning routes
        'tokens_push',
        'tokens_list',
        'tokens_push_fetch',

        // 1CC Routes
        'update_shipping_slabs',
        'update_cod_slabs',
        'banking_axis_invitations_send',

        '1cc_merchant_preferences',

          // Tokenisation Bin crud routes
        'create_token_iin',
        'fetch_token_iin',
        'update_token_iin',
        'fetch_token_iin_by_range',
        'delete_iin',
        'delete_iin_bulk',
        'add_token_iin_bulk',

        // Generate and send NIUM settlements file via manual trigger
        'generate_nium_settlement_file_admin',
 	    'fetch_customer_eligibility',
        'fetch_customer_eligibility_by_id',

        '1cc_address_ingestion_config_get',
        '1cc_address_ingestion_addresses_post',
        '1cc_wooc_ingestion_plugins_post',
        '1cc_process_prepay_cod_orders',

        'wallet_dashboard_proxy'
    ];

    // Only routes defined in internalApps go here
    // If a route needs access from the Dashboard
    // Put it in the Admin Array instead
    public static $internal = [
        'banking_org_merchant_onboarding_escalations',
        'payments_rearch_backfill',
        'update_shopify_1cc_credentials',
        'payments_api_backfill',
        'refunds_reversal_create',
        'adj_transaction_create',
        'merchant_entities_info',
        'merchant_document_upload_internal',
        'merchant_activation_clarifications_save_internal',
        'merchant_activation_clarifications_fetch_internal',
        'merchant_nc_revamp_eligibility_internal',
        'dcc_invoice_generation_cron',
        'internal_merchant_details_fetch',
        'internal_merchant_partnership',
        'fpx_downtime_detection_cron',
        'retry_store_legal_documents_cron',
        'merchant_popular_products_cron',
        '1cc_shipping_service_merchant_config_create',
        '1cc_shipping_service_merchant_config_update_by_type',
        '1cc_shipping_service_remove_shipping_providers',
        '1cc_shipping_service_connect_shipping_providers',
        'payment_page_cds_billing_update_cron',
        'banking_accounts_get_internal',
        'banking_account_activation_detail_update_internal',
        'merchant_assign_pricing_internal',
        'merchant_onboarding_crons',
        'merchant_risk_crons',
        'capture_cron_for_b2b_payments',
        'settlement_cron_for_b2b_payments',
        'setl_adj_add',
        'merchant_la_fetch',
        'collect_info_merchant_details_internal',
        'generate_gifu_file',
        'salesforce_converge_get_merchant_details',
        'salesforce_converge_get_terminal_details',
        'generate_nium_settlement_file',
        'merchant_invoice_reminder',
        'process_on_hold_transactions_for_import',
        'generate_settlement_file_opgsp_import',
        'send_opgsp_import_invoices',
        'merchant_settlements_events_cron',
        'create_test_payouts_for_downtime_detection_icici',
        'create_test_payouts_for_downtime_detection_yesb',
        'check_status_of_test_payouts',
        'add_balance_to_source_for_test_payouts',
        'mob_to_bas_routes',
        'banking_account_statement_insert_missing',
        'banking_account_statement_insert_missing_cron',
        'bas_internal_admin_routes',
        'coupon_expiry_alert',
        'upi_transfer_process_internal',
        'payment_callback_bharatqr_internal',
        'm2m_referral_link_get_public',
        'payout_links_customer_hosted_page_data',
        'payout_links_customer_hosted_page_demo_data',
        'payout_notification_to_slack_app',
        'internal_merchants_fetch_by_params',
        'salesforce_details_internal',
        'internal_feature_bulk_assign',
        'internal_feature_bulk_remove',
        'internal_feature_bulk_fetch',
        'internal_feature_get_all',
        'banking_account_beneficiary_fetch',
        'user_fetch_by_verified_contact_internal',
        'merchant_risk_alerts_foh_workflow_trigger_nc',
        'buy_pricing_assign_bulk',
        'external_bvs_validation_request',
        'bas_archive_banking_account_dependencies',
        'bas_unarchive_banking_account_dependencies',
        'bas_get_merchant_attributes',
        'bas_tokenize_values',
        'banking_account_activation_detail_slot_booking',
        'bas_ca_lead_to_sales_force',
        'bas_ca_lead_status_to_sales_force',
        'bas_ca_lead_to_freshdesk',
        'rbl_in_progress_lead_to_sales_force',
        'bas_banking_accounts_create',
        'bas_banking_accounts_notifications',
        'banking_account_service_cron_routes',
        'merchant_update_fraud_type',
        'gstin_e_invoice_cron',
        'fix_merchant_data_cron',
        'tax_payments_internal_icici_action',
        // crons for autoKYC'd merchants who have not been verified manually yet
        'merchant_autokyc_soft_limit',
        'merchant_autokyc_hard_limit',
        'merchant_autokyc_escalation',
        'partner_send_weekly_activation_summary_emails',

        //cron route for sending daily transacted submerchant events
        'partner_send_daily_transacted_submerchant_events',

        'payment_fetch_card_metadata',

        // metro routes
        'payout_email_attachments',
        'account_service_handle_update_event',

        // reminder routes
        'payouts_summary_email',

        // growth routes
        'growth_pricing_bundle_email',
        'growth_pricing_bundle_add_amount_credits',


        // cron for generating merchant report
        'merchant_report',
        'merchant_onboarding_escalations',
        'merchant_onboarding_cron_jobs',
        'xpress_onboarding_escalations',
        'merchant_card_networks_onboarding_bulk',
        'settlement_ondemand_process',
        'settlement_ondemand_full_enable',
        'settlement_ondemand_restricted_enable',
        'early_settlement_feature_period_disable',
        'internal_balance_fetch_by_merchant_id',
        'internal_balance_fetch_by_merchant_id_old',
        'merchant_balance_create',
        'internal_balance_fetch_by_id',
        'internal_balance_fetch_multiple_by_ids',
        'credit_repayment_transaction_create',
        'capital_transaction_create',
        'capital_multiple_transaction_create',
        'merchant_sub_create_batch',
        'merchant_bulk_onboarding_admin',
        'setl_pos_create',
        'payment_page_create_file_upload_record',
        'currency_fetch_rates_internal',
        'loc_mail',
        'capital_cards_mail',
        'cps_card_entity_create',
        'cps_backfill_entities',
        'vendor_payment_composite_expands_helper',
        'los_mail',
        'internal_merchant_payments_count',
        'api_entity_fetch',
        'cps_iin_flow_disable',
        'fetch_iin_by_token_iin',
        'merchant_bulk_update_pricing_cron',
        'subscription_registration_nach_migration',
        'subscription_fetch_by_id_data_fix',
        'leegality_webhook',
        'gateway_first_data_pares_store',
        'vendor_payment_send_failure_email',
        'contact_list_internal',
        'contact_update_internal',
        'vendor_payment_verify_otp',
        'payout_fetch_by_id_internal',
        'user_fetch_internal',
        'fetch_actor_info_internal',
        'on_hold_merchant_slas_internal',
        'user_verify_second_factor_auth',
        'user_otp_login_2fa_password',
        'user_resend_otp_2fa',
        'merchant_inheritance_parent_set_bulk',
        'pricing_add_plan_rule_bulk',
        'buy_pricing_add_plan_rule_bulk',
        'loc_bulk_withdrawal_update',
        'adj_add_batch',
        'merchant_fetch_internal',
        'admin_lead_verify',
        'merchant_invitation_verify',
        'admin_authentication',
        // route to support 2fa for admin dashboard
        'admin_verify_second_factor_auth',
        'admin_resend_otp_2fa',
        'admin_trigger_2fa_otp',
        'admin_account_lock_unlock',
        'admin_forgot_password',
        'admin_lock_old_accounts',
        'admin_oauth_authenticate',
        'admin_reset_password',
        'bank_transfer_notify',
        'bank_transfer_process',
        'bank_transfer_process_file',
        'bank_transfer_process_file_rbl',
        'bank_transfer_process_file_yesbank',
        'setl_process_pos_file',
        'custom_setl_read_file',
        'bank_transfer_process_rbl_internal',
        'bank_transfer_process_icici',
        'bank_transfer_process_icici_internal',
        'bank_transfer_process_yesbank_internal',
        'bank_transfer_process_hdfc_ecms',
        'offline_challan_validate',
        'offline_payment_credit',
        'bank_transfer_refund_retry',
        'bank_transfer_edit_payer_account_internal',
        'batch_process_file',
        'card_update_saved',
        'currency_update_rates',
        'currency_update_rates_multiple',
        'emandate_debit_reconcile',
        'emi_generate_excel',
        'entity_tax_update',
        'fund_transfer_attempt_reconcile',
        'fund_transfer_attempt_recon_report',
        'gateway_file_create',
        'geoip_update',
        'invitation_action',
        'invitation_fetch_by_token',
        'invoice_expire_bulk',
        'invoice_delete_bulk',
        'invoice_send_notifications',
        'payment_page_expire_cron',
        'merchant_activation_migrate',
        'merchant_admin_lead_put',
        'merchant_get_app_access_mapping',
        'merchant_create_app_access_mapping',
        'merchant_create_invoice_entities',
        'merchant_invoice_entities_verify',
        'merchant_daily_report',
        'merchant_delete_app_access_mapping',
        'merchant_notify_holiday',
        'merchant_patch_beneficiary_code',
        'merchant_payout',
        'merchant_payout_mail',
        'merchant_post_beneficiary_file',
        'merchant_secret',
        'merchant_tags_batch',
        'merchant_associated_accounts_fetch',
        'merchant_fetch_internal_users',
        'mock_hdfc_auth_enrolled',
        'mock_hdfc_enroll',
        'mock_hdfc_payment',
        'oauth_merchant_notify',
        'nodal_initiate_transfer',
        'offer_deactivate',
        'order_refund_multiple_authorized',
        'org_get_by_hostname',
        'payment_auto_capture',
        'payment_capture_gateway_multiple',
        'payment_capture_reminder',
        'payment_refund_authorized',
        'create_ledger_journal_cron',
        'payment_timeout',
        'payment_auth_timeout',
        'payment_update_on_hold',
        'payment_verify_all',
        'payment_new_verify_all',
        'payment_new_verify_bulk',
        'payment_verify_multiple',
        'payment_verify_captured',
        'payment_capture_verify',
        'payment_authorize_google_pay_cards',
        'payment_verify_google_pay_cards',
        'payments_dual_write_sync',
        'reconciliate',
        'refund_generate_excel',
        'refund_update_status',
        'refund_gateway_call',
        'refund_verify_call',
        'scrooge_verify_refund_call',
        'scrooge_refund_replay',
        'refund_fetch_status',
        'reminder_send',
        'p2p_reminder_send',
        'merchant_international_enablement_reminder',
        'emerchantpay_apm_onboard_maf',
        'scrooge_entities_fetch',
        'scrooge_fetch_refund_email_data',
        'scrooge_fetch_refund_transaction_data',
        'scrooge_public_entities_fetch',
        'scrooge_refund_back_write',
        'fund_transfer_attempt_modes',
        'schedule_migration',
        'schedule_process_tasks',
        'scorecard',
        'banking_scorecard',
        'setl_initiate',
        'setl_ledger_inconsistency_debug_cron',
        'setl_bucket_backfill',
        'setl_bucket_delete',
        'setl_reconcile_pull',
        'setl_initiate_daily',
        'setl_post_details_old',
        'setl_reconcile_generate',
        'setl_reconcile_h2h',
        'setl_reconcile_test',
        'setl_service_migration',
        'setl_service_blocked_migration',
        'setl_entity_alerts',
        'settlement_ondemand_feature_enable',
        'early_settlement_feature_period_create',
        'settlement_ondemand_partial_scheduled',
        'feature_migration_dcs_scheduled',
        'subscription_cancel_due',
        'subscriptions_charge_invoices',
        'subscriptions_expire',
        'subscriptions_retry',
        'tokens_upi_vpa_bulk_cron',
        'transfer_settlement_status_update',
        'user_change_password',
        'user_confirm_by_data',
        'user_access',
        'user_fetch',
        'user_login',
        'user_mobile_oauth_refresh_token',
        'user_otp_login',
        'user_salesforce_event',
        'verify_user_otp_login',
        'send_verification_otp',
        'verify_verification_otp',
        'user_login_2fa_setup_mobile',
        'user_patch_password',
        'user_login_2fa_setup_verify_mobile',
        'user_merchant_upgrade',
        'user_register',
        'user_otp_register',
        'verify_user_otp_register',
        'send_salesforce_user_otp',
        'verify_salesforce_user_otp',
        'user_resend_verification',
        'user_reset_password_create',
        'user_reset_password_token',
        'merchant_edit_email_create_user',
        'user_oauth_login',
        'user_oauth_register',
        'razorx_guest',
        'virtual_account_close_cron',
        'virtual_accounts_close_inactive_cron',
        'fund_transfer_attempt_process',
        'daily_reconciliation_summary_fetch',
        'hourly_reconciliation_summary_fetch',
        'lambda_post_h2h',
        'firs_document_categorize',
        'automate_merchant_master_firs',
        'process_settlement_repatriation',
        'process_opgsp_settlement_repatriation',
        'setcronjob_webhook',
        'bank_transfer_payment_receiver_backfill',
        'refund_processed_at_backfill',
        'admin_mdr_update',
        'merchant_post_beneficiary_api',
        'setl_verify',
        'apspdcl_bridge',
        'billdesk_reconcile_cancelled',
        'refunds_reconcile_bulk',
        'setl_notify_h2h',
        'entity_balance_id_update',
        'merchant_es_sync_cron',
        'gateway_downtime_vajra_webhook',
        'cps_downtime_vajra_webhook',
        'scrooge_refund_verify_bulk',
        'update_fts_nodal_beneficiary',
        'payouts_process_queued',
        'payouts_process_queued_new',
        'payout_service_data_migration',
        'ps_data_migration_redis_clean_up',
        'payouts_process_on_hold',
        'payouts_process_on_hold_partner_bank',
        'payouts_auto_cancel_on_expiry',
        'payouts_create_failure_processing_cron',
        'payouts_update_failure_processing_cron',
        'card_settlement_generate_file',
        'payouts_process_batch',
        'payouts_process_scheduled',
        'payout_service_process_scheduled_payout',
        'migration_multi_va_on_x',
        'update_fts_fund_transfer',
        'fund_management_balance_get_config',
        'fund_management_balance_set_config',
        'setl_initiate_adhoc',
        'payments_downtime_trigger_cron',
        'payment_card_vault_migrate',
        'vault_token_renewal',
        'batch_send_mail',
        'batch_send_sms',
        'banking_account_webhook_account_info',
        'banking_account_create_lead',
        'gateway_downtime_detection_purge_keys',
        'downtime_detection_cron',
        'phonepe_downtime_detection_cron',
        'merchant_get_org_details',
        'merchant_banking_accounts_webhook',
        'banking_account_statement_process_cron',
        'banking_account_statement_fetch_missing_cron',
        'banking_account_statement_automate_recon_cron',
        'banking_account_statement_async_insert_missing_cron',
        'banking_account_statement_detect_missing_cron',

        'banking_account_statement_process_pool',
        'banking_account_send_notification_to_spoc_cron',
        'banking_account_statement_channel_fetch',
        'banking_account_statement_fetch_missing',
        'banking_account_statement_update_missing',
        'banking_account_statement_async_insert_missing',
        'banking_account_statement_detect_missing',

        'subscription_registration_auto_charge',
        'token_pause_not_supported_card_tokens',
        'partner_submerchant_map',
        'fund_transfer_attempts_process_fts',
        'cps_sync_gateway_entities_cron',
        'scrooge_refund_reference1_bulk_update',
        'scrooge_refunds_retry_custom_fund_transfers',
        'scrooge_refunds_retry_custom_fund_transfers_batch',
        'iin_batch_process_record',
        'recon_fetch_batchs_files_multiple',
        'recon_fetch_files_count',
        'mailing_list_remove_suspended_merchant',
        'order_transfer_process_pending',
        'order_transfer_process_pending_key_merchants',
        'order_transfer_process_failed',
        'payment_transfer_process_pending',
        'payment_transfer_process_pending_key_merchants',
        'merchant_mtu_update',
        'webhook_send_email',
        'transaction_settled_data_fix',
        'contact_types_get_internal',
        'contact_get_internal',
        'account_receivables_merchant_details_fetch',
        'contact_create_internal',
        'fund_account_create_internal',
        'fund_account_update_internal',
        'fund_account_get_internal',
        'fund_account_list_internal',
        'payout_create_internal',
        'payout_create_2FA_internal',
        'payout_fetch_multiple_internal',
        'payout_links_send_email',
        'payout_links_send_demo_email',
        'payout_purpose_validate_internal',
        'commissions_invoice_generate',
        'banking_account_gateway_balance_fetch',
        'fee_recovery_payout_process',
        'merchant_poc_update',
        'merchant_poc_update_with_time',
        'unclaimed_merchant_poc_update',
        'low_balance_config_alert_cron',
        'payouts_intermediate_transactions_cron_update',
        'refund_scrooge_fetch_fee',
        'refund_scrooge_payment_update',
        'refund_scrooge_transaction_create',
        'refund_edit_internal',
        'gateway_file_bank_refunds_upload',

        'banking_account_create_salesforce',
        'bas_internal_salesforce',
        'banking_account_get_salesforce',

        // account service routes
        'account_service_details_fetch',
        'account_service_details_fetch_reverse_map',
        'account_service_updated_accounts_fetch',

        // Razorpay Capital
        // Capital Collections
        'feature_get_multiple_internal',
        // Financial Data Service
        'financial_data_service_perfios_webhook',
        // Capital Cards
        'capital_cards_m2p_webhook',
        'payout_approve_internal',
        'payout_reject_internal',

        'feature_add_internal',
        'feature_delete_internal',

        'dispute_deduction_reversal_cron',
        'zipcode_add',
        'zipcode_remove',
        // Capital LOC
        'feature_delete_entity_internal',

        //Capital ES
        'internal_balances_fetch_by_merchant_ids',
        'settlement_ondemand_linked_account',

        'vault_migrate_token_bulk',
        'token_hq_charge_batch',
        'token_hq_cron',
        'internal_merchant_fetch',
        'banking_account_create_lms_mob',
        'banking_account_update_lms_mob',
        'internal_payment_instruments_fetch',
        'internal_merchant_workflow_details_fetch',
        'internal_merchant_submission_date',
        'internal_merchant_get_rejection_reasons',
        'internal_merchants_fetch',
        'internal_buy_pricing_get_plan',
        'internal_fetch_config_by_id',
        'internal_fetch_configs',
        'internal_merchant_checkout_preferences',
        'internal_merchant_auto_disabled_methods',
        'terminal_edit_internal',
        'terminal_edit_god_mode',
        'terminal_fetch_editable_fields',
        'internal_send_merchant_email',
        'terminal_fetch_by_id_internal',
        'terminal_migrate_cron',
        'hitachi_terminal_currency_update_cron',
        'terminal_service_sync_delete',
        'terminals_proxy_delete_submerchant',
        'terminals_proxy_create_submerchant',
        'terminals_proxy_update_recurring',
        'feature_get_all_internal',
        'create_settlement_entry',
        'get_global_config',
        'update_admin_through_batch',
        'merchant_create_terminal_internal',
        'retry_penny_testing_cron',
        'merchant_methods_edit_internal',
        'refund_create_batch_service',
        'methods_update_merchants_internal',
        'fetch_partner_referral_batch',
        'credits_create_bulk_batch',
        'terminal_create_bulk',
        'mpans_bulk',
        'upi_terminal_onboarding_bulk',
        'upi_onboarded_terminal_edit_bulk',
        'payment_links_bulk_expire',
        'payment_links_es_cleanup',
        'fts_bulk_attempts_initiate',
        'fts_bulk_beneficiary_initiate',
        'fts_one_off_db_migrate_cron',
        'fts_bulk_transfer_publish',
        'fts_account_balance_alert',
        'fetch_nodal_beneficiary_code',
        'entity_bulk_update',
        'merchants_access_map_upsert_bulk',
        'settings_fetch_internal',
        'settings_upsert_internal',
        'setl_transaction_replay',
        'setl_execution_reminder',
        'setl_status_update',
        'setl_transactions_verify',
        'banking_account_comments_create_batch',
        'banking_account_activation_details_via_batch',
        'payout_create_on_internal_contact',
        'tax_payments_payout_cron',
        'tax_payments_payout_cancel_cron',
        'payout_cancel_internal',
        'tax_payments_mail_cron',
        'accounting_integration_bank_statement_fetch_trigger_cron',
        'accounting_integration_zoho_bank_statement_sync_cron',
        'tax_payments_enabled_merchant_settings',
        'tax_payments_send_email',
        'workflow_state_callback',
        'workflow_state_callback_update',
        'vendor_payment_ocr_accuracy_cron',
        'banking_accounts_list_internal',
        'mpans_tokenize_existing',
        'terminal_mpans_tokenize_existing',
        'qr_code_mpans_tokenize_existing',
        'scrooge_refunds_get_razorflow',
        'razorflow_admin_fetch_terminal_by_id',
        'razorflow_admin_fetch_entity_by_id',
        'razorflow_admin_fetch_terminal_multiple',
        'razorflow_admin_fetch_entity_multiple',
        'scrooge_refunds_get_multiple_razorflow',
        'vendor_payment_send_email_generic',
        'vendor_payment_upcoming_mail_cron',
        'tax_payments_add_penalty_cron',
        'create_payment_config_bulk_via_batch',
        'payment_meta_search',
        'bulk_create_fund_accounts',
        'add_ondemand_pricing_if_absent',
        'setl_get_transaction_details',
        'payment_authorize_post',
        'gateway_downtimes_archive',
        'payment_refund_internal',
        'payment_get_authenticate_url',
        'payment_get_authentication_entity',
        'payment_get_authorization_entity',
        'banking_accounts_auditor_daily_updates',
        'gateway_payment_upi_data_cron',
        'dispute_merchant_emails_initiate',
        'dispute_refund_initiate',
        'dispute_initiate_risk_assessment',
        'fd_customer_dispute',
        'fd_consume_webhook',
        'fts_channel_notification',
        'dispute_reason_fetch_internal',
        'payment_meta_fetch_by_payment_id_action',
        'payment_fetch_by_id_internal',
        'payment_notify',
        'order_fetch_by_id_internal',
        'order_fetch_by_id_internal_admin',
        'user_details',
        'user_details_unified',
        'user_all_roles',

        'reward_expire_cron',
        'trusted_badge_eligibility_cron',
        'tokenisation_local_cards',
        'tokenisation_local_cards_recurring',
        'tokenisation_global_cards',
        'tokenisation_global_customer_local_cards',
        'gateway_downtime_for_payment',
        'partner_config_bulk_upsert',
        //Accounting Payouts
        'accounting_payouts_sync_internal',

        //Application Framework
        'app_merchant_mapping_create',
        'app_merchant_mapping_update',

        'payment_links_sign_payload_internal',

        //GupShup Callbacks
        'gupshup_incoming_messages_callback',

        'nps_survey_process_scheduled',

        // freshchat cron
        'freshchat_extract_report_cron',
        'freshchat_retrieve_report_cron',

        'gateway_downtime_service_webhook',
        'terminal_test_save_otp',

        // merchant risk alerts
        'merchant_risk_alerts_foh_workflow',
        'merchant_risk_alerts_details',
        'merchant_risk_alerts_dispute_details',
        'merchant_risk_alerts_set_dedupe_key',


        'cyber_crime_helpdesk_send_mail_to_lea',
        'cybercrime_helpdesk_workflow_action',

        // Mandate HQ
        'get_issuer_from_iin',

        'nach_batch_process',
        'emandate_batch_process',

        'loc_cron',
        'los_cron',
        'internal_transactions',
        'internal_payment_authorize_refund',
        'freshdesk_update_ticket_internal',
        'internal_fd_fetch_agents',
        'internal_fd_create_ticket',
        'internal_fd_add_note',
        'internal_fd_fetch_agent_detail_for_ticket',
        'dispute_automation',
        'care_service_cron_proxy',
        'cmma_service_cron_proxy',
        'internal_order_update',

        // care
        'fd_insert_into_db',
        'merchant_ids_fetch_for_user_contact',
        'user_fetch_primary_user_contact',
        'internal_workflow_action_get_multiple',
        'myoperator_v1_proxy_get',
        'myoperator_v2_proxy_post',
        'care_service_myoperator_webhook_proxy',
        'care_service_chat_proxy',
        'segment_create_update',
        'internal_fd_post_ticket_reply',
        'internal_fetch_merchant_freshdesk_tickets',

        // IPL bot
        'throttle_create_config_spinnaker',
        'spinnaker_reminder_service',
        'edge_update_rate_limit_spinnaker',

        'add_verify_disabled_gateway',
        'p2p_retrieve_banks_cron',
        'payment_timeout_new',
        'payment_verify_new',
        'user_fetch_entity',
        'bulk_submerchant_assign',
        // Merchant Fraud
        'bulk_fraud_notify',
        'health_checker',
        'health_checker_periodic_cron',
        'health_checker_milestone_cron',
        'health_checker_risk_score_cron',
        'health_checker_retry_cron',
        'health_checker_reminder_cron',
        'fraud_checker_milestone_cron',

        'max_payment_limit_update',
        'execute_max_payment_limit_workflow',

        // credit_transfer
        'credit_transfer_create',

        // payout service
        'create_payout_entry',
        'payouts_service_dual_write',
        'delete_card_meta_data_and_vault_token',
        'create_reversal_entry',
        'banking_account_fetch_by_account_number',
        'banking_account_fetch_by_balance_id',
        'create_FTA_payout_service',
        'create_ledger_payout_service',
        'deduct_credits_via_payout_service',
        'reverse_credits_via_payout_service',
        'create_pricing_for_payout_service',
        'create_workflow_for_payout',
        'payout_purpose_get_internal',
        'bulk_payout_purpose_post',
        'accounting_integration_merchant_details',
        'create_payment_payout_service_axis_cc',
        'update_payout_payout_service',
        'internal_balances_queued',
        'dcc_payouts_details_fetch',
        'initiate_payouts_consistency_check',
        'payout_bulk_update_attachments',
        'decrement_free_payouts_payouts_service',
        'payouts_service_mail_and_sms',
        'payouts_source_update',
        'status_details_source_update',
        'rename_attachments_for_payouts',

        'rollback_free_payouts',
        'payouts_service_redis_key_set',
        'payout_service_idempotency_key_feature_remove',

        // payment analytics cron creates a new partition and drops oldest partition, runs daily
        'payment_analytics_partition_cron',
        'checkout_orders_partition_cron',
        'payout_links_batch_process',
        'merchant_methods_hdfc_debit_emi',
        'affordability_methods_migration',

        // payout outbox cron creates a new partition and drops oldest partition, runs daily
        'payout_outbox_partition_cron',
        'audit_info_partition_cron',
        'fees_breakup_partition_cron',

         'orphan_payouts_count_cron',

        'vendor_payment_email_integration_webhook',
        // ledger route
        'ledger_fetch_multiple_transactions',
        'onboard_old_accounts_to_ledger',

        'raw_address_create_batch_service',

        'fulfillment_order_update',
        '1cc_cod_eligibility_attribute_upsert_batch',
        //merchant action cron sends the notifications to the merchants which are suspended and tagged
        'merchant_action_notification_cron',

        // merchant risk alert crons
        'merchant_risk_identify_blacklist_country_alerts',

        //pg-router apis
        'internal_validate_order_token_params',
        'internal_validate_order_transfer_params',
        'internal_validate_order_bank',
        'internal_validate_order_amount',
        'internal_validate_order_currency',
        'internal_validate_order_checkout_config',
        'internal_validate_order_tpv',
        'internal_create_order_relations',
        'internal_create_order_bank_account',
        'payment_update_reference6',
        'internal_payment_pricing',
        'internal_pricing',
        'internal_merchant_risk_notification',
        'internal_token_create',
        'internal_sign_payload',
        'internal_generate_coproto',
        'update_token_on_authorized',



        // cron to send emails about pending payouts
        'payout_send_pending_approval_email',
        'payout_send_pending_approval_reminder',
        'payouts_pending_push_notification_cron',

        'terminal_fill_enabled_wallets',
        'payment_update_reference6',

        //Tax-payment route
        'tax_payments_reminders_callback',

        // Refresh downtime cache
        'refresh_payments_ongoing_downtimes_cron',
        'refresh_payments_resolved_downtimes_cron',
        'refresh_payments_scheduled_downtimes_cron',

        'feature_get_merchants_internal',
        'push_to_datalake',

        // Payout-Links route
        'payout_links_reminder_callback',
        'payout_links_expire_callback',
        'test_payout_links_expire_callback',

        // Payout-Links Expire Cron Job
        'payout_links_expire_cron',

        'feature_get_merchants_internal',

        'create_exec_risk_action',
        'bulk_risk_action_status_comment',

        // Optimizer settlements cron
        'setl_optimizer_settlement_cron',

        'third_watch_address_cod_score',

        // 1cc config from dark env
        '1cc_shipping_service_merchant_config_assign_shopify_dark',
        '1cc_shipping_service_disable_shopify_dark',
        'update_fetch_coupons_url_dark',
        'update_coupon_validity_url_dark',
        'update_serviceability_url_dark',
        'update_merchant_platform_dark',
        'update_merchant_1cc_config_dark',
        'update_shipping_slabs_dark',
        'update_cod_slabs_dark',
        'update_cod_serviceability_slabs_dark',
        'update_merchant_1cc_coupon_config',
        'banking_axis_invitations_send',

        'buy_pricing_terminal_cost',

        'token_status',

        'chargeback_poc',
        'whitelisted_domain',

        'internal_pincode_get',

        'get_affordability_suite',
        'debit_note_batch',

        // trusted badge experiment internal auth
        'trusted_badge_get_experiment_list',
        'trusted_badge_put_experiment_list',

        'internal_create',
        'internal_fail',
        'internal_reconcile',
        'internal_receive',

        'update_shopify_1cc_config',

        'bank_transfer_process_test_x_demo_cron',
        'payouts_batch_create_x_demo_cron',

        'partner_commission_pending',

        'commissions_invoice_reminder',

        // growth service cron
        'growth_filter_and_sync_cron',
        'growth_slack_csv_cron',

        'payment_create_upi_unexpected',

        'create_fraud_batch',
        'post_batch_bulk_fraud_notify',

        // payments card es sync cron
        'payments_card_es_sync_cron',

        'payment_upi_authorize_failed',

        'payment_card_authorize_failed',

        'payment_card_recon_create_transaction',

        'developer_console_maintenance',

        'payout_update_tax_payment_id',

        'recon_update_data',
        'payment_transfer_retry_batch',

        'firs_collect_and_zip_cron',

        'create_local_tokens_from_consents_bulk',

        'guest_pincode_get',

        'internal_transactions_cron',
        'payments_notify_cron',

        'contact_fetch_address',

        'transaction_statement_fetch_multiple_for_banking_internal',

        'bank_transfer_process_internal',
        'internal_merchant_activation_status',
        'internal_create_risk_action',

        // Magic Club
        'customer_one_cc_get_or_create_global',
        'customer_fetch_by_id_global',
        '1cc_shopify_order',


        'role_list_admins_internal',

        'barricade_payment_verify',

        'cyber_crime_helpdesk_send_mail_to_lea',
        'cybercrime_helpdesk_workflow_action',

        // partnership service dependent routes
        'fetch_commission_configs',
        'prts_fetch_merchant_entities',
        'fetch_partner_commission_invoice_feature',

        'create_ledger_journal_batch',

        'merchant_upload_miq_admin',

        'payment_nbplus_authorize_failed',

        '1cc_update_shipping_provider_config',

	    'merchant_fetch_methods_internal',

        'get_or_create_customer_internal',

        'customer_fetch_by_id_internal',

        '1cc_get_shopify_configs',
        '1cc_get_woocommerce_configs',

        // Address Service
        'internal_1cc_configs_get',
        'internal_1cc_prepay_cod_configs_get',
        'internal_1cc_shopify_customer_addresses_get',
        'raw_address_create_bulk',

        'partner_config_fetch_guest',
        'terminal_toggle_internal',
        // Ledger Outbox
        'ledger_outbox_retry',
        'workflow_config_create_internal',
        'downtime_auto_resolve_cron',
        'merchant_validate_public_auth_over_internal_auth',

        //Order Outbox
        'order_outbox_retry',
        'order_outbox_partition_cron',

        //Capital cord card for payouts
        'corp_card_banking_account_create',
        'credits_create_bulk_internal',

        // CAC-RBAC
        'fetch_authz_roles_by_role_id',

        'internal_1cc_order_review',
        'ledger_outbox_partition_cron',

        'b2b_send_notification',

        // cross border workflow callback
        'cb_invoice_workflow_callback',

        // Fund Management Payouts
        'ca_check_fund_management_payout_cron',

        'dispute_bulk_create_internal',
    ];

    // The below routes needs X-Dashboard-User-Id in case of any authentication except private and admin.
    // User context is taken from the provided header.
    // Below routes deal only with user entity without context of merchant.
    public static $userWhitelist = [
        'user_resend_verification',
        'user_verify_second_factor_auth',
        'user_otp_login_2fa_password',
        'user_resend_otp_2fa',
        'user_login_2fa_setup_mobile',
        'user_patch_password',
        'user_access',
        'user_fetch',
        'user_change_password',
        'user_merchant_upgrade',
        'user_edit_self',
        'user_otp_create',
        'user_verify_contact',
        'user_verify_email',
        'user_verify_through_mode',
        'payout_create_with_otp',
        'composite_payout_create_with_otp',
        'payout_create_2FA',
        'payout_send_2FA_otp',
        'undo_payout_creation',
        'resume_payout_creation',
        'payout_validate',
        // payouts approve reject routes
        'payout_approve_bulk',
        'payout_reject_bulk',
        'payout_approve',
        'payout_2fa_approve',
        'payout_reject',
        'invoice_create',
        'invoice_fetch',
        'invoice_fetch_multiple',
        'invoice_update',
        'invoice_issue',
        'invoice_delete',
        'invoice_add_line_items',
        'invoice_update_line_item',
        'invoice_remove_line_item_bulk',
        'invoice_remove_line_item',
        'invoice_send_notification_private',
        'invoice_cancel',
        'update_merchant_options',
        'delete_merchant_options',
        'create_merchant_options_admin',
        'read_merchant_options_admin',
        'update_merchant_options_admin',
        'delete_merchant_options_admin',
        'subscription_registration_resend_link',
        'subscription_registration_cancel_link',
        'user_resend_verification_otp',
        'bank_transfer_process_icici',
        'bank_transfer_process_hdfc_ecms',
        //FTS holiday Details
        'payout_get_holiday_details',
        'merchant_ip_config_create',
        'merchant_ip_config_fetch',
    ];

    // The below routes can be used with partner credentials without X-Razorpay-Account header,
    // in which case, partner will be able to make request on his own behalf, just like private auth
    public static $partnerCredentialsWithoutSubmerchantIdWhitelist = [
        'account_create',
        'account_list',
        'account_fetch',
        'account_edit',
        'account_action',
        'account_fetch_by_external_id',
        'merchant_activation_status_partner',
        'merchant_activation_update_partner',

        'account_create_v2',
        'account_fetch_v2',
        'account_edit_v2',
        'account_delete_v2',
        'stakeholder_create_v2',
        'stakeholder_update_v2',
        'stakeholder_fetch_v2',
        'stakeholder_fetch_all_v2',
        'link_account_documents_v2',
        'link_stakeholder_documents_v2',
        'get_account_documents_v2',
        'get_stakeholder_documents_v2',
        'update_submerchant_user_contact',
        'update_bucket_name_region',

        'product_config_fetch_v2' ,
        'product_config_update_v2',
        'product_config_create_v2',

        'business_unit_tnc_fetch_v2',
        'product_config_tnc_fetch_v2',
        'product_config_tnc_accept_v2',

        'onboarding_webhook_create',
        'onboarding_webhook_fetch',
        'onboarding_webhook_fetch_all',
        'onboarding_webhook_update',
        'onboarding_webhook_delete',

        // Temp fix to allow partners creating their own QR codes for
        // submerchants to use only one set of credentials everywhere
        'mpans_issue',
        'mpans_fetch',
        'payment_fetch_by_id',
        'fb_setl_fetch_transactions',
    ];

    // Below are routes mostly used by partner aggregator and original mpans should be visible to them.
    // For these routes, mpans are detokenized in public setters.
    public static $detokenizeMpansRoutes = [
        'terminal_enable',
        'terminal_disable',
        'terminal_onboard',
        'terminal_fetch',
        'mpans_issue',
        'mpans_fetch',
        'reminder_send', // Reminders service sends reminder to send webhook after 45 mins, webhook should have detokenized mpans
    ];

    //

    public static $proxy = [
        'user_update_name',
        'merchant_bmc_response_fetch',
        'merchant_bmc_response_save',
        'merchant_consents_save',
        'merchant_identity_verification',
        'merchant_process_verification_details',
        'merchant_activation_clarifications_fetch',
        'merchant_nc_revamp_eligibility',
        'merchant_activation_clarifications_save',
        'merchant_website_plugin_save',
        'payment_links_subscription_activate',
        'payment_links_subscription_deactivate',
        'payment_links_subscription_fetch',
        'payment_update_b2b_invoice',
        'b2b_invoice_collect_address',
        'b2b_invoice_show_address',
        'state_fetch_internal',
        'fetch_international_virtual_accounts',
        'create_international_virtual_accounts',
        'fetch_balance_international_virtual_account',
        'payout_international_virtual_account',
        'fetch_all_payouts_international_virtual_account',
        'mob_fetch_multiple_intents',
        'mob_fetch_intent',
        'mob_fetch_multiple_applications',
        'mob_create_intent',
        'mob_fetch_application',
        'mob_intent_apply_application',
        'mob_save_workflow',
        'switch_merchant_token',
        'mob_get_workflow',
        'payment_create_pos',
        //FTS holiday Details
        'payout_get_holiday_details',
        'fund_addition_tpv',
        'merchant_coupons_apply',
        'raw_address_create_batch_service',
        'fulfillment_order_update',
        'shipping_provider_list',
        'shipping_provider_post',
        'shipping_provider_patch',
        'shipping_provider_delete',
        'shipping_method_provider_list',
        'shipping_method_provider_post',
        'shipping_method_provider_patch',
        'shipping_method_provider_delete',
        'corporate_card_get',
        'corporate_card_update',
        'corporate_card_list',
        'merchant_activation_otp_send',
        'store_update_product',
        'store_upload_image',
        'store_create',
        'store_get_by_merchant',
        'store_validate_slug',
        'store_update',
        'store_delete',
        'store_add_product',
        'store_fetch_products',
        'store_get_product',
        'store_patch_product',
        'developer_console_action',
        'developer_console_merchant_action',
        'get_beneficiary_details_for_international_payout',
        'fetch_payments_ongoing_downtimes',
        'fetch_payments_resolved_downtimes',
        'fetch_payments_scheduled_downtimes',
        'merchant_store_add',
        'merchant_store_fetch',
        'm2m_referral_link_get',
        'bbps_bill_payments',
        'merchant_balance_fetch_by_id',
        'merchant_rtb_details_fetch',
        'is_admin_as_merchant',
        'merchant_fire_hubspot_event',
        'merchant_create_lead_to_salesforce',
        'freshchat_get_chat_timings_config_proxy',
        'freshchat_get_chat_holidays_config_proxy',
        'recon_service_request_proxy',
        'user_set_password',
        'user_check_has_set_password',
        'recon_service_file_upload_proxy',
        'recon_service_workflow_file_upload_proxy',
        'recon_service_admin_request_proxy',
        'rbl_current_account_serviceability_get',
        'merchant_primary_balance_fetch',
        'merchant_edit_email_self_serve',
        'email_user_status_for_email_update',
        'virtual_account_expiry_setting_upsert',
        'virtual_account_expiry_setting_get',
        'fetch_product_details_for_order',
        'fetch_order_line_items',
        'salesforce_event',
        'salesforce_opportunity_details',
        'fetch_product_status',
        'merchant_mtu_update_dashboard',
        'settlement_ondemand_create_dashboard',
        'settlement_ondemand_fees_dashboard',
        'settlement_ondemand_feature_validate',
        'settlement_ondemand_blocked',
        'loc_service',
        'capital_cards_service',
        'capital_cards_onboarding',
        'bvs_service_dashboard',
        'merchants_risk_service',
        'capital_collections_service',
        'capital_marketplace_service',
        'merchant_verify_attributes',
        'feature_get_status',
        'feature_get_all',
        'ufh_upload_file',
        'los_service',
        'capital_es_service',
        'partnerships_service_proxy',
        'user_fetch_for_merchant',
        'send_email_for_pl_service',
        'payment_links_payment_by_id',
        'oauth_token_create',
        'merchant_activation_update_website_status',
        'reminder_next_run',
        'reminder_service',
        'fetch_partner_intent',
        'update_partner_intent',
        'oauth_application_create_clients',
        'oauth_application_delete_client',
        'merchant_document_fetch',
        'merchant_document_upload',
        'merchant_document_url_fetch',
        'merchant_document_delete',
        'user_device_detail_save',
        'enable_es_scheduled',
        'get_es_pricing_merchant',
        'get_scheduled_es_pricing_merchant',
        'get_instant_refunds_pricing_merchant',
        'merchant_edit_config_la',
        'merchant_fetch_users',
        'setl_get_details',
        'setl_sms_notification_status',
        'setl_sms_notification_toggle',
        'adj_fetch_by_id',
        'adj_fetch_multiple',
        'card_fetch_multiple',
        'balance_fetch',
        'merchant_balance_fetch',
        'reports_transaction_broking',
        'reports_transaction_dsp',
        'reports_order_rpp',
        'reports_monthly_invoice',
        'reports_public_entity',
        'reports_public_entity_file',
        'reversal_fetch_multiple_la',
        'reversal_fetch_la',
        'transfer_fetch_la',
        'la_transfer_create_reversal',
        'transfer_fetch_multiple_la',
        'transfer_fetch_payment_la',
        'transfer_fetch_reversals_la',
        'bank_account_fetch',
        'affordability_widget_details',
        'merchant_edit_config',
        'merchant_edit_email2fa',
        'merchant_edit_config_logo',
        'merchant_delete_config_logo',
        'merchant_fetch_config',
        'merchant_fetch_config_internal',
        'merchant_fetch_config_for_checkout_internal',
        'merchant_fetch_payment_failure_analysis',
        'merchant_sub_create',
        'merchant_sub_send_password_link',
        'merchant_fetch_referrals',
        'merchant_invoice_fetch_multiple',
        'webhook_fetch_events',
        'webhook_delete',
        'webhook_fetch',
        'webhook_fetch_multiple',
        'webhook_analytics',
        'webhook_list_events',
        'sms_set_ratelimit_threshold',
        'sms_delete_ratelimit_threshold',
        'suppression_list_remove',
        'oauth_app_webhook_create',
        'device_verify_token',
        'credits_fetch_multiple',
        'credits_fetch_by_id',
        'batch_create',
        'payout_links_batch_create',
        'batch_validate_file',
        'validate_file_name',
        'batch_fetch_multiple',
        'batch_fetch_by_id',
        'batch_download_file',
        'payment_page_notify_all',
        'batch_stats',
        'invoice_notify_by_batch',
        'invoice_cancel_by_batch',
        'invoice_get_stats_by_batch_ids',
        'invoice_add_line_items',
        'invoice_update_line_item',
        'invoice_remove_line_item_bulk',
        'virtual_account_edit_bulk',
        'invoice_remove_line_item',
        'subscription_manual_retry_old',
        'subscription_manual_retry',
        'subscription_test_charge',
        'subscription_fetch_due_addons',
        'merchant_billing_label_suggestions',
        'merchant_billing_label_update',
        'purpose_code_fetch',
        'merchant_patch_purpose_code',
        'user_fetch_purpose_code',
        'hs_code_fetch',
        'merchant_patch_hs_code',
        'fetch_hs_code',
        'payment_update_merchant_document',
        'payment_bulk_update_merchant_document',
        'firs_document_fetch',
        'firs_document_download',
        'emerchantpay_get_request_data',
        'emerchantpay_create_request_data',
        'emerchantpay_owner_delete',
        'merchant_features_fetch',
        'merchant_features_update',
        'merchant_create_key',
        'merchant_create_key_with_otp',
        'merchant_fetch_keys',
        'merchant_replace_key',
        'merchant_replace_key_with_otp',
        'merchant_gst_fetch',
        'merchant_gst_edit',
        'merchant_gstin_self_serve_status',
        'merchant_gstin_self_serve_update',
        'merchant_international_toggle',
        'merchant_activation_details',
        'retry_store_legal_documents_cron',
        'fetch_merchant_escalation',
        'fetch_merchant_sr',
        'merchant_aov_config',
        'merchant_get_disabled_banks',
        'merchant_activation_upload_file',
        'merchant_activation_save',
        'merchant_tnc_save',
        'merchant_tnc_popup_status',
        'merchant_tnc_details_by_mid',
        'merchant_website_section_action',
        'merchant_website_section_save',
        'merchant_website_section_fetch',
        'merchant_website_section_page_load',
        'merchant_checkout_details_save',
        'merchant_checkout_details',
        'merchant_business_detail_save',
        'merchant_activation_update_website',
        'merchant_one_time_token',
        'merchant_activation_business_categories',
        'merchant_activation_business_categories_v2',
        'merchant_activation_business_details',
        'merchant_activation_company_search',
        'merchant_activation_gst_details',
        'merchant_business_types',
        'merchant_supported_plugins',
        'merchant_activation_needs_clarification',
        'merchant_razorx_evaluate',
        'merchant_plugin_fetch',
        'merchant_razorx_bulk_evaluate',
        'bank_transfer_process_test',
        'reports_fetch_multiple',
        'file_get_signed_url',
        'reports_generate',
        'invitation_create',
        'invitation_fetch',
        'invitation_resend',
        'invitation_edit',
        'invitation_delete',
        'accounting_integrations_invite_resend',
        'oauth_token_fetch_multiple',
        'oauth_token_fetch',
        'oauth_token_revoke',
        'oauth_fetch_submerchant_applications',
        'oauth_application_access_revoke',
        'oauth_application_create',
        'oauth_application_create_partner',
        'oauth_application_fetch_multiple',
        'oauth_application_fetch_partner',
        'oauth_application_fetch',
        'oauth_application_delete',
        'oauth_application_update',
        'order_create',
        'otp_create',
        'user_otp_verify',
        'merchant_analytics',
        'get_merchant_data_for_segment',
        'reports_refund_irctc',
        'feature_onboarding_create',
        'feature_onboarding_fetch_responses',
        'merchant_pre_signup_details',
        'merchant_edit_pre_signup_details',
        'coupon_validate',
        'create_submerchant_user',
        'user_merchant_mapping_action',
        'onboarding_features_fetch_details',
        'onboarding_features_create',
        'onboarding_features_fetch_submission',
        'reporting_config_get',
        'reporting_config_list',
        'reporting_config_create',
        'reporting_config_edit',
        'reporting_config_delete',
        'reporting_log_get',
        'reporting_log_list',
        'reporting_log_update',
        'reporting_log_create',
        'reporting_schedule_get',
        'reporting_schedule_update',
        'reporting_schedule_list',
        'reporting_schedule_create',
        'reporting_schedule_delete',
        'reporting_consumer_restrictions',
        'ufh_get_file_signed_url',
        'pincode_get',
        'dispute_edit',
        'dispute_file_delete',
        'dispute_files_fetch',
        'merchant_get_tags',
        'merchant_edit_email_la',
        'la_fetch',
        'merchant_bank_account_create',
        'merchant_bank_account_update',
        'merchant_bank_account_file_upload',
        'merchant_requests_create',
        'merchant_requests_get_feature',
        'merchant_bank_account_change_status',
        'tax_get',
        'tax_list',
        'tax_create',
        'tax_update',
        'tax_delete',
        'tax_group_get',
        'tax_group_list',
        'tax_group_create',
        'tax_group_update',
        'tax_group_delete',
        'tax_get_meta_states',
        'tax_get_meta_gst_taxes',
        'payment_page_get',
        'payment_page_get_details',
        'payment_page_list',
        'payment_page_create',
        'payment_page_cds_domain_create',
        'payment_page_cds_domain_list',
        'payment_page_cds_domain_delete',
        'payment_page_cds_check_propagation',
        'payment_page_cds_domain_exists',
        'payment_page_cds_subdomain',
        'payment_page_cds_fetch_plans',
        'payment_page_cds_fetch_plan',
        'payment_page_update',
        'payment_page_notify',
        'payment_page_deactivate',
        'payment_page_activate',
        'payment_page_slug_exists',
        'payment_page_item_update',
        'payment_page_set_merchant_details',
        'payment_page_fetch_merchant_details',
        'payment_page_set_receipt_details',
        'payment_page_get_invoice_details',
        'payment_page_send_receipt',
        'payment_page_save_receipt_for_payment',
        'payment_page_get_pending_payments',
        'payment_page_get_batches',
        'payment_handle_precreate',
        'payment_handle_create',
        'payment_handle_update_old',
        'payment_handle_update',
        'payment_handle_availability',
        'payment_handle_get',
        'payment_handle_suggestion',
        'payment_handle_amount_encryption',
        'payment_button_create',
        'payment_button_get',
        'payment_button_list',
        'payment_button_get_details',
        'payment_button_update',
        'payment_button_item_update',
        'payment_button_activate',
        'payment_button_deactivate',
        'payment_button_send_receipt',
        'payment_button_set_receipt_details',
        'payment_button_get_receipt_details',
        'payment_button_fetch_merchant_details',
        'payment_button_set_merchant_details',
        'payment_button_save_receipt_for_payment',

        'nca_store_create',
        'nca_store_list',
        'nca_store_details',
        'nca_store_update',
        'nca_store_delete',
        'nca_store_payments',
        'nca_store_activate',
        'nca_store_deactivate',
        'nca_store_order_line_item',

        'store_category_create',
        'store_category_list',
        'store_category_details',
        'store_category_update',
        'store_category_delete',

        'store_catalog_create',
        'store_catalog_list',
        'store_catalog_details',
        'store_catalog_update',
        'store_catalog_delete',

        'submerchants_fetch',
        'submerchants_fetch_multiple',
        'submerchants_fetch_capital_applications',
        'webhook_fire',
        'merchant_methods_edit',
        'merchant_fetch_methods',
        'on_demand_settlement',
        'on_demand_settlement_fees',
        'merchant_get_preferences',
        'merchant_post_preferences',
        'merchant_bank_allocation',
        'fetch_merchant_products',
        'add_additional_website_self_serve',
        'additional_website_status',
        //update VA
        'merchant_virtual_account_edit',
        'org_setl_fetch_by_id',

        // Only to be used via Subscriptions Service
        'payment_create_subscriptions',
        'entity_origin_create',

        'merchant_product_switch',
        'merchant_instant_activation_post',
        'subscription_registration_list_tokens',
        'subscription_registration_list_links',
        'subscription_registration_create_links',
        'subscription_registration_fetch_link',
        'subscription_registration_resend_links_batch',
        'subscription_registration_fetch_token',
        'subscription_registration_delete_token',
        'subscription_registration_charge_token',
        'subscription_registration_charge_token_bulk',
        'auth_link_paper_mandate_authenticate_proxy',
        'auth_link_paper_mandate_validate_proxy',
        'subscription_registration_fetch_link_internal',
        'get_paper_mandate_uploaded_url',
        'auth_link_paper_mandate_retry_token',
        'nach_register_test_payment_authorize_or_fail',
        'merchant_submit_support_call_request',
        'can_merchant_submit_support_call_request',
        'get_merchant_support_option_flags',
        'token_fetch_card',
        'token_fetch_vpa',
        'subscription_fetch_emandate_detail',
        'subscription_fetch_card_mandate_detail',
        'increase_transaction_limit_self_serve',
        'merchant_app_scalability_config',
        'merchant_user_app_change_ftux',
        'merchant_user_app_incr_product_session',
        'merchant_recent_trans_with_source',
        'merchant_workflow_details',
        'merchant_consents_admin_fetch',
        'merchant_workflow_clarification',
        'user_edit_self',
        'user_otp_create',
        'user_verify_contact',
        'user_verify_email',
        'payout_create_with_otp',
        'composite_payout_create_with_otp',
        'payout_create_2FA',
        'payout_send_2FA_otp',
        'payout_update_attachments',
        'payout_download_attachments',
        'payout_report_get_attachment_signed_url',
        'payout_report_get_attachment_details',
        'payout_upload_attachment',
        'undo_payout_creation',
        'resume_payout_creation',
        'payout_get_attachment_signed_url',
        'payout_validate',
        'user_send_x_mobile_app_link',
        'payout_approve_bulk',
        'payout_reject_bulk',
        'payout_approve',
        'payout_2fa_approve',
        'payout_reject',
        'payout_update_status',
        'payouts_summary',
        'payouts_workflow_summary',
        'payouts_workflow_config_get',
        'payment_page_images',
        'commissions_get_multiple',
        'subscription_payment_fetch_by_id',
        'subscription_fetch_by_id',
        'subscription_cancel_token',
        'commissions_get',
        'currency_fetch_all_proxy',
        'commissions_analytics',
        'invoice_update_billing_period',
        'bulk_invoice_create',
        'payout_bulk_create',
        'payout_bulk_approve',
        'reconciliate_via_batch_service',
        'fund_account_bulk_create',
        'bulk_contact_create',
        'banking_account_create',
        'banking_account_bank_lms_fetch_multiple',
        'banking_account_bank_lms_fetch_by_id',
        'banking_account_bank_lms_patch_lead',
        'banking_account_bank_lms_activity_list',
        'banking_account_bank_lms_comments_list',
        'banking_account_bank_lms_comment_create',
        'fetch_branch_list',
        'fetch_rm_list',
        'banking_account_bank_lms_download_mis',
        'banking_account_bank_lms_send_complete_mis',
        'banking_account_bank_lms_assign_bank_poc',
        'banking_account_create_dashboard',
        'get_banking_account_slot_booking_details',
        'banking_account_update_dashboard',
        'banking_account_verify_otp',
        'banking_accounts_get',
        'merchant_partner_configs_fetch',
        'banking_accounts_list',
        'user_mobile_oauth_logout',
        'reports_monthly_banking_invoice',
        'workflow_payout_amount_rules',
        'merchant_2fa_change_setting',
        'user_2fa_change_setting',
        'user_opt_in_whatsapp',
        'user_opt_in_status_whatsapp',
        'user_opt_out_whatsapp',
        'user_update_contact',
        'user_verify_through_mode',
        'user_contact_update_sent_otp',
        'user_verify_and_update_mobile_otp' ,
        'user_add_email',
        'user_add_email_verify',
        'user_account_unlock',
        'banking_account_statement_generate',
        'update_partner_type',
        'fetch_partner_first_user_experience',
        'offer_create',
        'offer_update',
        'offer_fetch_multiple',
        'offer_fetch_subscription',
        'subscription_offer_fetch_discount',
        'subscription_offer_preference',
        'subscription_offer_fetch_usage',
        'offer_fetch_by_id',
        'partner_referral_fetch',
        'partner_referral_create',
        'commissions_invoice_status_change',
        'commissions_invoice_fetch',
        'commissions_invoice_fetch_all',

        //balance configs
        'fetch_merchant_balance_configs',
        'get_merchant_balance_config',
        'virtual_account_configs',

        'fd_reserve_balance_ticket',
        'fd_reserve_balance_ticket_status',

        'fd_create_ticket',
        'fd_fetch_tickets',
        'fd_fetch_converations',
        'fd_fetch_ticket',
        'fd_post_ticket_reply',
        'fd_post_ticket_grievance',

        'entity_bulk_update',
        'user_resend_verification_otp',

        'initiate_terminal_onboarding',
        'proxy_merchant_get_terminals',
        'terminals_proxy_gateway_terminal_status',
        'terminals_proxy_get_optimizer_gateways',
        'terminals_proxy_add_optimizer_provider',
        'terminals_proxy_update_optimizer_provider',
        'terminals_proxy_get_merchant_optimizer_provider',
        'terminals_proxy_get_optimizer_merchant_methods',
        'payout_links_merchant_settings_post',
        'payout_links_merchant_settings_get',
        'payout_links_merchant_on_boarding_status',
        'payout_links_resend_notification',
        'payout_links_merchant_summary',
        'payout_links_batch_summary',
        'payout_links_integration_details',
        'payout_links_integrate_app',
        'payout_links_fetch_shopify_order',
        'payout_links_approve',
        'payout_links_approve_otp',
        'payout_links_reject',
        'payout_links_workflow_summary',
        'payout_links_bulk_approve',
        'payout_links_bulk_approve_otp',
        'payout_links_bulk_reject',
        'payout_links_upload_attachment',
        'payout_links_get_signed_url',
        'payout_links_update_attachments',

        'fetch_payment_merchant_actions',
        'virtual_account_banking_fetch_multiple',
        'fetch_payment_config',
        'create_payment_config',
        'update_payment_config',
        'merchant_product_international_request',

        // Vendor Payment Routes
        'vendor_payments_check_existing_invoice',
        'vendor_payment_send_vendor_invite_ei',
        'vendor_payment_disable_vendor_portal',
        'vendor_payment_enable_vendor_portal',
        'vendor_payment_get_email_mapping',
        'vendor_payment_create_email_mapping',
        'vendor_payment_summary',
        'vendor_payment_get_tds_categories',
        'vendor_payment_invoice_upload',
        'vendor_payment_invoice_get_signed_url',
        'vendor_payment_contact_list',
        'vendor_payment_contact_get',
        'vendor_payment_contact_create',
        'vendor_payment_contact_update',
        'vendor_payment_list',
        'vendor_payment_list_vendors',
        'vendor_sign_up_create_business_info',
        'vendor_sign_up_get_business_info_status',
        'vendor_payment_create_file_upload',
        'vendor_payment_get_file_upload',
        'vendor_payment_delete_file_upload',

        'vendor_payment_add_or_update_settings',
        'vendor_payment_get_settings',
        'vendor_payment_get_latest_approvers',
        'vendor_payment_get_timeline_view',

        'vendor_payment_create_vendor_advance',
        'vendor_payment_get_vendor_advance',
        'vendor_payment_list_vendor_advance',

        'vendor_payment_get_by_id',
        'vendor_payment_create',
        'vendor_payment_edit',
        'vendor_payment_cancel',
        'vendor_payment_bulk_cancel',
        'vendor_payment_accept',
        'vendor_payment_execute_bulk',
        'vendor_payment_execute',
        'vendor_payment_execute_2fa',
        'vendor_payment_get_ocr_data',
        'vendor_payment_mark_as_paid',
        'vendor_payment_reporting_info',
        'vendor_payment_bulk_invoice_download',
        'vendor_payment_update_invoice_file_id',
        'vendor_payment_get_invoice_zip_file',
        'vendor_payment_get_quick_filter_amounts',
        'vendor_payment_get_auto_processed_invoice',
        'vendor_settlement_execute_single',
        'vendor_settlement_fund_accounts',
        'vendor_settlement_execute_multiple',
        'vendor_settlement_mark_as_paid',
        'vendor_settlement_vendor_balance',

        // Vendor Portal Routes
        'vendor_invoices_list',
        'vendor_invoice_create',
        'vendor_portal_list_tds_categories',
        'vendor_invoice_get_by_id',
        'vendor_portal_invites_list',
        'vendor_portal_invoice_get_signed_url',
        'vendor_portal_upload_invoice',
        'vendor_portal_get_ocr_data',
        'vendor_portal_get_vendor_preferences',
        'vendor_portal_update_vendor_preferences',

        // Apps routes
        'x_apps_get_all_settings',
        'x_apps_add_or_update_settings',

        // Accounts-Receivable
        'accounts_receivable_all_routes',
        'business_reporting_all_proxy_routes',
        'contact_create_address',
        'contact_fetch_addresses',

        // Vendor Portal Invitation
        'invite_to_vendor_portal',
        'resend_invite_to_vendor_portal',

        // Generic Accounting Integrations
        'accounting_integrations_proxy_routes',

        // Accounting Payouts
        'accounting_payouts_integration_status',
        'accounting_payouts_cash_flow_list_ba',
        'accounting_payouts_cash_flow_update_ba_mapping',
        'accounting_payouts_integration_app_get_url',
        'accounting_payouts_integration_app_initiate',
        'accounting_payouts_integration_status_app',
        'accounting_payouts_app_credentials',
        'accounting_payouts_delete_integration',
        'accounting_payouts_sync_status',
        'accounting_integration_get_bank_statement_report',
        'accounting_payouts_sync',
        'accounting_payouts_waitlist',

        //Tally App
        'accounting_integration_get_all_settings',
        'accounting_integration_add_or_update_settings',
        'accounting_integration_tally_delete_integration',

        'accounting_integration_get_organization',
        'accounting_integration_set_organization',
        'accounting_integration_get_chart_of_accounts',
        'accounting_integration_put_chart_of_accounts',
        'accounting_integration_sync_chart_of_accounts',
        'accounting_integration_bank_statement_fetch_trigger_merchant',
        'accounting_integration_bank_transactions_sync_status',
        'accounting_integration_check_bank_ledger_mapping_required',

        // Virtual VPA Prefix
        'virtual_vpa_prefix_validate',
        'virtual_vpa_prefix_save',

        // low balance config
        'create_low_balance_config',
        'update_low_balance_config',
        'fetch_low_balance_config',
        'list_low_balance_config',
        'delete_low_balance_config',
        'disable_low_balance_config',
        'enable_low_balance_config',

        // Refunds
        'refund_cancel_batch',

        // TwoFa validation routes
        'user_trigger_2fa_otp',

        //payout downtime
        'fetch_payout_downtimes_enabled',

        // tax payment routes
        'tax_payments_pay',
        'tax_payments_bulk_pay',
        'tax_payments_get_all_settings',
        'tax_payments_add_or_update_settings_auto',
        'tax_payments_add_or_update_settings',
        'tax_payments_mark_as_paid',
        'tax_payments_challan_upload',
        'tax_payments_edit',
        'tax_payments_cancel',
        'tax_payments_challan_download',
        'tax_payments_update_challan_file_id',
        'merchant_credits_balance_fetch',
        'tax_payments_list',
        'tax_payments_monthly_summary',
        'tax_payments_get_by_id',
        'tax_payments_create',
        'tax_payments_fetch_pending_gst',
        'tax_payments_invalid_tan_status',
        'tax_payments_downtime_schedule',
        'tax_payments_downtime_schedules_list',
        'payouts_scheduled_time_slots',
        'proxy_merchant_get_pricing',
        'payment_links_sign_payload',

        // governor merchant dashboard
        'governor_list_merchant_providers',
        'governor_list_merchant_rule_groups',
        'governor_get_merchant_rule_group',
        'governor_reorder_merchant_rule_groups',
        'governor_update_merchant_rule_group',
        'governor_update_merchant_rule_group_mode',
        'governor_create_merchant_rule_group',
        'governor_delete_merchant_rule_group',

        'currency_fetch_rates_proxy',
        'payouts_bulk_amount_type_update',
        'invoice_send_notification_proxy',

        'wfs_config_get',

        'payment_validate_vpa_internal',
        // Get free_payout attributes for balance
        'get_free_payouts_attributes',
        'proxy_merchant_get_support_details',
        'proxy_merchant_create_support_details',
        'proxy_merchant_edit_support_details',
        'virtual_account_create_for_internal',
        'payment_links_switch_versions',
        'subscription_get_revenue_by_source',

        // Bulk Payouts
        'payouts_batch_validate',
        'payouts_bulk_sample_file',
        'payouts_bulk_template_file',
        'payouts_batch_process',
        'payouts_get_batch_rows',

        'setl_fetch_source_details',
        'linked_account_create_batch',
        'payment_transfer_batch',
        'transfer_create_reversal_batch',
        'reward_activate_or_deactivate',
        'reward_fetch',
        'fetch_trusted_badge_status',
        'trusted_badge_merchant_status',
        // merchant notification config
        'create_merchant_notification_config',
        'update_merchant_notification_config',
        'fetch_merchant_notification_config',
        'list_merchant_notification_config',
        'delete_merchant_notification_config',
        'disable_merchant_notification_config',
        'enable_merchant_notification_config',

        'app_merchant_mapping_get',
        'merchant_tag_map_create',
        'merchant_tag_map_update',
        //AppStore on Dashboard
        'merchant_install_app_on_appstore',
        'merchant_get_apps_on_appstore',

        //TPV - Third party validation
        //- validations on source accounts through which money gets loaded to va.
        'merchant_fetch_tpvs',
        'merchant_tpv_create',

        'care_service_dashboard_proxy',
        'care_service_get_dashboard_proxy',


        // NPS survey routes
        'pending_survey_get',
        'update_survey_tracker',

        //Banking account service
        'banking_account_service_routes',
        'banking_account_service_pincode_serviceability_check',
        'banking_account_service_common_serviceability_check',
        'banking_account_slot_book',
        'banking_account_get_recent_slot',
        'banking_account_get_free_slot',
        'banking_account_slot_reschedule',

        //Partner Activation routes
        'partner_activation_details',
        'partner_activation_save',

        'partner_sales_poc',
        'partner_request_migration',
        // Partner KYC access routes
        'partner_kyc_access_request',
        'partner_kyc_revoke_access',

        'merchant_authorize_partner_save',
        'merchant_authorize_partner_status',

        // Sub Virtual Account routes
        'sub_virtual_account_list',
        'sub_virtual_account_transfer_with_otp',
        'sub_virtual_account_transfer_list',

        //Toggle Fee Bearer
        'merchant_toggle_fee_bearer',

        'merchant_international_enablement_preview',
        'merchant_international_visibility_info',
        'merchant_international_enablement_get',
        'merchant_international_enablement_draft',
        'merchant_international_enablement_submit',
        'merchant_international_enablement_discard',
        'merchant_save_business_website',
        'business_website_status',
        'get_dispute_document_types_metadata',
        'patch_dispute_contest_by_id',
        'post_dispute_accept_by_id',
        'dispute_fetch_multiple_count',

        //Axis bank changes
        'draft_invitation_fetch',
        'draft_invitation_accept',

        // 1cc config routes
        'update_serviceability_url',
        'update_coupon_validity_url',
        'update_fetch_coupons_url',
        '1cc_configs_update',
        '1cc_configs_get',
        '1cc_prepay_cod_configs_get',
        '1cc_disable_magic',
        'update_merchant_platform',
        '1cc_cod_eligibility_attribute_list',
        '1cc_cod_eligibility_attribute_upsert_bulk',
        '1cc_cod_eligibility_attribute_delete',
        '1cc_cod_eligibility_attribute_delete_by_attribute',
        '1cc_cod_eligibility_attribute_upsert_batch',
        '1cc_rto_dashboard_list',
        '1cc_cod_order_list',
        '1cc_prepay_order_list',
        '1cc_prepay_order_details',
        '1cc_merchant_file_upload_audit_create',
        '1cc_merchant_file_upload_audit_list',
        '1cc_cod_order_review',
        '1cc_merchant_order_review_automation_rule_configs_get',
        '1cc_merchant_order_review_automation_rule_configs_upsert',
        '1cc_fetch_dashboard_analytics',
        '1cc_create_fee_rules',
        '1cc_create_fee_rule',
        '1cc_fetch_fee_rule',
        '1cc_filter_fee_rule',
        '1cc_delete_fee_rule',
        '1cc_create_zone',
        '1cc_update_zone',
        '1cc_add_locations',
        '1cc_remove_locations',
        '1cc_fetch_zone',
        '1cc_filter_zone',
        '1cc_delete_zone',
        '1cc_fetch_all_countries_with_zone',
        '1cc_cod_engine_config_summary',
        '1cc_create_item_category',
        '1cc_update_item_category',
        '1cc_fetch_item_category',
        '1cc_filter_item_category',
        '1cc_delete_item_category',
        '1cc_config_item_category',
        '1cc_item_category_search_product',
        '1cc_fee_rule_associations',
         '1cc_clear_fee_rule',

        // splitz
        'splitz_evaluate_bulk_proxy',

        //Growth
        'growth_get_asset_details',
        'growth_get_template_by_id',
        'growth_create_pricing_subscription',
        'growth_get_pricing_subscription_by_mid',
        'growth_check_pricing_subscription',

        //payout status reason mapping
        'payout_status_to_reason_mapping',

        'accounting_integrations_proxy_routes',
        'capital_virtual_cards_generate_token',

        //CAC
        'cac_privileges_fetch',
        'cac_role_fetch_all',
        'cac_role_fetch_role_map',
        'role_self_get',
        'view_cac_role',
        //'delete_cac_role',
        'create_cac_role',
        'edit_cac_role',

        'merchant_features_edit',
        'enable_non_3ds_self_serve',
        'get_non_3ds_details',

        // self serve workflow routes
        'workflow_config_create',
        'workflow_config_update',
        'workflow_config_delete',
        'payouts_bulk_reject_owner',
        'payout_links_bulk_reject_owner',
        'fetch_pending_payouts_summary',
        'fetch_pending_payout_links_summary',
        'merchant_ip_config_fetch',
        'merchant_ip_config_create',

        'payout_partner_bank_status',

        // Checkout Service Routes
        'customer_fetch_tokens_internal',
        'invoice_fetch_for_checkout_internal',
        'contact_get_checkout',
        'merchant_policy_details',
        'customer_truecaller_auth_internal',
        'checkout_personalisation_internal',
        'customer_fetch_internal_for_checkout',
        'fetch_payment_config_checkout_internal',
        'order_fetch_internal_checkout',
        'merchant_methods_offers_checkout_internal',
        'checkout_1cc_configs_get',

        'partner_config_fetch',
        'partner_config_edit',
        'partner_config_edit_logo',
        'submerchant_partner_feature_check'
    ];

    // These will run on internal auth with the assurance
    // of X-Admin-Token being passed.
    //
    public static $admin = [
//        'customAction',
        'merchant_bmc_response_fetch_admin',
        'dispute_ingestion',
        'dispute_dcs_config_add',
        'dispute_dcs_config_update',
        'dispute_dcs_config_get',
        'admin_1cc_whitelist_coupons',
        //media Service routes
        'media_service_upload_file',
        'media_service_get_bucket',
        'media_service_upload_process',
        'admin_fetch_banking_account',
        'admin_fetch_banking_accounts_multiple',
        'admin_merchant_get_terminals',
        'merchant_activation_eligibilty',
        'merchant_activation_clarifications_save_admin',
        'merchant_activation_clarifications_fetch_admin',
        'merchant_nc_revamp_eligibility_admin',
        'merchant_ip_config_opt_status_admin',
        'merchant_ip_config_fetch_admin',
        'fund_management_balance_get_config',
        'fund_management_balance_set_config',
        'merchant_ip_config_create_admin',
        'salesforce_event_admin',
        'salesforce_event_admin_one_ca',
        'merchant_create_lead_to_salesforce_admin',
        'payment_page_cds_create_plans',
        'payment_page_cds_update_plans',
        'payment_page_cds_delete_plans',
        'org_bank_account_create',
        'org_fetch_bank_account',
        'org_update_bank_account',
        'admin_payouts_workflow_config_get',
        'admin_fetch_role_map',
        'max_payment_limit_update',
        'execute_max_payment_limit_workflow',
        'linked_account_reference_data_create',
        'linked_account_reference_data_update',
        'amc_linked_account_create',
        'admin_website_section_action',
        'admin_website_section_save',
        'admin_website_section_fetch',
        'merchant_consents_admin_fetch',
        'admin_collect_info_merchant_details_patch',
        'nocode_debugging_route',
        'merchant_enhanced_activation_details',
        'mob_admin_routes',
        'mob_admin_routes_for_one_ca',
        'merchant_create_lead_to_salesforce_admin_for_one_ca',
        'mob_migration',
        'mob_ca_lms_routes',
        'merchant_business_types_admin',
        'merchant_info',
        'merchant_audit_info',
        'entity_audit_info',
        'get_audit_entities',
        'merchant_logs_search',
        'merchant_logs_fetch',
        'admin_merchant_la_fetch',
        'es_sync_entities',
        'es_transactions_sync',
        'es_payouts_sync',
        'orphan_payouts_delete',
        'admin_trigger_2fa_otp',
        'admin_account_lock_unlock',
        'workflow_needs_merchant_clarification',
        'growth_admin',
        "growth_upload_asset",
        'merchant_update_fraud_type',
        'admin_merchant_post_preferences',
        'admin_merchant_post_preferences_bulk',
        'admin_va_expiry_setting_upsert',
        'admin_va_setting_get',
        'merchant_risk_alerts_foh_workflow_trigger_nc',
        'merchant_risk_alerts_needs_clarification_fetch_mapping',
        'user_verify_contact_batch',
        'rbl_current_account_serviceability_get_admin',
        'merchant_business_detail_fetch',
        'merchant_business_detail_save',
        'get_beneficiary_details_for_international_payout_admin',
        'los_service_dev_admin',
        'loc_service_dev_admin',
        'admin_merchant_get_preferences',
        'admin_merchant_get_preferences_for_one_ca',
        'capital_marketplace_dev_admin',
        'capital_scorecard_dev_admin',
        'capital_lender_dev_admin',
        'capital_es_dev_admin',
        'settlement_ondemand_reverse',
        'recon_service_request_proxy',
        'recon_service_file_upload_proxy',
        'recon_service_workflow_file_upload_proxy',
        'recon_service_admin_request_proxy',
        'populate_merchant_trim_data_cron',
        'advertiser_logo',
        'partner_activation_migrate',
        'mir_instrument_set',
        'virtual_account_debug',
        'payment_links_v2_admin',
        'payment_links_ops_batch_cancel',
        'transfer_debug',
        'setl_ondemand_pricing',
        'setl_ondemand_fund_accounts',
        'settlement_ondemand_enqueue',
        'setl_ondemand_transfer_processed',
        'setl_ondemand_transfer_trigger',
        'setl_ondemand_transfer_payout_update',
        'banking_account_statement_process_admin',
        'banking_account_statement_insert_missing',
        'correct_merchant_owners_products',
        'paper_nach_fetch_failure',
        'paper_nach_approve_failure',
        'loc_service_admin',
        'capital_cards_admin',
        'capital_marketplace_admin',
        'capital_scorecard_admin',
        'capital_lender_admin',
        'bvs_validation_artifact_details',
        'wallet_service_admin',
        'capital_cards_dev_admin',
        'capital_collections_admin',
        'capital_collections_dev_admin',
        'merchants_risk_admin',
        'merchants_risk_create_alert_config',
        'merchants_risk_update_alert_config',
        'merchants_risk_delete_alert_config',
        'payout_reject_admin_bulk',
        'emi_plans_migrate',
        'los_service_admin',
        'emi_plans_migrate',
        'ufh_admin_upload_file',
        'user_delete_incorrect_password_count',
        'payout_update_pull_payout_status',
        'payout_links_bulk_resend_notification_admin',
        'payout_links_settings_post',
        'payout_links_settings_get',
        'toggle_whatsapp_notifications',
        'add_additional_website',
        'delete_additional_websites',
        'reminder_admin',
        'downtime_manager_admin',
        'merchant_document_admin_fetch',
        'merchant_document_types_fetch',
        'merchant_document_admin_upload',
        'merchant_document_admin_delete',
        'merchant_get_capital_tags',
        'org_get',
        'org_get_multiple',
        'admin_fetch_merchant_ids_new',
        'admin_fetch_merchants_new',
        'admin_fetch_unified_dashboard_merchants',
        'admin_fetch_partner_activation',
        'admin_create',
        'group_get',
        'group_get_multiple',
        'group_get_allowed_groups',
        'org_create',
        'org_edit',
        'org_delete',
        'org_fieldmap_create',
        'org_fieldmap_get_multiple',
        'org_fieldmap_get',
        'org_fieldmap_get_by_entity',
        'org_fieldmap_edit',
        'org_fieldmap_delete',
        'role_create',
        'role_get_multiple',
        'role_get',
        'role_edit',
        'role_add_permissions',
        'role_delete',
        'admin_get_multiple',
        'admin_get',
        'admin_edit',
        'admin_delete',
        'admin_lead_create',
        'admin_lead_put',
        'admin_lead_get_multiple',
        'group_create',
        'group_edit',
        'group_delete',
        'permission_get_multiple',
        'permission_get_by_type',
        'permission_get',
        'permission_get_roles',
        'permission_create',
        'permission_edit',
        'permission_delete',
        'auditlog_search',
        'refund_edit_status',
        'refund_mark_processed_bulk',
        'refund_reference1_bulk_update',
        'admin_logout',
        'schedule_create',
        'schedule_delete',
        'schedule_update',
        'schedule_assign',
        'schedule_fetch_multiple',
        'setl_reconcile',
        'transaction_bulk_update',
        'setl_update_channel_bulk',
        'setl_fetch_schedule',
        'feature_delete',
        'feature_delete_entity',
        'disable_instant_refunds',
        'feature_get',
        'batch_create_admin',
        'offer_bulk_deactivate',
        'batch_validate_file_admin',
        'send_test_sms',
        'invoice_cancel_by_batch_admin',
        'file_upload_admin',
        'admin_dummy_account_test',
        'admin_get_file',
        'admin_post_stork',
        'webhook_list_events',
        'sms_set_ratelimit_threshold',
        'sms_delete_ratelimit_threshold',
        'suppression_list_remove',
        // workflows
        'workflow_create',
        'workflow_get',
        'workflow_get_multiple',
        'workflow_update',
        'workflow_delete',
        'workflow_payout_amount_rules_get_admin',
        'admin_fetch_role_map',
        'workflow_payout_amount_rules_edit',
        'workflow_merchants_create_payout_get',
        'workflow_payout_amount_rules_create',
        'action_checker_create',
        'workflow_observer_data_update',
        'workflow_observer_data_fetch',
        'action_diff_get',
        'action_request_execute',
        'action_comment_create',
        'workflow_action_update',
        'workflow_action_details',
        'workflow_action_close',
        'workflow_action_get_multiple',
        'merchants_update_bulk',
        'merchants_update_channel',
        'adj_add',
        'payment_fix_attempted_orders',
        'payment_authorize_refund',
        'admin_change_password',
        'pricing_create_plan',
        'buy_pricing_create_plan',
        'merchant_get_pricing',
        'merchant_assign_pricing',
        'pricing_get_plans',
        'pricing_get_gateway_plans',
        'pricing_delete_plan_rule_force',
        'merchant_details_fetch',
        'buy_pricing_delete_plan_rule_force',
        'pricing_update_plan_rule',
        'buy_pricing_update_plan_rule',
        'merchant_invoice_update_gstin',
        'smart_dashboard_merchant_details_fetch',
        'merchant_details_suggested_update',
        'external_merchant_composite_details_fetch',
        'merchant_get_terminals',
        'merchant_invoice_add_bulk',
        'merchant_integration_create',
        'merchant_integrations_get',
        'merchant_integrations_delete',
        'create_beneficiary_for_international_payout',
        'setl_retry',
        'payout_retry',
        'merchant_activation_files',
        'merchant_get_rejection_reasons',
        'merchant_requests_rejection_reasons',
        'merchant_batches',
        'admin_fetch_all_entities',
        'external_admin_fetch_all_entities',
        'merchant_activation_archive',
        'merchant_activation_document_type',
        'merchant_activation_status',
        'merchant_activation_status_change_log',
        'onboarding_features_fetch_submissions',
        'onboarding_features_get_submissions',
        'onboarding_features_update_status',
        'onboarding_features_fetch_status',
        'onboarding_features_bulk_update_status',
        'onboarding_features_update',
        'feature_onboarding_fetch_all_responses',
        'pricing_get_merchant_plans',
        'buy_pricing_get_terminal_plans',
        'pricing_supported_networks',
        'pricing_add_plan_rule',
        'buy_pricing_add_plan_rule',
        'pricing_get_plan',
        'buy_pricing_get_plan',
        'payment_verify',
        'payment_verify_bulk',
        'payment_refund_at_bulk_update',
        'payment_authorize_failed',
        'iin_add',
        'emi_plan_add',
        'dummy_critical_error',

        //PG Ledger Routes
        'pg_onboard_merchant',
        'pg_offboard_merchant',
        'pg_sync_balances_merchant',
        'merchant_tag_add',
        'merchant_tag_delete',
        'merchant_update_key_access',
        'refund_verify_multiple',
        'refund_verify_failed',
        'refund_retry_bulk_via_fta',
        'api_refunds_retry_without_verify',
        'refund_verify_failed_bulk',
        'refund_without_verify_bulk',
        'merchant_edit_bank_account',
        'bulk_data_entry',
        'merchant_edit_email',
        'update_merchant_mobile_number',
        'merchant_fetch_all_additional_email',
        'merchant_fetch_additional_email',
        'merchant_create_additional_email',
        'merchant_delete_additional_email',
        'virtual_accounts_close_bulk',
        'virtual_account_number_setting_upsert',
        'dispute_reason_create',
        'merchant_tags_bulk',
        'refund_verify',
        'refund_verify_bulk',
        'refund_set_unprocessed_config',
        'merchant_edit',
        'merchant_edit_risk_attributes',
        'execute_bulk_action',
        'adj_add_bulk',
        'adj_add_reverse',
        'admin_fetch_report_types',
        'admin_fetch_report',
        'admin_fetch_terminal_multiple',
        'admin_fetch_entity_multiple',
        'admin_entity_sync',
        'admin_fetch_axis_paysecure_payments',
        'admin_fetch_entity_by_id_axis_paysecure',
        'admin_fetch_all_entities_axis',
        'external_admin_fetch_entity_multiple',
        'admin_fetch_terminal_by_id',
        'non_org_admin_fetch_terminal_by_id',
        'admin_fetch_entity_by_id',
        'external_admin_fetch_entity_by_id',
        'bank_transfer_edit_payer_account',
        'bank_transfer_insert',
        'bank_transfer_strip_payer_accounts',
        'batch_process_by_id',
        'batch_retry_output_file',
        'coupon_apply',
        'coupon_create',
        'coupon_delete',
        'coupon_update',
        'credits_create',
        'credits_create_bulk',
        'credits_edit',
        'currency_fetch_rates',
        'dummy_route',
        'emi_plan_delete',
        'emi_plan_fetch_by_id',
        'es_debug_get',
        'es_aliases_post',
        'es_index_create',
        'es_index',
        'es_proxy',
        'feature_add',
        'enable_instant_refunds',
        'feature_bulk_assign',
        'affordability_widget_trial_period_update',
        'feature_bulk_remove',
        'feature_get_multiple',
        'fund_transfer_attempt_bulk_update',
        'gateway_fetch_downtimes',
        'gateway_create_downtime',
        'refresh_payments_ongoing_downtimes',
        'refresh_payments_resolved_downtimes',
        'refresh_payments_scheduled_downtimes',
        'add_downtime_slack_merchant_names',
        'gateway_create_rule',
        'gateway_delete_rule',
        'gateway_file_acknowledge',
        'gateway_file_retry',
        'gateway_update_downtime',
        'gateway_delete_downtime',
        'gateway_update_rule',
        'get_cache_counts',
        'get_mode_config_instruments',
        'get_config_keys',
        'gratis_postpaid_transactions',
        'mark_transactions_postpaid',
        'iin_edit',
        'iin_edit_bulk',
        'iin_generate_post',
        'iin_range_upload',
        'iin_upload',
        'merchant_actions',
        'merchant_activation_update',
        'merchant_activation_send_notification',
        'merchant_activation_get_request_document_list',
        'merchant_upload',
        'merchant_activation_upload_file_admin',
        'merchant_beneficiary_file',
        'merchant_create',
        'admin_reports_fetch_filters',
        'admin_reports_fetch_report_data',
        'admin_reports_fetch_reports_by_type',
        'admin_reports_fetch_reports_for_admin',
        'admin_reports_fetch_reports_by_id',
        'merchant_create_terminal',
        'merchant_onboard_terminal',
        'merchant_onboard_external_org_terminal',
        'merchant_delete_terminal',
        'merchant_validate_delete_terminal_v3',
        'merchant_delete_terminal_v3',
        'merchant_edit_free_credits',
        'merchant_fetch',
        'merchant_fetch_bank_account',
        'merchant_fetch_multiple',
        'merchant_generate_test_bank_acnt',
        'merchant_get_banks',
        'merchant_live_disable',
        'merchant_live_enable',
        'merchant_put_payment_methods',
        'merchant_send_activation_mail',
        'merchant_set_banks',
        'merchants_update_bank_account',
        'methods_update_merchants',
        'migrate_tokens_to_gateway_tokens',
        'mock_generate_reconciliation',
        'nodal_add_beneficiary',
        'org_get_self',
        'payment_authorize_time_out',
        'payment_auto_capture_email',
        'payment_bulk_capture',
        'payment_capture_gateway_manual',
        'payment_capture_verify',
        'payment_dispute_create',
        'dispute_bulk_create',
        'dispute_bulk_edit',
        'dispute_poc_mails',
        'payment_fix_authorize_at',
        'payment_force_authorize',
        'payments_multiple_authorize_refund',
        'promotion_create',
        'promotion_update',
        'promotion_deactivate',
        'promotion_create_for_event',
        'schedule_fetch',
        'schedule_update_next_run',
        'send_newsletter',
        'send_test_newsletter',
        'set_config_keys',
        'update_config_key',
        'get_config_key',
        'delete_config_key',
        'nodal_initiate_transfer_admin',
        'settings_delete',
        'settings_fetch_defined',
        'settings_fetch',
        'settings_upsert',
        'terminal_add_merchant',
        'terminal_check_encrypted_value',
        'terminal_delete',
        'terminal_edit',
        'terminal_edit_god_mode',
        'terminal_fetch_editable_fields',
        'terminal_edit_external_org',
        'terminal_update_bulk',
        'terminal_reassign_merchant',
        'terminal_remove_merchant',
        'terminal_restore',
        'terminal_toggle',
        'terminals_proxy_fetch_terminals_org',
        'transaction_create_fees_breakup',
        'upi_fill_bank',
        'upi_psp_allow',
        'upi_psp_disallow',
        'user_confirm',
        'user_create',
        'db_meta_query',
        'admin_get_app_auth',
        'enable_emi_merchant_sub',
        'oauth_sync_merchant_map',
        'merchant_user_reset_password',
        'setl_transaction_replay_admin',
        'setl_ledger_inconsistency_debug_admin',
        'setl_service_migration_admin',

        // acs routes
        'account_service_trigger_sync',
        'account_service_trigger_full_sync',

        // Sub VA Routes
        'sub_virtual_account_create',
        'sub_virtual_account_list_admin',
        'sub_virtual_account_enable_disable',
        'sub_virtual_account_migrate',



        // oauth routes
        'oauth_application_update_admin',
        'oauth_application_refresh_clients',

        // Shield Routes
        'shield_rules_get_multiple',
        'shield_rules_get',
        'shield_rules_create',
        'shield_rules_update',
        'shield_rules_delete',
        'shield_lists_get_multiple',
        'shield_lists_get',
        'shield_lists_create',
        'shield_lists_delete',
        'shield_list_items_get_multiple',
        'shield_list_items_get',
        'shield_list_items_add_multiple',
        'shield_list_items_purge',
        'shield_list_items_delete',
        'shield_settings_ui',
        'shield_risk_threshold_config_get_multiple',
        'shield_risk_threshold_config_get',
        'shield_risk_threshold_config_create',
        'shield_risk_threshold_config_update',
        'shield_risk_threshold_config_delete',
        'shield_merchant_risk_threshold_get_multiple',
        'shield_merchant_risk_threshold_get',
        'shield_merchant_risk_threshold_create',
        'shield_merchant_risk_threshold_update',
        'shield_merchant_risk_threshold_delete',
        'shield_merchant_risk_threshold_bulk_update',

        'razorx_route',
        'splitz_route',
        'splitz_upload_segment_file',
        'user_fetch_admin',
        'merchant_requests_list',
        'merchant_requests_update',
        'merchant_requests_status_log',
        'merchant_requests_get',
        'merchant_requests_bulk_update',
        'merchant_activation_bulk_assign_reviewer',
        'merchant_activation_reviewers',
        'banking_account_activation_spocs',
        'banking_account_ops_mx_pocs',

        // batch Service
        'batch_service_route',

        'merchant_bulk_edit_attributes',

        // Partners
        'merchants_access_map_create',
        'merchants_access_map_delete',
        'merchants_access_map_update',
        'backfill_merchant_applications',
        'backfill_referred_application',
        'merchant_sync_stakeholder',

        // Partner Activation routes
        'partner_activation_status',
        'partner_activation_update',
        'partner_actions',
        'partner_activation_bulk_assign_reviewer',

        'migrate_reseller_to_aggregator',
        'migrate_aggregator_to_reseller',
        'migrate_reseller_to_pure_platform',
        'migrate_pure_platform_to_reseller',

        //  Uploading bank refund file
        'gateway_file_bank_refunds_upload',

        // Scrooge - ODS Dashboard
        'scrooge_dashboard_init',
        'scrooge_reports_get_multiple',
        'scrooge_refunds_update_multiple',
        'scrooge_refunds_bulk_reference1_update',
        'scrooge_processed_refunds_state_change',
        'scrooge_refunds_to_failed_state',
        'scrooge_refunds_enqueue',
        'scrooge_refunds_get_multiple',
        'scrooge_refunds_download',
        'scrooge_refunds_get',
        'scrooge_refunds_update',
        'scrooge_refunds_download_gateway_file',
        'scrooge_refunds_download_gateway_report',
        'scrooge_refresh_fta_modes_cache',
        'scrooge_set_instant_refund_mode_config',
        'scrooge_expire_instant_refund_mode_config',
        'scrooge_fetch_instant_refund_mode_config',

        'scrooge_refund_create',
        'scrooge_refund_create_bulk',

        'scrooge_refunds_retry_with_verify',
        'scrooge_refunds_retry_without_verify',
        'scrooge_refunds_retry_with_attempt_appended_id',
        'scrooge_refunds_retry_source_fund_transfers',
        'scrooge_refunds_retry_custom_fund_transfers',
        'scrooge_refunds_bulk_verify',

        // Reporting
        'reporting_config_create_admin',
        'reporting_config_create_full',
        'reporting_config_delete_admin',
        'reporting_config_edit_admin',
        'reporting_config_edit_full',
        'reporting_config_get_admin',
        'reporting_config_list_admin',
        'reporting_log_create_admin',
        'reporting_log_get_admin',
        'reporting_log_list_admin',
        'nodal_file_upload_retry',
        'reporting_config_types_fetch',
        'reporting_config_components_get_by_type',
        'reporting_config_options',
        'reporting_fetch_throttle_settings',
        'reporting_edit_throttle_settings',
        'reporting_config_edit_bulk',

        // UFH
        'ufh_get_file_signed_url_admin',
        'ufh_get_file_signed_url_by_mid',

        'nodal_beneficiary_update',
        'terminal_get_banks',
        'terminal_set_banks',
        'terminal_get_wallets',
        'terminal_set_wallets',
        'merchant_details_patch',
        'smart_dashboard_merchant_details_patch',
        'merchant_schedule_bulk',
        'merchant_schedule_reset',
        'merchant_pricing_bulk',
        'merchant_balance_bulk_backfill_ids',
        //Bulk Add/Remove bank for terminal
        'terminal_bank_bulk',
        'set_redis_keys',
        'set_gateway_downtime_conf',
        'get_gateway_downtime_conf',

        'partner_config_create_admin',
        'partner_config_fetch_admin',
        'partner_config_edit_admin',
        'create_partner_sub_merchant_config',
        'update_partner_sub_merchant_config',
        'partner_bulk_update_onboarding_source',

        'vault_token_create',

        //Admin route for fixing subscriptio data
        'subscription_update_data',
        'subscription_payment_process',
        'subscription_charge_cycle',
        'subscription_skip_cycle',

        'merchant_partners_fetch',

        'governor_create_namespace',
        'governor_domain_model_list',
        'governor_create_domain_model',
        'governor_update_namespace',
        'governor_create_rule',
        'governor_create_rule_bulk',
        'governor_update_rule',
        'governor_update_rule_bulk',
        'governor_rule_list',
        'governor_get_rule',
        'governor_create_rule_chain',
        'governor_update_rule_chain',
        'governor_rule_chain_list',
        'governor_rule_chain_execute',
        'payment_on_hold_bulk_update',
        'banking_serviceable_pincodes',
        'banking_account_update',
        'banking_account_webhook_data_reset',
        'banking_account_activate',
        'banking_account_webhook_account_info_internal',
        'banking_account_activation_status_change_log',
        'banking_account_comments_create',
        'co_created_reset_password_admin',
        'banking_account_activation_mis_download',
        'banking_account_activation_mis_report',
        'banking_account_comments_list',
        'banking_account_call_log_list',
        'banking_account_comment_edit',
        'banking_account_customer_appointment_dates',
        'banking_account_bulk_assign_reviewer',
        'banking_account_activation_detail_create',
        'banking_account_statement_details_create',
        'update_to_ca_onboarding_partner_type',
        'banking_account_bank_lms_assign_to_partner_bulk',
        'create_invitation_for_ca_onboarding_partner',
        'banking_account_activation_detail_update',
        'banking_account_service_lms_routes_all',
        'banking_account_service_lms_routes_ops',

        'governor_get_client_v1',
        'governor_create_namespace_v1',
        'governor_list_namespace_v1',
        'governor_get_namespace_v1',
        'governor_update_namespace_v1',
//        'governor_delete_namespace_v1',
        'governor_create_config_v1',
        'governor_list_config_v1',
        'governor_list_config_map_v1',
        'governor_get_config_v1',
        'governor_update_config_v1',
        'governor_delete_config_v1',
        'governor_create_template_v1',
        'governor_list_template_v1',
        'governor_update_template_v1',
        'governor_create_rule_v1',
        'governor_list_rule_v1',
        'governor_get_rule_v1',
        'governor_delete_rule_v1',
        'governor_list_rule_chains_v1',
        'governor_create_rule_chain_v1',
        'governor_update_rule_chain_v1',
        'governor_delete_rule_chain_v1',
        'governor_update_chain_group_sequence_v1',
        'governor_list_rule_groups_v1',
        'governor_create_rule_group_v1',
        'governor_create_bulk_rule_group_v1',
        'governor_get_rule_group_v1',
        'governor_delete_rule_group_v1',
        'governor_update_rule_group_v1',
        'governor_update_rule_v1',
        'governor_update_rule_index_v1',
        'governor_search_rules',
        'governor_optimizer_events',
        'governor_optimizer_rulegroup_stats',
        'governor_optimizer_merchant_stats',
        'governor_routing_events',

        // governor optimizer on-boarding
        'governor_optimizer_create_merchant',
        'governor_optimizer_update_merchant',

        // cache downtime router routes
        'router_gateway_downtime_create',
        'router_gateway_downtime_delete',
        'router_gateway_downtime_fetch',
        'router_refresh_cron',

        'setl_optimizer_settlement_manual_api',
        'setl_insert_new_transaction_records',
        'setl_update_execution_transaction_count',
        'setl_update_optimiser_execution_status',

        'banking_account_create_admin',
        'banking_account_create_dashboard_admin',

        // throttle settings routes
        'fetch_throttle_settings',
        'edit_throttle_settings',
        'bootstrap_key_cache',
        'throttle_migrate_redis',
        'throttle_create_config',
        'throttle_delete_config',
        'throttle_get_config',

        // edge throttling control APIs
        'edge_list_services',
        'edge_list_routes',
        'edge_create_rate_limit_rule',
        'edge_list_rate_limit_rules',
        'edge_update_rate_limit_rule',
        'edge_delete_rate_limit_rule',
        'edge_create_rate_limit_limit',
        'edge_list_rate_limit_limits',
        'edge_update_rate_limit_limit',
        'edge_delete_rate_limit_limit',
        'edge_get_consumer',
        'waf_rule_signed_url',


        // Excel Store routes
        'excel_store_list_pages',
        'excel_store_create_page',
        'excel_store_update_page',
        'excel_store_get_records',
        'excel_store_update_records',
        'excel_store_delete_records',
        'excel_store_page_by_url',

        'offer_create_bulk',
        'banking_account_yesb_bulk_create',

        // action on dashboard
        'set_channel_action',
        'get_channel_action',
        'setl_initiate_action',
        'setl_process_data',
        'setl_process_data_reset',
        'fund_transfer_attempt_initiate_action',
        'scrooge_set_merchant_mode_config',
        'scrooge_expire_merchant_mode_config',
        'scrooge_fetch_merchant_mode_configs',
        'toggle_transaction_hold',
        'toggle_transaction_release',

        'commissions_capture',
        'commissions_capture_by_partner',
        'commissions_bulk_capture_by_partner',
        'commissions_get_aggregates',
        'commissions_mark_for_settlement',
        'invoice_on_hold_clear_bulk',

        'merchant_restrict',
        'user_update_contact_admin',
        'user_account_lock_unlock_admin',
        'user_roles_mapping_bulk',

        'merchant_invoice_pdf_control',

        //merchant invoice
        'merchant_invoice_control',
        'merchant_invoice_entity_create_admin',

        // P2p Routes
        'p2p_admin_add_handle',
        'p2p_admin_update_handle',
        'p2p_admin_manage_banks',

        // AuthLink
        'token_registration_token_associate',
        'token_registration_tokens_authenticate',
        'subscription_registration_cancel_links_batch',

        //FTS Dashboard routes
        'fts_dashboard_fund_transfer_update',
        'fts_dashboard_fund_transfer_status_bulk',
        'fts_dashboard_fund_transfer_check_status',
        'fts_dashboard_raw_bank_status',
        'fts_dashboard_source_account_create',
        'fts_dashboard_source_account_copy',
        'fts_dashboard_source_account_delete',
        'fts_dashboard_source_account_update',
        'fts_dashboard_source_account_graceful_update',
        'fts_dashboard_bulk_status_get',
        'fts_dashboard_transfer_force_retry',
        'fts_dashboard_sa_mappings_create',
        'fts_dashboard_sa_mappings_delete',
        'fts_dashboard_direct_account_routing_rules_create',
        'fts_dashboard_direct_account_routing_rules_delete',
        'fts_dashboard_pr_weights_create',
        'fts_dashboard_pr_weights_delete',
        'fts_dashboard_account_mappings_create',
        'fts_dashboard_account_mappings_delete',
        'fts_dashboard_pending_transfers_get',
        'fts_dashboard_fetch_account_balance',
        'fts_dashboard_fail_queued_transfer',
        'fts_dashboard_fail_queued_transfer_bulk',
        'fts_dashboard_schedule_create',
        'fts_dashboard_schedule_delete',
        'fts_dashboard_schedule_update',
        'fts_dashboard_manual_override',
        'fts_dashboard_merchant_configurations_create',
        'fts_dashboard_merchant_configurations_delete',
        'fts_dashboard_merchant_configurations_patch',
        'fts_dashboard_fail_fast_status_manual_update',
        'fts_dashboard_key_value_store_patch',
        'fts_dashboard_key_value_store_post',

        'create_merchant_options_admin',
        'read_merchant_options_admin',
        'update_merchant_options_admin',
        'delete_merchant_options_admin',
        'fts_dashboard_new_channel_health_stats',
        'fts_dashboard_trigger_health_status',

        //relay routes
        'relay_get_apps',
        'relay_get_app_by_id',
        'relay_create_app',
        'relay_update_apps',
        'relay_delete_apps',
        'relay_get_props',
        'relay_create_props',
        'relay_delete_props',
        'relay_update_props',
        'relay_get_pending_props',
        'relay_get_props_history',
        'relay_props_action',
        'relay_create_bulk_props',

        //dashboard pvt testing with mozart
        'mozart_gateway_action',

        'reports_monthly_banking_invoice_admin',

        'merchant_inheritance_parent_fetch',
        'merchant_inheritance_parent_set',
        'merchant_inheritance_parent_delete',

        'add_merchant_balance_config',
        'edit_merchant_balance_config',

        // Offline QR
        'fetch_batch_actions',
        'fetch_batch_action_entities',

        // Razorpay Capital
        // Financial Data Service
        'financial_data_service',
        'merchant_locked_balance_update',

        'merchant_balance_fetch_admin',

        // Fee Recovery [RX - CA]
        'fee_recovery_payout_admin',
        'fee_recovery_payout_schedule_task',
        'fee_recovery_manual_update',

        // Banking VA
        'virtual_account_bulk_create_for_banking',
        'virtual_account_bulk_close_for_banking',
        'fetch_payment_config_admin',
        'create_payment_config_admin',
        'update_payment_config_admin',
        'delete_payment_config',
        'admin_fetch_fund_account_validate',
        'create_promotions_events',

        //payout downtime
        'create_payout_downtime',
        'update_payout_downtime_by_id',
        'fetch_payout_downtime_by_id',
        'fetch_payout_downtimes',

        //fund loading downtime
        'create_fund_loading_downtime',
        'update_fund_loading_downtime_by_id',
        'fetch_fund_loading_downtime_by_id',
        'list_active_fund_loading_downtimes',
        'list_fund_loading_downtimes',
        'delete_fund_loading_downtime_by_id',
        'notification_flow_fund_loading_downtime',

        // Recon for alert_email field of stork
        'admin_webhook_email_stork_recon',

        'admin_process_webhook_events_csv',
        'admin_process_webhook_events_by_ids',

        // instrument requests
        'get_internal_instrument_request_by_id',
        'get_templates',
        'get_method_templates',
        'patch_internal_instrument_request_by_id',
        'pause_internal_instrument_request_by_id',
        'bulk_copy_internal_instrument_request',
        'delete_internal_instrument_request_by_id',
        'fetch_internal_instrument_requests',
        'patch_internal_instrument_requests',
        'bulk_cancel_internal_instrument_requests',
        'merchant_instrument_request_create_bulk',
        'merchant_instrument_request_create_bulk_v2',
        'instrument_request_razorx_admin',
        'fetch_instrument_comment_list',
        "trigger_instrument_rules_event",
        'fetch_instrument_previous_status',
        'terminal_enable_bulk',
        'update_template_mappings',
        'fetch_template_mappings',
        'fetch_merchant_instrument_requests',
        'wfs_config_create',
        'wfs_config_update',
        'wfs_config_get_admin',
        'wfs_workflows_list',
        'wfs_workflows_get',
        'wfs_workflow_action_create',
        'wfs_workflow_add_assignee',
        'wfs_workflow_remove_assignee',
        'wfs_comments_create',
        'wfs_comments_list',
        'wfs_cb_workflows_list',
        'wfs_cb_workflows_get',
        'wfs_cb_workflow_action_create',
        'wfs_cb_workflow_add_assignee',
        'wfs_cb_workflow_remove_assignee',
        'wfs_cb_comments_create',
        'wfs_cb_comments_list',
        'payout_workflow_retry_admin_bulk',
        'payout_wf_config_migrate',
        'create_iir_discrepancy_answer_admin',
        'terminals_universal_proxy',
        'get_discrepancy_list',
        'create_iir_discrepancy',
        'create_iir_discrepancy_bulk',
        'fetch_iir_discrepancies_of_iir',
        'create_static_discrepancy',
        'edit_static_discrepancy',
        'fetch_iir_discrepancies_for_merchant',
        'patch_iir_discrepancy_by_id',
        'terminals_proxy_fetch_multiple',
        'terminals_proxy_update_methods_from_rules',

        // gateway credentials
        'terminals_proxy_create_gateway_credential',
        'terminals_proxy_fetch_gateway_credential',
        'terminals_proxy_delete_gateway_credential',

        // automated terminal testing
        'execute_terminal_test_run',
        'fetch_terminal_test_run',
        'fetch_terminal_test_run_by_params',
        'create_terminal_test_instrument',
        'delete_terminal_test_instrument',

        // settlements service dashboard routes
        'setl_admin_fetch',
        'setl_schedule_get',
        'setl_schedule_get_ids',
        'setl_schedule_create',
        'setl_admin_fetch_multiple',
        'setl_merchant_config_get',
        'setl_merchant_config_create',
        'setl_org_config_get',
        'setl_org_config_create_or_update',
        'setl_merchant_config_update',
        'setl_merchant_config_bulk_update',
        'setl_get_scheduleableEntities',
        'setl_bank_account_create',
        'setl_bank_account_update',
        'setl_update_bene_name',
        'setl_bank_account_get',
        'setl_bank_account_delete',
        'setl_execution_register',
        'setl_set_dcs_object',
        'setl_trigger_multiple',
        'setl_execution_resume',
        'setl_bulk_reminder_registration',
        'setl_bulk_reminder_es_registration',
        'setl_trigger_es_multiple',
        'setl_transaction_release',
        'setl_transaction_hold',
        'setl_channel_status_update',
        'setl_channel_state_get',
        'setl_trigger_report',
        'setl_retry_new_service',
        'setl_initiate_new_service',
        'setl_schedule_rename',
        'setl_replay_status_update',
        'setl_migrate_payout',
        'setl_transfer_status_update',
        'setl_entity_download_file',
        'setl_nodal_initiate_transfer_admin',

        'get_irctc_settlement_file_admin',
        'update_late_auth_config_admin_bulk',
        'create_payment_config_bulk',
        'sync_pg_router_order_bulk',

        'fund_account_validate_bulk_patch_status',

        'update_payout_status',
        'update_payout_status_batch',
        'cities_get',
        'admin_key_migrate_to_credcase',
        'admin_consumer_migrate_apps_to_credcase',
        'admin_key_migrate_impersonation_grants',
        'admin_access_maps_bootstrap_cache',

        // Update free_payout attributes for balance
        'update_free_payouts_attributes',
        'create_sub_balances',
        'sub_balance_adjustment',

        // Migrate free payout source of truth to microservice
        'admin_free_payout_migration',

        // Get free_payout attributes for balance
        'admin_get_free_payouts_attributes',

        'payouts_bulk_amount_type',
        'tax_payments_admin_auth_api',

        'accounting_integrations_admin_routes',

        'invoice_admin_actions',

        // payout-links admin route
        'payout_links_admin_auth_api',

        // subscriptions admin route
        'subscription_clear_feature',

        'fee_recovery_payout_manual_retry',

        'banking_account_statement_source_update',

        'banking_account_statement_source_update_validate',

        'reward_delete',
        'reward_create',
        'reward_update',
        'rewards_batch_email',
        // Admin merchant notification configs
        'create_merchant_notification_config_admin',
        'update_merchant_notification_config_admin',
        'fetch_merchant_notification_config_admin',
        'list_merchant_notification_config_admin',
        'delete_merchant_notification_config_admin',
        'disable_merchant_notification_config_admin',
        'enable_merchant_notification_config_admin',

        'survey_create',
        'survey_edit',

        //Application Framework
        'app_create',
        'app_update',
        'app_get',
        'app_mapping_create',
        'app_mapping_delete',
        'app_tags_delete',
       'admin_fund_account_validate',

        //TPV - Third party validation
        //- validations on source accounts through which money gets loaded to va.
        'admin_tpv_create',
        'admin_tpv_edit',
        'admin_fetch_tpvs',
        'admin_merchants_tpvs_create',

        // Templating Routes
        'templating_create_namespace',
        'templating_list_namespace',
        'templating_get_template_config',
        'templating_list_template_config',
        'templating_create_template_config',
        'templating_update_template_config',
        'templating_view_template_config',
        'templating_test_pre_processor',
        'templating_render_template',
        'templating_delete_template_config',
        'templating_assign_user_role',
        'templating_revoke_user_role',

        // Care service
        'care_service_admin_proxy',
        'care_service_dark_proxy',

        // CMMA Service
        'cmma_service_admin_proxy',
        'merchant_nc_count_admin',

        'freshchat_put_chat_timings_config',
        'freshchat_get_chat_timings_config',
        'freshchat_put_chat_holidays_config',
        'freshchat_get_chat_holidays_config',

        // Low Balance Configs for X - Autoload
        'create_low_balance_config_admin',
        'update_low_balance_config_admin',
        'enable_low_balance_config_admin',
        'disable_low_balance_config_admin',
        'delete_low_balance_config_admin',
        'list_low_balance_config_admin',

        'create_ledger_account',
        'create_ledger_accounts_on_event',
        'create_ledger_accounts_in_bulk',
        'activate_ledger_account',
        'deactivate_ledger_account',
        'update_ledger_account',
        'archive_ledger_account',
        'update_ledger_account_detail',
        'create_ledger_journal',
        'fetch_journal_by_transactor',
        'update_account_by_entities_and_mid',
        'fetch_accounts_by_entities_and_merchant_id',
        'create_ledger_ledger_config',
        'update_ledger_ledger_config',
        'delete_ledger_ledger_config',
        'request_governor',
        'fetch_ledger',
        'fetch_multiple_ledger',
        'fetch_filter_ledger',
        'fetch_account_form_field_options_ledger',
        'fetch_journal_form_field_options_ledger',
        'replay_journal_rejected_events_ledger',
        'fetch_ledger_config_form_field_options_ledger',
        'fetch_account_types_ledger',
        'delete_merchants_ledger',

        'merchant_risk_data',
        'complete_submerchant_onboarding',

        'product_tnc_map_create',
        'product_tnc_map_fetch',
        'product_tnc_map_fetch_all',
        'product_tnc_map_update',

        // Metro
        'metro_project_create',
        'metro_project_credentials_create',
        'metro_project_topic_update',

        // Payout service
        'retry_payouts_on_service',

        'process_pending_bank_transfer',
        // Merchant Risk Notes
        'merchant_risk_notes_get',
        'merchant_risk_notes_create',
        'merchant_risk_notes_delete',

        // Risk Audit Workflow Actions
        'w-actions_merchant_risk_audit_get',

        'decrypt_merchant_website_comment',

        'bulk_regenerate_api_keys',

        // razorpay trusted badge
        'update_trusted_badge_status',

        'tokenisation_local_cards_bulk',

        'risk_attributes_get',

        'create_risk_action',
        'banking_axis_invitations_send',
        //growth service
        'growth_downtime_for_x',

        // Merchant Risk Alerts
        'merchant_risk_alerts_create_rule',
        'merchant_risk_alerts_update_rule',
        'merchant_risk_alerts_delete_rule',

        //cyber-helpdesk route
        'cyber_helpdesk_admin_upload_document',
        'cyber_helpdesk_admin_delete_document',
        'cyber_helpdesk_admin_create_ticket',

        // Payment Fraud
        'get_fraud_attributes',
        'save_payment_fraud',
        'admin_patch_purpose_code',
        'purpose_code_admin',
        // HS Code
        'hs_code_admin_fetch',
        'admin_patch_hs_code',
        'fetch_admin_hs_code',

        'update_merchant_sla_for_on_hold_payouts',

        // BVS Admin proxy routes
        'bvs_admin_proxy',
        'bvs_admin_proxy_pii',

        // OCR Admin proxy routes
        'ocr_admin_proxy',

        'admin_bulk_assign_role',

        'developer_console_admin_action',

        'banking_account_statement_fetch_missing',
        'banking_account_statement_update_missing',
        'banking_account_statement_async_insert_missing',
        'banking_account_statement_detect_missing',


        // Self serve workflow admin routes
        'workflow_config_create_admin',
        'workflow_config_update_admin',
        'workflow_config_delete_admin',
        'workflow_config_create_bulk_admin',

        //1cc rto model configs
        '1cc_rto_mlmodel_configs_create_admin',
        '1cc_rto_mlmodel_configs_get_admin',
        '1cc_rto_mlmodel_configs_update_admin',
        '1cc_rto_merchant_model_configs_get_admin',
        '1cc_rto_merchant_model_configs_update_admin',
        '1cc_rto_merchant_model_configs_delete_admin',
        '1cc_rto_merchant_mlmodel_update_admin',

        // Terminal downtimes
        'manual_downtime_fetch',
        'downtime_manual_resolve',

        //emandate
        'fetch_emandate_merchant_configs',
        'create_emandate_merchant_configs',
        'edit_emandate_merchant_configs',

        'fetch_netbanking_configs',
        'create_netbanking_configs',
        'edit_netbanking_configs',

        'fetch_all_banking_configs',
        'get_banking_config',
        'edit_banking_configs',
        'fetch_merchant_da_payout_mode_config',
        'create_merchant_da_payout_mode_config',
        'edit_merchant_da_payout_mode_config',

         //magic checkout
         '1cc_shopify_fetch_meta_fields',
         '1cc_shopify_update_meta_fields',
         '1cc_shopify_fetch_themes',
         '1cc_shopify_insert_theme',
         '1cc_shopify_render_magic_snippet',
    ];

    public static $routePermission = [
        'dispute_ingestion'                             => Permission::BULK_DISPUTE_INGESTION_FOR_BANK,
        'dispute_dcs_config_add'                        => Permission::DISPUTES_DCS_CONFIG_UPDATE,
        'dispute_dcs_config_update'                     => Permission::DISPUTES_DCS_CONFIG_UPDATE,
        'dispute_dcs_config_get'                        => Permission::DISPUTES_DCS_CONFIG_GET,
        'merchant_activation_clarifications_save_admin'      => Permission::EDIT_MERCHANT,
        'merchant_activation_clarifications_fetch_admin'=> Permission::VIEW_MERCHANT,
        'merchant_nc_revamp_eligibility_admin'          => Permission::VIEW_MERCHANT,
        'merchant_activation_clarifications_fetch'            => Permission::VIEW_MERCHANT,
        'merchant_activation_clarifications_save'       => Permission::EDIT_MERCHANT,
        'merchant_nc_revamp_eligibility'                => Permission::VIEW_MERCHANT,
        'merchant_activation_eligibilty'                => Permission::VIEW_MERCHANT,
        'merchant_ip_config_opt_status_admin'             => Permission::ADMIN_MERCHANT_IP_WHITELIST,
        'merchant_ip_config_fetch_admin'                  => Permission::ADMIN_MERCHANT_IP_WHITELIST,
        'merchant_ip_config_create_admin'                 => Permission::ADMIN_MERCHANT_IP_WHITELIST,
        'merchant_razorx_evaluate'                        => Permission::ADMIN_GET_APP_AUTH,
        'merchant_create_lead_to_salesforce_admin'        => Permission::VIEW_ACTIVATION_FORM,
        'merchant_website_section_action'                 => Permission::EDIT_MERCHANT,
        'merchant_website_section_save'                   => Permission::EDIT_MERCHANT,
        'merchant_website_section_fetch'                  => Permission::VIEW_MERCHANT,
        'merchant_website_section_page_load'              => Permission::VIEW_MERCHANT,
        'admin_website_section_action'                    => Permission::EDIT_MERCHANT,
        'admin_website_section_save'                      => Permission::EDIT_MERCHANT,
        'admin_website_section_fetch'                     => Permission::VIEW_MERCHANT,
        'public_merchant_website_section_page_load'       => Permission::VIEW_MERCHANT,
        'public_merchant_website_section_pages'           => Permission::VIEW_MERCHANT,
        'merchant_consents_admin_fetch'                   => Permission::VIEW_MERCHANT,
        'merchant_website_plugin_save'                    => Permission::VIEW_MERCHANT,
        'merchant_consents_save'                          => Permission::EDIT_MERCHANT,
        'merchant_bmc_response_fetch'                     => Permission::VIEW_MERCHANT,
        'merchant_bmc_response_fetch_admin'               => Permission::VIEW_MERCHANT,
        'merchant_bmc_response_save'                      => Permission::EDIT_MERCHANT,
        'merchant_identity_verification'                  => Permission::EDIT_MERCHANT,
        'merchant_process_verification_details'           => Permission::EDIT_MERCHANT,
        //'banking_account_bank_lms_fetch_multiple'      => Permission::RBL_BANK_MID_OFFICE,
        //'banking_account_bank_lms_fetch_by_id'         => Permission::RBL_BANK_MID_OFFICE,
        //'banking_account_bank_lms_comments_list'       => Permission::RBL_BANK_MID_OFFICE,
        //'banking_account_bank_lms_assign_bank_poc'     => Permission::RBL_BANK_MID_OFFICE,
        'linked_account_reference_data_create'      => Permission::LINKED_ACCOUNT_REFERENCE_DATA_CREATE,
        'linked_account_reference_data_update'      => Permission::LINKED_ACCOUNT_REFERENCE_DATA_UPDATE,
        'amc_linked_account_create'                 => Permission::AMC_LINKED_ACCOUNT_CREATION,
        'nocode_debugging_route'                    => Permission::DEBUG_NOCODE_ROUTES,
        'payment_page_cds_create_plans'             => Permission::DEBUG_NOCODE_ROUTES,
        'payment_page_cds_update_plans'             => Permission::DEBUG_NOCODE_ROUTES,
        'payment_page_cds_delete_plans'             => Permission::DEBUG_NOCODE_ROUTES,
        'merchant_enhanced_activation_details'     => Permission::VIEW_MERCHANT,
        'mob_admin_routes'                          => Permission::MOB_ADMIN,
        'mob_admin_routes_for_one_ca'               =>Permission::SUBMIT_ONE_CA,
        'merchant_create_lead_to_salesforce_admin_for_one_ca' => Permission::SUBMIT_ONE_CA,
        'mob_migration'                             => Permission::MOB_ADMIN,
        'mob_ca_lms_routes'                         => Permission::VIEW_ACTIVATION_FORM,
        'admin_trigger_2fa_otp'                    => Permission::AUTH_LOCAL_ADMIN,
        'admin_account_lock_unlock'                => Permission::AUTH_LOCAL_ADMIN,
        'm2m_referral_link_get'                     => Permission::VIEW_MERCHANT,
        'm2m_referral_link_get_public'              => Permission::VIEW_MERCHANT,
        'admin_merchant_post_preferences'           => Permission::UPDATE_MERCHANT_PREFERENCE,
        'admin_merchant_post_preferences_bulk'      => Permission::VIEW_ACTIVATION_FORM,
        'merchant_activation_gst_details'           => Permission::VIEW_MERCHANT,
        'merchant_business_detail_fetch'            => Permission::VIEW_MERCHANT,
        'merchant_business_detail_save'             => Permission::EDIT_MERCHANT,
        'los_service_dev_admin'                    => Permission::CAPITAL_DEVELOPER,
        'loc_service_dev_admin'                    => Permission::CAPITAL_DEVELOPER,
        'capital_marketplace_dev_admin'            => Permission::CAPITAL_DEVELOPER,
        'capital_scorecard_dev_admin'              => Permission::CAPITAL_DEVELOPER,
        'capital_lender_dev_admin'                 => Permission::CAPITAL_DEVELOPER,
        'capital_es_dev_admin'                     => Permission::CAPITAL_DEVELOPER,
        'settlement_ondemand_reverse'              => Permission::CAPITAL_DEVELOPER,
        'admin_merchant_get_preferences'           => Permission::VIEW_MERCHANT,
        'admin_merchant_get_preferences_for_one_ca' => Permission::SUBMIT_ONE_CA,
        'recon_service_request_proxy'              => Permission::RECON_SERVICE_REQUEST,
        'recon_service_file_upload_proxy'          => Permission::RECON_FILE_UPLOAD,
        'recon_service_workflow_file_upload_proxy' => Permission::RECON_OPERATION,
        'recon_service_admin_request_proxy'        => Permission::RECON_ADMIN_OPERATION,
        'merchant_rtb_details_fetch'               => Permission::VIEW_MERCHANT,
        'populate_merchant_trim_data_cron'         => Permission::MANAGE_BULK_FEATURE_MAPPING,
        'bvs_service_dashboard'                    => Permission::EDIT_MERCHANT,
        'bvs_validation_artifact_details'          => Permission::VIEW_MERCHANT,
        'bvs_admin_proxy'                          => Permission::VIEW_ALL_ENTITY,
        'bvs_admin_proxy_pii'                      => Permission::VIEW_ACTIVATION_FORM,
        'ocr_admin_proxy'                          => Permission::VIEW_ALL_ENTITY,
        'transfer_debug'                           => Permission::DEBUG_TRANSFERS_ROUTES,
        'virtual_account_debug'                    => Permission::DEBUG_VIRTUAL_ACCOUNT,
        'payment_links_v2_admin'                   => Permission::PAYMENT_LINKS_V2_ADMIN,
        'payment_links_ops_batch_cancel'           => Permission::PAYMENT_LINKS_OPS_BATCH_CANCEL,
        'capital_cards_service'                    => Permission::CAPITAL_DEVELOPER,
        'capital_cards_onboarding'                 => Permission::CAPITAL_DEVELOPER,
        'capital_virtual_cards_generate_token'     => Permission::CAPITAL_DEVELOPER,
        'capital_cards_dev_admin'                  => Permission::CAPITAL_DEVELOPER,
        'capital_collections_admin'                => Permission::CAPITAL_COLLECTIONS_ADMIN,
        'capital_collections_dev_admin'            => Permission::CAPITAL_DEVELOPER,
        'capital_marketplace_admin'                => Permission::LOANS_EDIT,
        'capital_lender_admin'                     => Permission::LOANS_EDIT,
        'capital_scorecard_admin'                  => Permission::CAPITAL_SCORECARD,
        'merchants_risk_service'                   => Permission::VIEW_MERCHANT_DEDUPE,
        'merchants_risk_admin'                     => Permission::VIEW_MERCHANT_DEDUPE,
        'merchants_risk_create_alert_config'       => Permission::MERCHANT_RISK_ALERT_CONFIG,
        'merchants_risk_update_alert_config'       => Permission::MERCHANT_RISK_ALERT_CONFIG,
        'merchants_risk_delete_alert_config'       => Permission::MERCHANT_RISK_ALERT_CONFIG,
        'merchant_update_fraud_type'               => Permission::EDIT_MERCHANT_DEDUPE,
        'setl_ondemand_pricing'                    => Permission::CAPITAL_SETTLEMENT_ONDEMAND_PRICING,
        'setl_ondemand_fund_accounts'              => Permission::CAPITAL_DEVELOPER,
        'settlement_ondemand_enqueue'              => Permission::CAPITAL_DEVELOPER,
        'setl_ondemand_transfer_processed'         => Permission::CAPITAL_DEVELOPER,
        'setl_ondemand_transfer_trigger'           => Permission::SETTLEMENT_ONDEMAND_TRANSFER_RETRY,
        'setl_ondemand_transfer_payout_update'     => Permission::CAPITAL_DEVELOPER,
        'settlement_ondemand_feature_enable'       => Permission::SETTLEMENT_ONDEMAND_FEATURE_ENABLE,
        'merchant_tags_batch'                      => Permission::CAPITAL_DEVELOPER,
        'early_settlement_feature_period_create'   => Permission::CAPITAL_DEVELOPER,
        'merchant_balance_create'                  => Permission::CAPITAL_DEVELOPER,
        'internal_balance_fetch_by_merchant_id'    => Permission::CAPITAL_DEVELOPER,
        'credit_repayment_transaction_create'      => Permission::CAPITAL_DEVELOPER,
        'capital_transaction_create'               => Permission::CAPITAL_DEVELOPER,
        'capital_multiple_transaction_create'      => Permission::CAPITAL_DEVELOPER,
        'internal_balance_fetch_by_id'             => Permission::CAPITAL_DEVELOPER,
        'capital_collections_service'              => Permission::CAPITAL_DEVELOPER,
        'capital_collections_webhook'              => Permission::CAPITAL_DEVELOPER,
        'capital_marketplace_oauth'                => Permission::CAPITAL_DEVELOPER,
        'correct_merchant_owners_products'         => Permission::CORRECT_MERCHANT_OWNER_MISMATCH,
        'paper_nach_fetch_failure'                 => Permission::VERIFY_NACH_UPLOADS,
        'paper_nach_approve_failure'               => Permission::VERIFY_NACH_UPLOADS,
        'bulk_create_fund_accounts'                => Permission::CAPITAL_DEVELOPER,
        'add_ondemand_pricing_if_absent'           => Permission::CAPITAL_DEVELOPER,
        'payout_reject_admin_bulk'                 => Permission::REJECT_PAYOUT_BULK,
        'payout_workflow_retry_admin_bulk'         => Permission::RETRY_PAYOUT_WORKFLOW_BULK,
        'cities_get'                               => Permission::VIEW_CITIES,
        'loc_service_admin'                        => Permission::LOC,
        'loc_service'                              => Permission::CAPITAL_DEVELOPER,
        'capital_cards_admin'                      => Permission::CAPITAL_CARDS,
        'wallet_service_admin'                     => Permission::WALLETS,
        'ufh_admin_upload_file'                    => Permission::ADMIN_FILE_UPLOAD,
        'los_service_admin'                        => Permission::LOS_BASIC,
        'payout_update_pull_payout_status'         => Permission::PAYOUT_LINK_ADMIN_AUTH_EXECUTE,
        'payout_links_bulk_resend_notification_admin'=> Permission::PAYOUT_LINK_ADMIN_AUTH_EXECUTE,
        'merchant_activation_update_website_status'=> Permission::EDIT_MERCHANT_WEBSITE_DETAIL,
        'merchant_activation_update_website'       => Permission::EDIT_MERCHANT_WEBSITE_DETAIL,
        'add_additional_website'                   => Permission::EDIT_MERCHANT_WEBSITE_DETAIL,
        'add_additional_website_self_serve'        => Permission::ADD_ADDITIONAL_WEBSITE,
        'delete_additional_websites'               => Permission::EDIT_MERCHANT_WEBSITE_DETAIL,
        'payout_links_settings_post'               => Permission::EDIT_MERCHANT,
        'payout_links_settings_get'                => Permission::EDIT_MERCHANT,
        'pricing_add_plan_rule_bulk'               => Permission::MERCHANT_PRICING_BULK_CREATE,
        'loc_bulk_withdrawal_update'               => Permission::CAPITAL_DEVELOPER,
        'downtime_manager_admin'                   => Permission::CREATE_GATEWAY_DOWNTIME,
        'reminder_admin'                           => Permission::REMINDER_OPERATION,
        'reminder_service'                         => Permission::REMINDER_OPERATION,
        'merchant_document_admin_fetch'            => Permission::VIEW_MERCHANT_DOCUMENT,
        'merchant_document_admin_upload'           => Permission::ADMIN_UPLOAD_MERCHANT_DOCUMENT,
        'merchant_document_admin_delete'           => Permission::ADMIN_UPLOAD_MERCHANT_DOCUMENT,
        'merchant_document_types_fetch'            => Permission::ADMIN_UPLOAD_MERCHANT_DOCUMENT,
        'group_create'                             => Permission::CREATE_GROUP,
        'admin_create'                             => Permission::CREATE_ADMIN,
        'group_get'                                => Permission::VIEW_GROUP,
        'group_get_multiple'                       => Permission::VIEW_ALL_GROUP,
        'order_create_admin'                       => Permission::MANAGE_TERMINAL_TESTING,
        'org_create'                               => Permission::CREATE_ORG,
        'org_get_multiple'                         => Permission::VIEW_ALL_ORG,
        'org_edit'                                 => Permission::EDIT_ORG,
        'org_delete'                               => Permission::DELETE_ORG,
        'org_get'                                  => Permission::VIEW_ORG,
        'role_create'                              => Permission::CREATE_ROLE,
        'role_get_multiple'                        => Permission::VIEW_ALL_ROLE,
        'role_get'                                 => Permission::VIEW_ROLE,
        'role_edit'                                => Permission::EDIT_ROLE,
        'role_add_permissions'                     => Permission::EDIT_ROLE_ADD_PERMISSIONS,
        'role_delete'                              => Permission::DELETE_ROLE,
        'admin_get_multiple'                       => Permission::VIEW_ALL_ADMIN,
        'admin_get'                                => Permission::VIEW_ADMIN,
        'admin_edit'                               => Permission::EDIT_ADMIN,
        'admin_delete'                             => Permission::DELETE_ADMIN,
        'admin_reports_fetch_filters'              => Permission::VIEW_ADMIN_REPORTS,
        'admin_reports_fetch_report_data'          => Permission::VIEW_ADMIN_REPORTS,
        'admin_reports_fetch_reports_by_type'      => Permission::VIEW_ADMIN_REPORTS,
        'admin_reports_fetch_reports_for_admin'    => Permission::VIEW_ADMIN_REPORTS,
        'admin_reports_fetch_reports_by_id'        => Permission::VIEW_ADMIN_REPORTS,
        'group_edit'                               => Permission::EDIT_GROUP,
        'group_delete'                             => Permission::DELETE_GROUP,
        'group_get_allowed_groups'                 => Permission::GROUP_GET_ALLOWED_GROUPS,
        'schedule_create'                          => Permission::SCHEDULE_CREATE,
        'setl_schedule_create'                     => Permission::SCHEDULE_CREATE,
        'schedule_delete'                          => Permission::SCHEDULE_DELETE,
        'schedule_update'                          => Permission::SCHEDULE_UPDATE,
        'schedule_assign'                          => Permission::SCHEDULE_ASSIGN,
        'admin_fetch_merchant_ids_new'             => Permission::ADMIN_FETCH_MERCHANTS,
        'admin_fetch_merchants_new'                => Permission::ADMIN_FETCH_MERCHANTS,
        'admin_fetch_unified_dashboard_merchants'  => Permission::ONBOARDING_AND_ACTIVATIONS_VIEW,
        '1cc_rto_mlmodel_configs_create_admin'     => Permission::MAGIC_RTO_CONFIGS_EDIT,
        '1cc_rto_mlmodel_configs_get_admin'        => Permission::MAGIC_RTO_CONFIGS_VIEW,
        '1cc_rto_mlmodel_configs_update_admin'     => Permission::MAGIC_RTO_CONFIGS_EDIT,
        '1cc_rto_merchant_model_configs_get_admin' => Permission::MAGIC_RTO_CONFIGS_VIEW,
        '1cc_rto_merchant_model_configs_update_admin' => Permission::MAGIC_RTO_CONFIGS_EDIT,
        '1cc_rto_merchant_model_configs_delete_admin' => Permission::MAGIC_RTO_CONFIGS_EDIT,
        '1cc_rto_merchant_mlmodel_update_admin'    => Permission::MAGIC_RTO_CONFIGS_EDIT,
        'admin_fetch_partner_activation'           => Permission::ADMIN_FETCH_MERCHANTS,
        'permission_create'                        => Permission::CREATE_PERMISSION,
        'permission_edit'                          => Permission::EDIT_PERMISSION,
        'permission_get'                           => Permission::GET_PERMISSION,
        'permission_get_multiple'                  => Permission::VIEW_ALL_PERMISSION,
        'permission_get_by_type'                   => Permission::EDIT_ORG,
        'permission_get_roles'                     => Permission::VIEW_ROLE,
        'permission_delete'                        => Permission::DELETE_PERMISSION,
        'auditlog_search'                          => Permission::VIEW_AUDITLOG,
        'admin_logout'                             => Permission::AUTH_LOCAL_ADMIN,
        'org_fieldmap_create'                      => Permission::EDIT_ORG,
        'org_fieldmap_get_multiple'                => Permission::EDIT_ORG,
        'org_fieldmap_get'                         => Permission::EDIT_ORG,
        'org_fieldmap_get_by_entity'               => Permission::VIEW_ORG,
        'org_fieldmap_edit'                        => Permission::EDIT_ORG,
        'org_fieldmap_delete'                      => Permission::EDIT_ORG,
        'admin_lead_create'                        => Permission::CREATE_MERCHANT_INVITE,
        'admin_lead_put'                           => Permission::EDIT_MERCHANT_INVITE,
        'admin_lead_get_multiple'                  => Permission::VIEW_MERCHANT_INVITE,
        'admin_dummy_account_test'                 => Permission::VIEW_MERCHANT,
        'feature_delete'                           => Permission::DELETE_MERCHANT_FEATURES,
        'feature_delete_entity'                    => Permission::DELETE_MERCHANT_FEATURES,
        'disable_instant_refunds'                  => Permission::DELETE_MERCHANT_FEATURES,
        'feature_get'                              => Permission::VIEW_MERCHANT_FEATURES,
        'feature_get_all'                          => Permission::VIEW_MERCHANT_FEATURES,
        'feature_get_status'                       => Permission::VIEW_MERCHANT_FEATURES,
        'workflow_create'                          => Permission::CREATE_WORKFLOW, // Fix permissions
        'workflow_payout_amount_rules_create'      => Permission::CREATE_WORKFLOW,
        'workflow_get'                             => Permission::VIEW_WORKFLOW,
        'workflow_payout_amount_rules_get_admin'   => Permission::VIEW_WORKFLOW,
        'admin_fetch_role_map'                     => Permission::VIEW_WORKFLOW,
        'admin_payouts_workflow_config_get'        => Permission::VIEW_WORKFLOW,
        'workflow_payout_amount_rules_edit'        => Permission::EDIT_WORKFLOW,
        'workflow_get_multiple'                    => Permission::VIEW_ALL_WORKFLOW,
        'workflow_merchants_create_payout_get'     => Permission::VIEW_ALL_WORKFLOW,
        'workflow_update'                          => Permission::EDIT_WORKFLOW,
        'workflow_delete'                          => Permission::DELETE_WORKFLOW,
        'action_checker_create'                    => Permission::EDIT_ACTION,
        'workflow_observer_data_update'            => Permission::EDIT_ACTION,
        'workflow_observer_data_fetch'             => Permission::VIEW_WORKFLOW_REQUESTS,
        'action_diff_get'                          => Permission::VIEW_WORKFLOW_REQUESTS,
        'action_request_execute'                   => Permission::EDIT_ACTION,
        'action_comment_create'                    => Permission::EDIT_ACTION,
        'workflow_action_close'                    => Permission::EDIT_ACTION,
        'workflow_action_update'                   => Permission::EDIT_ACTION,
        'workflow_action_details'                  => Permission::VIEW_WORKFLOW_REQUESTS,
        'workflow_action_get_multiple'             => Permission::VIEW_WORKFLOW_REQUESTS,
        'refund_generate_excel'                    => Permission::GENERATE_REFUND_EXCEL,
        'credits_fetch_multiple'                   => Permission::VIEW_MERCHANT_CREDITS_LOG,
        'credits_create'                           => Permission::ADD_MERCHANT_CREDITS,
        'merchant_put_payment_methods'             => Permission::EDIT_MERCHANT_METHODS,
        'balance_fetch'                            => Permission::VIEW_MERCHANT_BALANCE,
        'merchant_balance_fetch'                   => Permission::VIEW_MERCHANT_BALANCE,
        'merchant_balance_fetch_admin'             => Permission::VIEW_MERCHANT_BALANCE,
        'feature_get_multiple'                     => Permission::VIEW_MERCHANT_FEATURES,
        'merchant_actions'                         => Permission::MERCHANT_ACTIONS,
        'merchant_live_enable'                     => Permission::EDIT_MERCHANT_ENABLE_LIVE,
        'merchant_live_disable'                    => Permission::EDIT_MERCHANT_DISABLE_LIVE,
        'admin_fetch_entity_by_id'                 => Permission::VIEW_ALL_ENTITY,
        'external_admin_fetch_entity_by_id'        => Permission::EXTERNAL_ADMIN_VIEW_ALL_ENTITY,
        'merchant_activation_update'               => Permission::EDIT_MERCHANT,
        'merchant_activation_send_notification'    => Permission::SEND_REQUEST_ACTIVATION_DOCUMENTS_NOTIFICATION,
        'merchant_activation_get_request_document_list' => Permission::SEND_REQUEST_ACTIVATION_DOCUMENTS_NOTIFICATION,
        'increase_transaction_limit_self_serve'    => Permission::INCREASE_TRANSACTION_LIMIT,
        'merchant_upload'                          => Permission::UPLOAD_MERCHANT,
        'merchant_assign_pricing'                  => Permission::EDIT_MERCHANT_PRICING,
        'merchant_get_banks'                       => Permission::VIEW_MERCHANT_BANKS,
        'merchant_set_banks'                       => Permission::ASSIGN_MERCHANT_BANKS,
        'merchant_fetch_bank_account'              => Permission::VIEW_MERCHANT_BANK_ACCOUNTS,
        'merchant_edit'                            => Permission::EDIT_MERCHANT,
        'merchant_edit_risk_attributes'            => Permission::EDIT_MERCHANT_RISK_ATTRIBUTES,
        'execute_bulk_action'                      => Permission::EDIT_ACTION,
        'adj_add'                                  => Permission::ADD_MERCHANT_ADJUSTMENT,
        'non_org_admin_fetch_terminal_by_id'       => Permission::VIEW_TERMINAL_EXTERNAL_ORG,
        'merchant_bank_account_create'             => Permission::MERCHANT_BANK_ACCOUNT_DETAIL_CREATE,
        'merchant_bank_account_update'             => Permission::MERCHANT_BANK_ACCOUNT_DETAIL_UPDATE,
        'org_bank_account_create'                  => Permission::MERCHANT_BANK_ACCOUNT_DETAIL_CREATE,
        'org_fetch_bank_account'                   => Permission::VIEW_MERCHANT_BANK_ACCOUNTS,
        'org_update_bank_account'                  => Permission::MERCHANT_BANK_ACCOUNT_EDIT,
        'admin_fetch_terminal_by_id'               => Permission::PAYMENTS_TERMINAL_FETCH_BY_ID,
        'merchants_update_bulk'                    => Permission::EDIT_BULK_MERCHANT,
        'merchants_update_channel'                 => Permission::EDIT_BULK_MERCHANT_CHANNEL,
        'schedule_fetch_multiple'                  => Permission::SCHEDULE_FETCH_MULTIPLE,
        'setl_fetch_schedule'                      => Permission::SCHEDULE_FETCH_MULTIPLE,
        'admin_fetch_all_entities'                 => Permission::VIEW_ALL_ENTITY,
        'external_admin_fetch_all_entities'        => Permission::EXTERNAL_ADMIN_VIEW_ALL_ENTITY,
        'admin_fetch_entity_multiple'              => Permission::VIEW_ALL_ENTITY,
        'admin_fetch_banking_account'              => Permission::VIEW_ALL_ENTITY,
        'admin_fetch_banking_accounts_multiple'    => Permission::VIEW_ALL_ENTITY,
        'admin_entity_sync'                        => Permission::SYNC_ENTITY_BY_ID,
        'external_admin_fetch_entity_multiple'     => Permission::EXTERNAL_ADMIN_VIEW_ALL_ENTITY,
        'admin_fetch_terminal_multiple'            => Permission::PAYMENTS_TERMINAL_FETCH_MULTIPLE,
        'admin_fetch_axis_paysecure_payments'      => Permission::AXIS_ADMIN_VIEW_PAYMENTS,
        'admin_fetch_entity_by_id_axis_paysecure'  => Permission::AXIS_ADMIN_VIEW_PAYMENTS,
        'admin_fetch_all_entities_axis'            => Permission::AXIS_ADMIN_VIEW_PAYMENTS,
        'setl_admin_fetch'                         => Permission::VIEW_ALL_ENTITY,
        'setl_admin_fetch_multiple'                => Permission::VIEW_ALL_ENTITY,
        'setl_entity_download_file'                => Permission::VIEW_ALL_ENTITY,
        'setl_schedule_get'                        => Permission::VIEW_ALL_ENTITY,
        'setl_schedule_get_ids'                    => Permission::VIEW_ALL_ENTITY,
        'admin_fetch_report_types'                 => Permission::VIEW_OPERATIONS_REPORT,
        'admin_fetch_report'                       => Permission::VIEW_OPERATIONS_REPORT,
        'payment_fix_attempted_orders'             => Permission::FIX_PAYMENT_ATTEMPTED_ORDERS,
        'payment_authorize_refund'                 => Permission::EDIT_AUTHORIZED_REFUND_PAYMENT,
        'payment_fetch_refunds'                    => Permission::VIEW_REFUND_PAYMENTS,
        'payment_refund'                           => Permission::EDIT_PAYMENT_REFUND,
        'payment_capture'                          => Permission::EDIT_PAYMENT_CAPTURE,
        'gateway_create_rule'                      => Permission::CREATE_GATEWAY_RULE,
        'gateway_update_rule'                      => Permission::EDIT_GATEWAY_RULE,
        'gateway_delete_rule'                      => Permission::DELETE_GATEWAY_RULE,
        'terminal_toggle'                          => Permission::TOGGLE_TERMINAL,
        'terminals_proxy_fetch_terminals_org'      => Permission::VIEW_TERMINAL_EXTERNAL_ORG,
        'terminal_update_bulk'                     => Permission::EDIT_TERMINAL,
        'upi_onboarded_terminal_edit_bulk'         => Permission::EDIT_TERMINAL,
        'terminal_check_encrypted_value'           => Permission::CHECK_TERMINAL_SECRET,
        'terminal_delete'                          => Permission::DELETE_TERMINAL,
        'terminal_edit'                            => Permission::EDIT_TERMINAL,
        'terminal_edit_god_mode'                   => Permission::EDIT_TERMINAL_GOD_MODE,
        'terminal_fetch_editable_fields'           => Permission::VIEW_TERMINAL,
        'admin_merchant_get_terminals'             => Permission::VIEW_TERMINAL,
        'terminal_edit_external_org'               => Permission::CREATE_EXTERNAL_ORG_TERMINALS,
        'buy_pricing_assign_bulk'                  => Permission::EDIT_TERMINAL,
        'terminal_reassign_merchant'               => Permission::ASSIGN_MERCHANT_TERMINAL,
        'terminal_add_merchant'                    => Permission::TERMINAL_MANAGE_MERCHANT,
        'terminal_remove_merchant'                 => Permission::TERMINAL_MANAGE_MERCHANT,
        'initiate_terminal_onboarding'             => Permission::EDIT_TERMINAL,
        'proxy_merchant_get_terminals'             => Permission::PROXY_MERCHANT_GET_TERMINALS,
        'terminals_proxy_gateway_terminal_status'  => Permission::VIEW_TERMINAL,
        'emi_plan_delete'                          => Permission::DELETE_EMI_PLAN,
        'iin_edit'                                 => Permission::EDIT_IIN_RULE,
        'iin_edit_bulk'                            => Permission::EDIT_IIN_RULE_BULK,
        'offer_create'                             => Permission::CREATE_MERCHANT_OFFER,
        'offer_create_bulk'                        => Permission::PAYMENTS_OFFER_BULK_CREATE,
        'offer_bulk_deactivate'                    => Permission::PAYMENTS_OFFER_BULK_DEACTIVATE,
        'offer_update'                             => Permission::EDIT_MERCHANT_OFFER,
        'merchant_edit_config'                     => Permission::ASSIGN_MERCHANT_HANDLE,
        'merchant_activation_business_categories'  => Permission::VIEW_MERCHANT,
        'merchant_activation_business_categories_v2' => Permission::VIEW_MERCHANT,
        'merchant_activation_needs_clarification'  => Permission::VIEW_MERCHANT,
        'merchant_business_types'                  => Permission::VIEW_MERCHANT,
        'merchant_business_types_admin'            => Permission::VIEW_MERCHANT,
        'merchant_supported_plugins'               => Permission::VIEW_MERCHANT,
        'merchant_info'                            => Permission::VIEW_MERCHANT,
        'merchant_audit_info'                      => Permission::VIEW_MERCHANT,
        'merchant_plugin_fetch'                    => Permission::VIEW_MERCHANT,
        'entity_audit_info'                        => Permission::VIEW_MERCHANT,
        'get_audit_entities'                       => Permission::VIEW_MERCHANT,
        'merchant_logs_search'                     => Permission::VIEW_MERCHANT,
        'merchant_logs_fetch'                      => Permission::VIEW_MERCHANT,
        'merchant_get_terminals'                   => Permission::VIEW_TERMINAL,
        'merchant_activation_details'              => Permission::VIEW_MERCHANT,
        'retry_store_legal_documents_cron'         => Permission::VIEW_MERCHANT,
        'fetch_merchant_escalation'                => Permission::VIEW_MERCHANT,
        'merchant_aov_config'                      => Permission::VIEW_MERCHANT,
        'merchant_fetch'                           => Permission::VIEW_MERCHANT,
        'rbl_current_account_serviceability_get_admin'   => Permission::VIEW_MERCHANT,
        'banking_account_beneficiary_fetch'        => Permission::FUND_ACCOUNT_VALIDATION,
        'admin_get_file'                           => Permission::ADMIN_GET_FILE,
        'admin_change_password'                    => Permission::AUTH_LOCAL_ADMIN,
        'merchant_fetch_users'                     => Permission::VIEW_MERCHANT,
        'admin_post_stork'                         => Permission::STORK_WRITE_OPERATION,
        'admin_webhook_email_stork_recon'          => Permission::STORK_WRITE_OPERATION,
        'admin_process_webhook_events_csv'         => Permission::STORK_SUPPORT_OPERATION,
        'admin_process_webhook_events_by_ids'      => Permission::STORK_WEBHOOK_REPLAY,
        'invitation_fetch'                         => Permission::VIEW_INVITATION,
        'pricing_create_plan'                      => Permission::CREATE_PRICING_PLAN,
        'buy_pricing_create_plan'                  => Permission::PAYMENTS_CREATE_BUY_PRICING_PLAN,
        'merchant_get_pricing'                     => Permission::VIEW_MERCHANT_PRICING,
        'merchant_invoice_update_gstin'            => Permission::MERCHANT_INVOICE_EDIT,
        'merchant_details_fetch'                   => Permission::VIEW_MERCHANT,
        'smart_dashboard_merchant_details_fetch'   => Permission::VIEW_MERCHANT,
        'admin_merchant_la_fetch'                  => Permission::VIEW_MERCHANT,
        'workflow_needs_merchant_clarification'    => Permission::MERCHANT_CLARIFICATION_ON_WORKFLOW,
        'external_merchant_composite_details_fetch'=> Permission::VIEW_MERCHANT_EXTERNAL,
        'setl_retry'                               => Permission::RETRY_SETTLEMENT,
        'payout_retry'                             => Permission::RETRY_SETTLEMENT,
        'setl_update_channel_bulk'                 => Permission::SETTLEMENT_BULK_UPDATE,
        'nodal_initiate_transfer_admin'            => Permission::CREATE_NODAL_ACCOUNT_TRANSFER,
        'transaction_bulk_update'                  => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_reconcile'                           => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_initiate_action'                     => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_process_data'                        => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_process_data_reset'                  => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_ledger_inconsistency_debug_admin'    => Permission::SETTLEMENT_BULK_UPDATE,
        // TODO: get clarity on permissions
        'setl_merchant_config_get'                 => Permission::VIEW_ALL_ENTITY,
        'setl_merchant_config_create'              => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_org_config_get'                      => Permission::VIEW_ALL_ENTITY,
        'setl_org_config_create_or_update'         => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_merchant_config_update'              => Permission::SETTLEMENT_SERVICE_MERCHANT_CONFIG_EDIT,
        'setl_merchant_config_bulk_update'         => Permission::SETTLEMENT_SERVICE_MERCHANT_CONFIG_EDIT,
        'setl_update_bene_name'                    => Permission::SETTLEMENT_SERVICE_MERCHANT_CONFIG_EDIT,
        'setl_get_scheduleableEntities'            => Permission::VIEW_ALL_ENTITY,
        'setl_bank_account_create'                 => Permission::MERCHANT_SETTLEMENT_BANK_ACCOUNT_CREATE,
        'setl_bank_account_update'                 => Permission::MERCHANT_SETTLEMENT_BANK_ACCOUNT_UPDATE,
        'setl_bank_account_get'                    => Permission::VIEW_ALL_ENTITY,
        'setl_bank_account_delete'                 => Permission::MERCHANT_SETTLEMENT_BANK_ACCOUNT_DELETE,
        'setl_execution_register'                  => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_set_dcs_object'                      => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_trigger_multiple'                    => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_execution_resume'                    => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_bulk_reminder_registration'          => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_bulk_reminder_es_registration'       => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_trigger_es_multiple'                 => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_transaction_release'                 => Permission::TOGGLE_TRANSACTION_HOLD_STATUS,
        'setl_transaction_hold'                    => Permission::TOGGLE_TRANSACTION_HOLD_STATUS,
        'setl_channel_status_update'               => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_channel_state_get'                   => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_trigger_report'                      => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_retry_new_service'                   => Permission::RETRY_SETTLEMENT,
        'setl_initiate_new_service'                => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_schedule_rename'                     => Permission::SCHEDULE_UPDATE,
        'setl_replay_status_update'                => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_transaction_replay_admin'            => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_service_migration_admin'             => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_migrate_payout'                      => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_transfer_status_update'              => Permission::SETTLEMENT_BULK_UPDATE,
        'setl_nodal_initiate_transfer_admin'       => Permission::CREATE_NODAL_ACCOUNT_TRANSFER,
        'merchant_batches'                         => Permission::MERCHANT_BATCH_UPLOAD,
        'merchant_invoice_add_bulk'                => Permission::MERCHANT_INVOICE_EDIT,
        'payment_dispute_create'                   => Permission::CREATE_DISPUTE,
        'dispute_bulk_create'                      => Permission::CREATE_DISPUTE,
        'dispute_edit'                             => Permission::EDIT_DISPUTE,
        'dispute_bulk_edit'                        => Permission::MERCHANT_DISPUTE_BULK_EDIT,
        'dispute_poc_mails'                        => Permission::CREATE_DISPUTE,
        'dispute_files_fetch'                      => Permission::FETCH_DISPUTE_FILES,
        'settings_fetch'                           => Permission::VIEW_WALLET_CONFIG,
        'settings_fetch_defined'                   => Permission::VIEW_WALLET_CONFIG,
        'settings_upsert'                          => Permission::EDIT_WALLET_CONFIG,
        'settings_delete'                          => Permission::EDIT_WALLET_CONFIG,
        'merchant_analytics'                       => Permission::VIEW_MERCHANT_ANALYTICS,
        'merchant_activation_files'                => Permission::VIEW_MERCHANT,
        'merchant_activation_document_type'        => Permission::EDIT_MERCHANT,
        'merchant_activation_archive'              => Permission::MERCHANT_ACTIVATION_ARCHIVE,
        'merchant_activation_status'               => Permission::EDIT_ACTIVATE_MERCHANT,
        'internal_merchant_activation_status'      => Permission::EDIT_ACTIVATE_MERCHANT,
        'merchant_activation_status_change_log'    => Permission::VIEW_ACTIVATION_FORM,
        'merchant_update_key_access'               => Permission::EDIT_MERCHANT_KEY_ACCESS,
        'merchant_get_rejection_reasons'           => Permission::VIEW_MERCHANT,
        'merchant_requests_rejection_reasons'      => Permission::VIEW_MERCHANT_REQUESTS,
        'dispute_reason_create'                    => Permission::CREATE_DISPUTE_REASON,
        'user_confirm_by_data'                     => Permission::CONFIRM_USER,
        'onboarding_features_fetch_submissions'    => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_update_status'        => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_fetch_status'         => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_bulk_update_status'   => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_update'               => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_fetch_details'        => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'onboarding_features_get_submissions'      => Permission::MANAGE_ONBOARDING_SUBMISSIONS,
        'feature_onboarding_fetch_all_responses'   => Permission::FEATURE_ONBOARDING_FETCH_ALL_RESPONSES,
        'geoip_update'                             => Permission::UPDATE_GEO_IP,

        'fetch_emandate_merchant_configs'          => Permission::MANAGE_EMANDATE_CONFIG,
        'create_emandate_merchant_configs'         => Permission::MANAGE_EMANDATE_CONFIG,
        'edit_emandate_merchant_configs'           => Permission::MANAGE_EMANDATE_CONFIG,

        'fetch_netbanking_configs'                 => Permission::CREATE_NETBANKING_REFUND,
        'create_netbanking_configs'                => Permission::CREATE_NETBANKING_REFUND,
        'edit_netbanking_configs'                  => Permission::CREATE_NETBANKING_REFUND,

        'fetch_merchant_da_payout_mode_config'     => Permission::MANAGE_PAYOUT_MODE_CONFIG,
        'create_merchant_da_payout_mode_config'    => Permission::MANAGE_PAYOUT_MODE_CONFIG,
        'edit_merchant_da_payout_mode_config'      => Permission::MANAGE_PAYOUT_MODE_CONFIG,
        'fetch_all_banking_configs'                => Permission::VIEW_BANKING_CONFIGS,
        'get_banking_config'                       => Permission::VIEW_BANKING_CONFIGS,
        'edit_banking_configs'                     => Permission::UPSERT_BANKING_CONFIGS,

        'sub_virtual_account_create'               => Permission::ADMIN_SUB_VIRTUAL_ACCOUNT,
        'sub_virtual_account_list_admin'           => Permission::ADMIN_SUB_VIRTUAL_ACCOUNT,
        'sub_virtual_account_enable_disable'       => Permission::ADMIN_SUB_VIRTUAL_ACCOUNT,
        'sub_virtual_account_migrate'              => Permission::ADMIN_SUB_VIRTUAL_ACCOUNT,

        'banking_account_statement_insert_missing' => Permission::INSERT_AND_UPDATE_BAS,
        'banking_account_statement_update_missing' => Permission::INSERT_AND_UPDATE_BAS,

        'process_pending_bank_transfer'            => Permission::ADMIN_PROCESS_PENDING_BANK_TRANSFER,
        'batch_process_by_id'                      => Permission::RETRY_BATCH,
        'merchant_get_tags'                        => Permission::VIEW_MERCHANT_TAGS,
        'merchant_get_capital_tags'                => Permission::VIEW_MERCHANT_CAPITAL_TAGS,
        'merchant_tags_bulk'                       => Permission::MANAGE_BULK_MERCHANT_TAGGING,
        'pricing_get_merchant_plans'               => Permission::MERCHANT_PRICING_PLANS,
        'buy_pricing_get_terminal_plans'           => Permission::PAYMENTS_TERMINAL_BUY_PRICING_PLANS,
        'pricing_supported_networks'               => Permission::VIEW_PRICING_LIST,
        'pricing_add_plan_rule'                    => Permission::MERCHANT_PRICING_PLAN_RULE_ADD,
        'buy_pricing_add_plan_rule'                => Permission::PAYMENTS_BUY_PRICING_PLAN_RULE_ADD,
        'pricing_get_plan'                         => Permission::MERCHANT_PRICING_PLANS,
        'buy_pricing_get_plan'                     => Permission::PAYMENTS_TERMINAL_BUY_PRICING_PLANS,
        'payment_verify'                           => Permission::VERIFY_PAYMENT,
        'payment_verify_bulk'                      => Permission::VERIFY_PAYMENT,
        'payment_refund_at_bulk_update'            => Permission::PAYMENTS_UPDATE_REFUND_AT,
        'payment_authorize_failed'                 => Permission::AUTHORIZE_PAYMENT,
        'iin_add'                                  => Permission::MANAGE_IINS,
        'emi_plan_add'                             => Permission::MANAGE_EMI_PLANS,
        'emi_plans_migrate'                        => Permission::MANAGE_EMI_PLANS,
        'emi_generate_excel'                       => Permission::GENERATE_EMI_EXCEL,
        'dummy_critical_error'                     => Permission::TRIGGER_DUMMY_ERROR,
        'admin_lead_verify'                        => Permission::ADMIN_LEAD_VERIFY,
        'merchant_invitation_verify'               => Permission::ADMIN_LEAD_VERIFY,
        'merchant_tag_add'                         => Permission::EDIT_MERCHANT_TAGS,
        'merchant_tag_delete'                      => Permission::EDIT_MERCHANT_TAGS,
        'refund_verify_multiple'                   => Permission::VERIFY_REFUND,
        'refund_verify_failed'                     => Permission::VERIFY_REFUND,
        'refund_verify_failed_bulk'                => Permission::PAYMENTS_REFUND_FAILED_VERIFY_BULK,
        'refund_set_unprocessed_config'            => Permission::RETRY_REFUND,
        'refund_retry_bulk_via_fta'                => Permission::BULK_RETRY_REFUNDS_VIA_FTA,
        'refund_without_verify_bulk'               => Permission::RETRY_REFUND,
        'merchant_edit_bank_account'               => Permission::MERCHANT_BANK_ACCOUNT_EDIT,
        'merchant_edit_email'                      => Permission::MERCHANT_EMAIL_EDIT,
        'update_merchant_mobile_number'            => Permission::UPDATE_MOBILE_NUMBER,
        'merchant_create_additional_email'         => Permission::MERCHANT_EMAIL_ADDITIONAL_CREATE,
        'merchant_delete_additional_email'         => Permission::MERCHANT_EMAIL_ADDITIONAL_DELETE,
        'bulk_data_entry'                          => Permission::BULK_CREATE_ENTITY,
        'merchant_fetch_all_additional_email'      => Permission::VIEW_MERCHANT,
        'merchant_fetch_additional_email'          => Permission::VIEW_MERCHANT,
        'refund_verify'                            => Permission::VERIFY_REFUND,
        'refund_verify_bulk'                       => Permission::VERIFY_REFUND,
        'pricing_get_plans'                        => Permission::MERCHANT_PRICING_PLANS,
        'pricing_get_gateway_plans'                => Permission::VIEW_PRICING_LIST,
        'pricing_delete_plan_rule_force'           => Permission::MERCHANT_PRICING_PLAN_RULE_DELETE,
        'buy_pricing_delete_plan_rule_force'       => Permission::PAYMENTS_BUY_PRICING_PLAN_RULE_FORCE_DELETE,
        'pricing_update_plan_rule'                 => Permission::UPDATE_PRICING_PLAN,
        'buy_pricing_update_plan_rule'             => Permission::PAYMENTS_UPDATE_BUY_PRICING_PLAN,
        'gateway_file_create'                      => Permission::CREATE_GATEWAY_FILE,
        'adj_add_bulk'                             => Permission::ADD_BULK_MERCHANT_ADJUSTMENT,
        'adj_add_reverse'                          => Permission::REVERSE_BULK_MERCHANT_ADJUSTMENT,
        'bank_transfer_edit_payer_account'         => Permission::BANK_TRANSFER_MODIFY_PAYER_ACCOUNT,
        'bank_transfer_insert'                     => Permission::BANK_TRANSFER_INSERT,
        'bank_transfer_strip_payer_accounts'       => Permission::BANK_TRANSFER_MODIFY_PAYER_ACCOUNT,
        'coupon_apply'                             => Permission::PAYMENTS_PROMOTION_COUPON_APPLY,
        'coupon_create'                            => Permission::CREATE_PROMOTION_COUPON,
        'coupon_delete'                            => Permission::PAYMENTS_PROMOTION_COUPON_DELETE,
        'coupon_update'                            => Permission::PAYMENTS_PROMOTION_COUPON_UPDATE,
        'coupon_validate'                          => Permission::CREATE_PROMOTION_COUPON,
        'credits_edit'                             => Permission::EDIT_MERCHANT_CREDITS,
        'credits_create_bulk'                      => Permission::MERCHANT_ADD_CREDITS_BULK,
        'currency_fetch_rates'                     => Permission::CURRENCY_FETCH_RATES,
        'dummy_route'                              => Permission::DUMMY_ROUTE,
        'emi_plan_fetch_by_id'                     => Permission::VIEW_MERCHANT,
        'es_debug_get'                             => Permission::DEVELOPERS_READ,
        'es_aliases_post'                          => Permission::ES_WRITE_OPERATION,
        'es_index_create'                          => Permission::ES_WRITE_OPERATION,
        'es_index'                                 => Permission::ES_WRITE_OPERATION,
        'es_proxy'                                 => Permission::ES_WRITE_OPERATION,
        'es_transactions_sync'                     => Permission::VIEW_ACTIVATION_FORM,
        'es_payouts_sync'                          => Permission::VIEW_ACTIVATION_FORM,
        'es_sync_entities'                         => Permission::VIEW_ACTIVATION_FORM,
        'orphan_payouts_delete'                    => Permission::MANAGE_UNDO_PAYOUT,
        'feature_add'                              => Permission::EDIT_MERCHANT_FEATURES,
        'enable_instant_refunds'                   => Permission::EDIT_MERCHANT_FEATURES,
        'feature_bulk_assign'                      => Permission::MANAGE_BULK_FEATURE_MAPPING,
        'feature_bulk_remove'                      => Permission::MANAGE_BULK_FEATURE_MAPPING,
        'fund_transfer_attempt_bulk_update'        => Permission::SETTLEMENT_BULK_UPDATE,
        'fund_transfer_attempt_initiate_action'    => Permission::SETTLEMENT_BULK_UPDATE,
        'scrooge_set_merchant_mode_config'         => Permission::EDIT_MERCHANT,
        'scrooge_expire_merchant_mode_config'      => Permission::EDIT_MERCHANT,
        'scrooge_fetch_merchant_mode_configs'      => Permission::EDIT_MERCHANT,
        'gateway_fetch_downtimes'                  => Permission::VIEW_GATEWAY_DOWNTIME,
        'gateway_create_downtime'                  => Permission::CREATE_GATEWAY_DOWNTIME,
        'refresh_payments_ongoing_downtimes'       => Permission::CREATE_GATEWAY_DOWNTIME,
        'refresh_payments_resolved_downtimes'      => Permission::CREATE_GATEWAY_DOWNTIME,
        'refresh_payments_scheduled_downtimes'     => Permission::CREATE_GATEWAY_DOWNTIME,
        'fetch_payments_ongoing_downtimes'         => Permission::CREATE_GATEWAY_DOWNTIME,
        'fetch_payments_resolved_downtimes'        => Permission::CREATE_GATEWAY_DOWNTIME,
        'fetch_payments_scheduled_downtimes'       => Permission::CREATE_GATEWAY_DOWNTIME,
        'add_downtime_slack_merchant_names'        => Permission::CREATE_GATEWAY_DOWNTIME,
        'manual_downtime_fetch'                    => Permission::CREATE_GATEWAY_DOWNTIME,
        'downtime_manual_resolve'                  => Permission::CREATE_GATEWAY_DOWNTIME,
        'gateway_file_acknowledge'                 => Permission::CREATE_GATEWAY_FILE,
        'gateway_file_retry'                       => Permission::CREATE_GATEWAY_FILE,
        'gateway_update_downtime'                  => Permission::UPDATE_GATEWAY_DOWNTIME,
        'gateway_delete_downtime'                  => Permission::UPDATE_GATEWAY_DOWNTIME,
        'get_cache_counts'                         => Permission::DEVELOPERS_READ,
        'get_mode_config_instruments'              => Permission::VIEW_SCROOGE_REFUNDS,
        'get_config_keys'                          => Permission::VIEW_CONFIG_KEYS,
        'gratis_postpaid_transactions'             => Permission::GET_RECONCILIATION,
        'mark_transactions_postpaid'               => Permission::MARK_TRANSACTIONS_POSTPAID,
        'iin_generate_post'                        => Permission::MANAGE_IINS,
        'iin_range_upload'                         => Permission::MANAGE_IINS,
        'iin_upload'                               => Permission::MANAGE_IINS,
        'merchant_activation_upload_file_admin'    => Permission::EDIT_MERCHANT,
        'merchant_beneficiary_file'                => Permission::MERCHANT_BENEFICIARY_UPLOAD,
        'merchant_create'                          => Permission::CREATE_MERCHANT,
        'merchant_create_terminal'                 => Permission::ASSIGN_MERCHANT_TERMINAL,
        'merchant_onboard_terminal'                => Permission::ASSIGN_MERCHANT_TERMINAL,
        'merchant_onboard_external_org_terminal'   => Permission::CREATE_EXTERNAL_ORG_TERMINALS,
        'merchant_delete_terminal'                 => Permission::DELETE_TERMINAL,
        'merchant_validate_delete_terminal_v3'     => Permission::DELETE_TERMINAL,
        'merchant_delete_terminal_v3'              => Permission::DELETE_TERMINAL,
        'merchant_edit_free_credits'               => Permission::EDIT_MERCHANT_CREDITS,
        'merchant_fetch_multiple'                  => Permission::VIEW_MERCHANT,
        'merchant_generate_test_bank_acnt'         => Permission::MERCHANT_BANK_ACCOUNT_TEST_GENERATE,
        'merchants_update_bank_account'            => Permission::MERCHANT_BANK_ACCOUNT_UPDATE,
        'merchant_send_activation_mail'            => Permission::MERCHANT_SEND_ACTIVATION_MAIL,
        'methods_update_merchants'                 => Permission::METHODS_ASSIGN_BULK,
        'affordability_widget_trial_period_update' => Permission::EDIT_MERCHANT,
        'migrate_tokens_to_gateway_tokens'         => Permission::MIGRATE_TOKENS_TO_GATEWAY_TOKENS,
        'mock_generate_reconciliation'             => Permission::VIEW_MERCHANT,
        'nodal_add_beneficiary'                    => Permission::SETTLEMENT_BULK_UPDATE,
        'org_get_self'                             => Permission::VIEW_ORG,
        'payment_authorize_time_out'               => Permission::PAYMENT_AUTHORIZE_TIMEOUT,
        'payment_auto_capture_email'               => Permission::AUTOCAPTURE_PAYMENTS_MAIL,
        'payment_bulk_capture'                     => Permission::PAYMENT_CAPTURE_BULK,
        'payment_capture_gateway_manual'           => Permission::PAYMENT_CAPTURE_GATEWAY_MANUAL,
        'payment_capture_verify'                   => Permission::PAYMENT_CAPTURE_VERIFY,
        'payment_fix_authorize_at'                 => Permission::FIX_PAYMENT_AUTHORIZED_AT,
        'payment_force_authorize'                  => Permission::FORCE_AUTHORIZE_PAYMENT,
        'payments_multiple_authorize_refund'       => Permission::REFUND_MULTIPLE_AUTHORIZE_PAYMENTS,
        'promotion_create'                         => Permission::CREATE_PROMOTION_COUPON,
        'promotion_create_for_event'               => Permission::CREATE_PROMOTION_COUPON,
        'promotion_update'                         => Permission::PAYMENT_PROMOTION_EVENT_UPDATE,
        // keeping the permission same for rewards as well, as mostly marketing/sme team has
        // this permission and so it won't be required to assign them a new promotion
        'promotion_deactivate'                     => Permission::DEACTIVATE_PROMOTION,
        'refund_reference1_bulk_update'            => Permission::UPDATE_REFUND_REFERENCE1,
        'scrooge_dashboard_init'                   => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_reports_get_multiple'             => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_refunds_update_multiple'          => Permission::EDIT_REFUND,
        'scrooge_refunds_bulk_reference1_update'   => Permission::UPDATE_SCROOGE_REFUND_REFERENCE1,
        'scrooge_processed_refunds_state_change'   => Permission::UPDATE_PROCESSED_REFUNDS_STATUS,
        'scrooge_refunds_to_failed_state'          => Permission::REVERSE_FAILED_REFUNDS,
        'scrooge_refunds_enqueue'                  => Permission::EDIT_REFUND,
        'scrooge_refunds_get_multiple'             => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_refunds_download'                 => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_refunds_download_gateway_file'    => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_refunds_download_gateway_report'  => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'scrooge_refunds_get'                      => Permission::VIEW_SCROOGE_REFUNDS,
        'scrooge_refunds_update'                   => Permission::EDIT_REFUND,
        'scrooge_refund_create'                    => Permission::PAYMENTS_REFUND_SCROOGE_CREATE,
        'scrooge_refund_create_bulk'               => Permission::PAYMENTS_REFUND_SCROOGE_CREATE_BULK,
        'api_refunds_retry_without_verify'         => Permission::RETRY_REFUNDS_WITHOUT_VERIFY,
        'scrooge_refresh_fta_modes_cache'          => Permission::REFRESH_SCROOGE_FTA_MODES_CACHE,
        'scrooge_set_instant_refund_mode_config'   => Permission::EDIT_INSTANT_REFUNDS_MODE_CONFIG,
        'scrooge_expire_instant_refund_mode_config'=> Permission::EDIT_INSTANT_REFUNDS_MODE_CONFIG,
        'scrooge_fetch_instant_refund_mode_config' => Permission::VIEW_SCROOGE_REFUNDS,

        'scrooge_refunds_retry_with_verify'           => Permission::RETRY_REFUND_FAILED,
        'scrooge_refunds_retry_without_verify'        => Permission::RETRY_REFUNDS_WITHOUT_VERIFY,
        'scrooge_refunds_retry_source_fund_transfers' => Permission::PAYMENTS_REFUNDS_RETRY_FUND_TRANSFERS_SCROOGE_SOURCE,
        'scrooge_refunds_retry_with_attempt_appended_id'=> Permission::RETRY_REFUNDS_WITH_APPENDED_ID,
        'scrooge_refunds_retry_custom_fund_transfers' => Permission::PAYMENTS_REFUNDS_RETRY_FUND_TRANSFERS_SCROOGE_CUSTOM,
        'scrooge_refunds_bulk_verify'              => Permission::VERIFY_REFUND,
        'send_newsletter'                          => Permission::SEND_NEWSLETTER,
        'send_test_newsletter'                     => Permission::SEND_NEWSLETTER,
        'schedule_fetch'                           => Permission::SCHEDULE_FETCH,
        'schedule_update_next_run'                 => Permission::SCHEDULE_UPDATE,
        'update_config_key'                        => Permission::UPDATE_CONFIG_KEY,
        'terminal_restore'                         => Permission::DELETE_TERMINAL,
        'transaction_create_fees_breakup'          => Permission::CREATE_TRANSACTION_FEE_BREAKUP,
        'set_config_keys'                          => Permission::SET_CONFIG_KEYS,
        'delete_config_key'                        => Permission::DELETE_CONFIG_KEY,
        'get_config_key'                           => Permission::VIEW_CONFIG_KEYS,
        'upi_fill_bank'                            => Permission::UPI_MANAGE_DATA,
        'upi_psp_allow'                            => Permission::UPI_MANAGE_PSPS,
        'upi_psp_disallow'                         => Permission::UPI_MANAGE_PSPS,
        'user_confirm'                             => Permission::CONFIRM_USER,
        'user_create'                              => Permission::USER_CREATE,
        'user_update_contact_admin'                => Permission::UPDATE_USER_CONTACT_MOBILE,
        'webhook_list_events'                      => Permission::STORK_WEBHOOK_REPLAY,
        'sms_set_ratelimit_threshold'              => Permission::STORK_CREATE_SMS_RATE_LIMIT,
        'sms_delete_ratelimit_threshold'           => Permission::STORK_DELETE_SMS_RATE_LIMIT,
        'suppression_list_remove'                  => Permission::STORK_WEBHOOK_REPLAY,
        'admin_get_app_auth'                       => Permission::ADMIN_GET_APP_AUTH,
        'reports_transaction_dsp'                  => Permission::VIEW_SPECIAL_MERCHANT_REPORT,
        'reports_refund_irctc'                     => Permission::VIEW_SPECIAL_MERCHANT_REPORT,
        'enable_emi_merchant_sub'                  => Permission::MANAGE_EMI_PLANS,

        'shield_rules_get_multiple'                   => Permission::VIEW_SHIELD_RULE,
        'shield_rules_get'                            => Permission::VIEW_SHIELD_RULE,
        'shield_rules_create'                         => Permission::CREATE_SHIELD_RULE,
        'shield_rules_update'                         => Permission::EDIT_SHIELD_RULE,
        'shield_rules_delete'                         => Permission::DELETE_SHIELD_RULE,
        'shield_lists_get_multiple'                   => Permission::VIEW_SHIELD_LIST,
        'shield_lists_get'                            => Permission::VIEW_SHIELD_LIST,
        'shield_lists_create'                         => Permission::CREATE_SHIELD_LIST,
        'shield_lists_delete'                         => Permission::DELETE_SHIELD_LIST,
        'shield_list_items_get_multiple'              => Permission::VIEW_SHIELD_LIST,
        'shield_list_items_get'                       => Permission::VIEW_SHIELD_LIST,
        'shield_list_items_add_multiple'              => Permission::ADD_SHIELD_LIST_ITEMS,
        'shield_list_items_purge'                     => Permission::PURGE_SHIELD_LIST_ITEMS,
        'shield_list_items_delete'                    => Permission::DELETE_SHIELD_LIST_ITEM,
        'shield_settings_ui'                          => Permission::RETRIEVE_SHIELD_UI_SETTINGS,
        'shield_risk_threshold_config_get_multiple'   => Permission::VIEW_RISK_THRESHOLD_CONFIG,
        'shield_risk_threshold_config_get'            => Permission::VIEW_RISK_THRESHOLD_CONFIG,
        'shield_risk_threshold_config_create'         => Permission::CREATE_RISK_THRESHOLD_CONFIG,
        'shield_risk_threshold_config_update'         => Permission::UPDATE_RISK_THRESHOLD_CONFIG,
        'shield_risk_threshold_config_delete'         => Permission::DELETE_RISK_THRESHOLD_CONFIG,
        'shield_merchant_risk_threshold_get_multiple' => Permission::VIEW_MERCHANT_RISK_THRESHOLD,
        'shield_merchant_risk_threshold_get'          => Permission::VIEW_MERCHANT_RISK_THRESHOLD,
        'shield_merchant_risk_threshold_create'       => Permission::CREATE_MERCHANT_RISK_THRESHOLD,
        'shield_merchant_risk_threshold_update'       => Permission::UPDATE_MERCHANT_RISK_THRESHOLD,
        'shield_merchant_risk_threshold_delete'       => Permission::DELETE_MERCHANT_RISK_THRESHOLD,
        'shield_merchant_risk_threshold_bulk_update'         => Permission::BULK_UPDATE_MERCHANT_RISK_THRESHOLD,

        'user_fetch_admin'                         => Permission::USER_FETCH_ADMIN,
        'refund_edit_status'                       => Permission::EDIT_REFUND,
        'refund_mark_processed_bulk'               => Permission::PAYMENTS_REFUND_EDIT_BULK,
        'batch_create'                             => Permission::ADMIN_BATCH_CREATE,
        'batch_validate_file_admin'                => Permission::ADMIN_BATCH_CREATE,
        'batch_create_admin'                       => Permission::ADMIN_BATCH_CREATE,
        'send_test_sms'                            => Permission::STORK_WRITE_OPERATION,
        'file_upload_admin'                        => Permission::ADMIN_FILE_UPLOAD,
        'developer_console_admin_action'           => Permission::DEVELOPER_CONSOLE_ADMIN,
        'reporting_config_get'                     => Permission::VIEW_MERCHANT_REPORT,
        'reporting_config_list'                    => Permission::VIEW_MERCHANT_REPORT,
        'reporting_config_create'                  => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_edit'                    => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_delete'                  => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_types_fetch'             => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_components_get_by_type'  => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_options'                 => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_create_full'             => Permission::REPORT_CONFIG_FULL_OPERATIONS,
        'reporting_config_edit_full'               => Permission::REPORT_CONFIG_FULL_OPERATIONS,
        'reporting_log_get'                        => Permission::VIEW_MERCHANT_REPORT,
        'reporting_log_list'                       => Permission::VIEW_MERCHANT_REPORT,
        'reporting_log_update'                     => Permission::VIEW_MERCHANT_REPORT,
        'reporting_log_create'                     => Permission::VIEW_MERCHANT_REPORT,
        'reporting_schedule_get'                   => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_schedule_update'                => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_schedule_list'                  => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_schedule_create'                => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_schedule_delete'                => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_log_create_admin'               => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'reporting_config_get_admin'               => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'reporting_config_create_admin'            => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_edit_admin'              => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_delete_admin'            => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_list_admin'              => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'reporting_log_get_admin'                  => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'reporting_log_list_admin'                 => Permission::DOWNLOAD_NON_MERCHANT_REPORT,
        'reporting_fetch_throttle_settings'        => Permission::REPORTING_DEVELOPER,
        'reporting_edit_throttle_settings'         => Permission::REPORTING_DEVELOPER,
        'reporting_config_edit_bulk'               => Permission::REPORTING_DEVELOPER,
        'batch_service_route'                      => Permission::BATCH_API_CALL,
        'ufh_get_file_signed_url'                  => Permission::DOWNLOAD_UFH_FILE_BY_MID,
        'ufh_get_file_signed_url_admin'            => Permission::DOWNLOAD_UFH_FILE_BY_MID,
        'ufh_get_file_signed_url_by_mid'           => Permission::DOWNLOAD_UFH_FILE_BY_MID,
        'merchant_requests_create'                 => Permission::VIEW_MERCHANT_REQUESTS,
        'merchant_requests_list'                   => Permission::VIEW_MERCHANT_REQUESTS,
        'merchant_requests_get'                    => Permission::VIEW_MERCHANT_REQUESTS,
        'merchant_requests_update'                 => Permission::EDIT_MERCHANT_REQUESTS,
        'merchant_requests_bulk_update'            => Permission::EDIT_MERCHANT_REQUESTS,
        'merchant_bulk_edit_attributes'            => Permission::EDIT_MERCHANT_REQUESTS,
        'merchant_requests_status_log'             => Permission::VIEW_MERCHANT_REQUESTS,
        'merchant_requests_get_feature'            => Permission::VIEW_MERCHANT_REQUESTS,
        'merchant_bank_account_change_status'      => Permission::MERCHANT_BANK_ACCOUNT_STATUS_CHANGE,
        'merchant_activation_reviewers'            => Permission::MERCHANT_ACTIVATION_REVIEWERS,
        'merchant_activation_bulk_assign_reviewer' => Permission::ASSIGN_MERCHANT_ACTIVATION_REVIEWER,
        'db_meta_query'                            => Permission::DB_META_QUERY,
        'oauth_sync_merchant_map'                  => Permission::OAUTH_SYNC_MERCHANT_MAP,
        'nodal_beneficiary_update'                 => Permission::SETTLEMENT_BULK_UPDATE,
        'growth_admin'                             => Permission::MANAGE_CAMPAIGNHQ_OPERATIONS,
        'growth_upload_asset'                      => Permission::MANAGE_CAMPAIGNHQ_OPERATIONS,
        'razorx_route'                             => Permission::MANAGE_RAZORX_OPERATIONS,
        'splitz_route'                             => Permission::MANAGE_RAZORX_OPERATIONS,
        'splitz_upload_segment_file'               => Permission::MANAGE_RAZORX_OPERATIONS,
        'invoice_cancel_by_batch_admin'            => Permission::CANCEL_BATCH,
        'token_registration_token_associate'       => Permission::TOKEN_REGISTRATION_ACTIONS,
        'token_registration_tokens_authenticate'   => Permission::TOKEN_REGISTRATION_ACTIONS,
        'merchants_access_map_create'              => Permission::EDIT_PARTNERS,
        'merchants_access_map_delete'              => Permission::EDIT_PARTNERS,
        'merchants_access_map_update'              => Permission::EDIT_PARTNERS,
        'partner_referral_create'                  => Permission::EDIT_PARTNERS,
        'update_partner_intent'                    => Permission::EDIT_PARTNERS,
        'update_partner_type'                      => Permission::EDIT_PARTNERS,
        'merchant_partner_configs_fetch'           => Permission::VIEW_PARTNERS,
        'fetch_partner_intent'                     => Permission::VIEW_PARTNERS,
        'partner_referral_fetch'                   => Permission::VIEW_PARTNERS,
        'submerchants_fetch'                       => Permission::VIEW_PARTNERS,
        'submerchants_fetch_multiple'              => Permission::VIEW_PARTNERS,
        'submerchants_fetch_capital_applications'  => Permission::VIEW_PARTNERS,
        'oauth_application_fetch_multiple'         => Permission::VIEW_PARTNERS,
        'merchant_associated_accounts_fetch'       => Permission::VIEW_PARTNERS,
        'fetch_merchant_products'                  => Permission::VIEW_PARTNERS,
        'fetch_partner_first_user_experience'      => Permission::VIEW_PARTNERS,
        'bulk_migrate_aggregator_to_reseller'      => Permission::EDIT_PARTNERS,
        'bulk_migrate_reseller_to_aggregator'      => Permission::EDIT_PARTNERS,
        'migrate_reseller_to_aggregator'           => Permission::EDIT_PARTNERS,
        'migrate_aggregator_to_reseller'           => Permission::EDIT_PARTNERS,
        'migrate_reseller_to_pure_platform'        => Permission::EDIT_PARTNERS,
        'migrate_pure_platform_to_reseller'        => Permission::EDIT_PARTNERS,
        'partner_remove_switch_merchant_access'    => Permission::EDIT_PARTNERS,
        'backfill_merchant_applications'           => Permission::ADMIN_MANAGE_PARTNERS,
        'backfill_referred_application'            => Permission::ADMIN_MANAGE_PARTNERS,
        'product_tnc_map_create'                   => Permission::ADMIN_MANAGE_PARTNERS,
        'product_tnc_map_fetch'                    => Permission::ADMIN_MANAGE_PARTNERS,
        'product_tnc_map_fetch_all'                => Permission::ADMIN_MANAGE_PARTNERS,
        'product_tnc_map_update'                   => Permission::ADMIN_MANAGE_PARTNERS,
        'merchant_sync_stakeholder'                => Permission::ADMIN_MANAGE_PARTNERS,
        'oauth_application_create_clients'         => Permission::ADMIN_MANAGE_PARTNERS,
        'oauth_application_refresh_clients'        => Permission::ADMIN_MANAGE_PARTNERS,
        'oauth_application_delete_client'          => Permission::ADMIN_MANAGE_PARTNERS,
        'account_service_trigger_full_sync'        => Permission::ADMIN_MANAGE_PARTNERS,
        'account_service_trigger_sync'             => Permission::ADMIN_MANAGE_PARTNERS,
        'oauth_application_update_admin'           => Permission::MANAGE_BULK_FEATURE_MAPPING,
        'nodal_file_upload_retry'                  => Permission::SETTLEMENT_BULK_UPDATE,
        'terminal_get_banks'                       => Permission::VIEW_TERMINAL,
        'terminal_set_banks'                       => Permission::EDIT_TERMINAL,
        'terminal_get_wallets'                     => Permission::VIEW_TERMINAL,
        'terminal_set_wallets'                     => Permission::EDIT_TERMINAL,
        'merchant_details_patch'                   => Permission::EDIT_MERCHANT,
        'smart_dashboard_merchant_details_patch'   => Permission::EDIT_MERCHANT,
        'merchant_schedule_bulk'                   => Permission::SCHEDULE_ASSIGN_BULK,
        'merchant_schedule_reset'                  => Permission::SCHEDULE_ASSIGN_BULK,
        'merchant_pricing_bulk'                    => Permission::PRICING_ASSIGN_BULK,
        'qr_code_create'                           => Permission::CREATE_QR_CODE,
        'qr_code_close'                            => Permission::CREATE_QR_CODE,
        'qr_configs_create'                        => Permission::CREATE_QR_CODE_CONFIG,
        'qr_configs_update'                        => Permission::CREATE_QR_CODE_CONFIG,
        'qr_configs_delete'                        => Permission::CREATE_QR_CODE_CONFIG,
        'virtual_account_create'                   => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_create_for_internal'      => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_expiry_setting_upsert'    => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_expiry_setting_get'       => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'admin_va_expiry_setting_upsert'           => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'admin_va_setting_get'                     => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_add_receivers'            => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_add_allowed_payer'        => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_delete_allowed_payer'     => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_accounts_close_bulk'              => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_number_setting_upsert'    => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'virtual_account_bulk_create_for_banking'  => Permission::CREATE_BANKING_VIRTUAL_ACCOUNTS,
        'virtual_account_bulk_close_for_banking'   => Permission::CREATE_BANKING_VIRTUAL_ACCOUNTS,
        'merchant_virtual_account_edit'            => Permission::CREATE_VIRTUAL_ACCOUNTS,
        'entity_balance_id_update'                 => Permission::UPDATE_ENTITY_BALANCE_ID,
        'merchant_balance_bulk_backfill_ids'       => Permission::MERCHANT_BALANCE_BULK_BACKFILL,
        'terminal_bank_bulk'                       => Permission::EDIT_TERMINAL,
        'set_redis_keys'                           => Permission::MANAGE_REDIS_KEYS,
        'set_gateway_downtime_conf'                => Permission::CREATE_GATEWAY_DOWNTIME,
        'get_gateway_downtime_conf'                => Permission::VIEW_GATEWAY_DOWNTIME,
        'partner_activation_migrate'               => Permission::ADMIN_MANAGE_PARTNERS,
        'partner_config_create_admin'              => Permission::EDIT_PARTNERS,
        'partner_config_fetch_admin'               => Permission::VIEW_PARTNERS,
        'partner_config_edit_admin'                => Permission::EDIT_PARTNERS,
        'partner_config_fetch'                     => Permission::VIEW_PARTNERS,
        'partner_config_edit'                      => Permission::EDIT_PARTNERS,
        'partner_config_edit_logo'                 => Permission::EDIT_PARTNERS,
        'create_partner_sub_merchant_config'       => Permission::EDIT_PARTNERS,
        'update_partner_sub_merchant_config'       => Permission::EDIT_PARTNERS,
        'partner_bulk_update_onboarding_source'    => Permission::EDIT_PARTNERS,
        'vault_token_create'                       => Permission::VAULT_TOKEN_CREATE,
        'merchant_user_reset_password'             => Permission::USER_PASSWORD_RESET,
        'subscription_update_data'                 => Permission::MODIFY_SUBSCRIPTION_DATA,
        'subscription_payment_process'             => Permission::MODIFY_SUBSCRIPTION_DATA,
        'subscription_charge_cycle'                => Permission::MODIFY_SUBSCRIPTION_DATA,
        'subscription_skip_cycle'                  => Permission::MODIFY_SUBSCRIPTION_DATA,

        'merchant_partners_fetch'                  => Permission::VIEW_PARTNERS,

        'governor_create_namespace'                => Permission::CREATE_GATEWAY_RULE,
        'governor_domain_model_list'               => Permission::VIEW_GATEWAY_RULE,
        'governor_create_domain_model'             => Permission::CREATE_GATEWAY_RULE,
        'governor_update_namespace'                => Permission::EDIT_GATEWAY_RULE,
        'governor_create_rule'                     => Permission::CREATE_GATEWAY_RULE,
        'governor_create_rule_bulk'                => Permission::CREATE_GATEWAY_RULE,
        'governor_update_rule'                     => Permission::EDIT_GATEWAY_RULE,
        'governor_update_rule_bulk'                => Permission::EDIT_GATEWAY_RULE,
        'governor_rule_list'                       => Permission::VIEW_GATEWAY_RULE,
        'governor_get_rule'                        => Permission::VIEW_GATEWAY_RULE,
        'governor_create_rule_chain'               => Permission::CREATE_GATEWAY_RULE,
        'governor_update_rule_chain'               => Permission::EDIT_GATEWAY_RULE,
        'governor_rule_chain_list'                 => Permission::VIEW_GATEWAY_RULE,
        'governor_rule_chain_execute'              => Permission::VIEW_GATEWAY_RULE,

        'governor_create_namespace_v1'             => Permission::CREATE_GATEWAY_RULE,
        'governor_get_client_v1'                   => Permission::VIEW_GATEWAY_RULE,
        'governor_get_merchant_rule_group'         => Permission::VIEW_GATEWAY_RULE,
        'governor_list_merchant_providers'         => Permission::VIEW_GATEWAY_RULE,
        'governor_list_namespace_v1'               => Permission::VIEW_GATEWAY_RULE,
        'governor_get_namespace_v1'                => Permission::VIEW_GATEWAY_RULE,
        'governor_update_namespace_v1'             => Permission::EDIT_GATEWAY_RULE,
//        'governor_delete_namespace_v1'             => Permission::DELETE_GATEWAY_RULE,
        'governor_create_config_v1'                => Permission::CREATE_GATEWAY_RULE,
        'governor_list_config_v1'                  => Permission::VIEW_GATEWAY_RULE,
        'governor_get_config_v1'                   => Permission::VIEW_GATEWAY_RULE,
        'governor_list_config_map_v1'              => Permission::VIEW_GATEWAY_RULE,
        'governor_update_config_v1'                => Permission::EDIT_GATEWAY_RULE,
        'governor_delete_config_v1'                => Permission::DELETE_GATEWAY_RULE,
        'governor_update_template_v1'              => Permission::CREATE_GATEWAY_RULE,
        'governor_list_template_v1'                => Permission::VIEW_GATEWAY_RULE,
        'governor_create_template_v1'              => Permission::CREATE_GATEWAY_RULE,
        'governor_create_rule_v1'                  => Permission::CREATE_GOVERNOR_RULE,
        'governor_list_rule_v1'                    => Permission::VIEW_GATEWAY_RULE,
        'governor_get_rule_v1'                     => Permission::VIEW_GATEWAY_RULE,
        'governor_delete_rule_v1'                  => Permission::DELETE_GOVERNOR_RULE,
        'governor_update_rule_v1'                  => Permission::EDIT_GOVERNOR_RULE,
        'governor_update_rule_index_v1'            => Permission::EDIT_GOVERNOR_RULE,
        'governor_list_rule_chains_v1'             => Permission::VIEW_GATEWAY_RULE,
        'governor_create_rule_chain_v1'            => Permission::CREATE_GATEWAY_RULE,
        'governor_update_rule_chain_v1'            => Permission::EDIT_GATEWAY_RULE,
        'governor_delete_rule_chain_v1'            => Permission::DELETE_GATEWAY_RULE,
        'governor_update_chain_group_sequence_v1'  => Permission::EDIT_GATEWAY_RULE,
        'governor_list_rule_groups_v1'             => Permission::VIEW_GATEWAY_RULE,
        'governor_create_rule_group_v1'            => Permission::CREATE_GATEWAY_RULE,
        'governor_create_merchant_rule_group'      => Permission::CREATE_GATEWAY_RULE,
        'governor_create_bulk_rule_group_v1'       => Permission::CREATE_GATEWAY_RULE,
        'governor_get_rule_group_v1'               => Permission::VIEW_GATEWAY_RULE,
        'governor_delete_rule_group_v1'            => Permission::DELETE_GATEWAY_RULE,
        'governor_update_rule_group_v1'            => Permission::EDIT_GATEWAY_RULE,
        'governor_update_merchant_rule_group'      => Permission::EDIT_GATEWAY_RULE,
        'governor_list_merchant_rule_groups'       => Permission::VIEW_GATEWAY_RULE,
        'governor_reorder_merchant_rule_groups'    => Permission::EDIT_GATEWAY_RULE,
        'governor_search_rules'                    => Permission::VIEW_GATEWAY_RULE,
        'governor_optimizer_events'                => Permission::RULE_VISIBILITY,
        'governor_optimizer_rulegroup_stats'       => Permission::RULE_VISIBILITY,
        'governor_optimizer_merchant_stats'        => Permission::RULE_VISIBILITY,
        'governor_routing_events'                  => Permission::RULE_VISIBILITY,
        'governor_delete_merchant_rule_group'      => Permission::DELETE_GATEWAY_RULE,
        'governor_update_merchant_rule_group_mode' => Permission::EDIT_GATEWAY_RULE,
        'governor_optimizer_create_merchant'       => Permission::CREATE_GATEWAY_RULE,
        'governor_optimizer_update_merchant'       => Permission::EDIT_GATEWAY_RULE,

        'router_gateway_downtime_create'           => Permission::CREATE_GATEWAY_RULE,
        'router_gateway_downtime_delete'           => Permission::DELETE_GATEWAY_RULE,
        'router_gateway_downtime_fetch'            => Permission::VIEW_GATEWAY_RULE,
        'router_refresh_cron'                     =>  Permission::VIEW_GATEWAY_RULE,

        'terminals_proxy_get_merchant_optimizer_provider'   => Permission::VIEW_GATEWAY_RULE,
        'terminals_proxy_get_optimizer_gateways'            => Permission::VIEW_GATEWAY_RULE,
        'terminals_proxy_add_optimizer_provider'            => Permission::CREATE_GATEWAY_RULE,
        'terminals_proxy_update_optimizer_provider'         => Permission::EDIT_GATEWAY_RULE,
        'terminals_proxy_get_optimizer_merchant_methods'    => Permission::VIEW_GATEWAY_RULE,

        'setl_optimizer_settlement_manual_api'              => Permission::OPTIMIZER_SINGLE_RECON,
        'setl_insert_new_transaction_records'               => Permission::OPTIMIZER_SINGLE_RECON,
        'setl_update_execution_transaction_count'           => Permission::OPTIMIZER_SINGLE_RECON,
        'setl_update_optimiser_execution_status'            => Permission::OPTIMIZER_SINGLE_RECON,

        //Enable maker/checker for payouts
        'payout_create'                            => Permission::CREATE_PAYOUT,
        'payout_validate'                          => Permission::CREATE_PAYOUT,
        'payouts_batch_create'                     => Permission::CREATE_PAYOUT,
        'payout_create_with_otp'                   => Permission::CREATE_PAYOUT,
        'composite_payout_create_with_otp'         => Permission::CREATE_PAYOUT,
        'payout_create_2FA'                        => Permission::CREATE_PAYOUT,
        'payout_send_2FA_otp'                      => Permission::CREATE_PAYOUT,
        'undo_payout_creation'                     => Permission::CREATE_PAYOUT,
        'resume_payout_creation'                   => Permission::CREATE_PAYOUT,

        'fund_management_balance_get_config'       => Permission::EDIT_BALANCE_MANAGEMENT_CONFIG,
        'fund_management_balance_set_config'       => Permission::EDIT_BALANCE_MANAGEMENT_CONFIG,

        'payment_on_hold_bulk_update'              => Permission::SETTLEMENT_RELEASE_HOLD_PAYMENT,
        'payment_card_vault_migrate'               => Permission::VAULT_TOKEN_CREATE,
        'vault_token_renewal'                      => Permission::VAULT_TOKEN_CREATE,
        'banking_account_update'                   => Permission::VIEW_ACTIVATION_FORM, // Internal entity updates are behind stricter permissions.
        'banking_account_webhook_data_reset'       => Permission::RESET_WEBHOOK_DATA,
        'banking_account_activate'                 => Permission::BANKING_UPDATE_ACCOUNT,
        'banking_account_webhook_account'
        . '_info_internal'                        => Permission::BANKING_UPDATE_ACCOUNT,

        'fetch_throttle_settings'                  => Permission::VIEW_THROTTLE_SETTINGS,
        'edit_throttle_settings'                   => Permission::EDIT_THROTTLE_SETTINGS,
        'bootstrap_key_cache'                      => Permission::EDIT_THROTTLE_SETTINGS,
        'throttle_migrate_redis'                   => Permission::EDIT_THROTTLE_SETTINGS,
        'throttle_create_config'                   => Permission::EDIT_THROTTLE_SETTINGS,
        'throttle_delete_config'                   => Permission::EDIT_THROTTLE_SETTINGS,
        'throttle_get_config'                      => Permission::VIEW_THROTTLE_SETTINGS,
        'edge_list_services'                       => Permission::VIEW_THROTTLE_SETTINGS,
        'edge_list_routes'                         => Permission::VIEW_THROTTLE_SETTINGS,
        'edge_create_rate_limit_rule'              => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_list_rate_limit_rules'               => Permission::VIEW_THROTTLE_SETTINGS,
        'edge_update_rate_limit_rule'              => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_delete_rate_limit_rule'              => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_create_rate_limit_limit'             => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_list_rate_limit_limits'              => Permission::VIEW_THROTTLE_SETTINGS,
        'edge_update_rate_limit_limit'             => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_delete_rate_limit_limit'             => Permission::EDIT_THROTTLE_SETTINGS,
        'edge_get_consumer'                        => Permission::VIEW_THROTTLE_SETTINGS,
        'waf_rule_signed_url'                      => Permission::VIEW_THROTTLE_SETTINGS,

        'excel_store_list_pages'                   => Permission::ACCESS_EXCEL_STORE,
        'excel_store_create_page'                  => Permission::ACCESS_EXCEL_STORE,
        'excel_store_update_page'                  => Permission::ACCESS_EXCEL_STORE,
        'excel_store_get_records'                  => Permission::ACCESS_EXCEL_STORE,
        'excel_store_update_records'               => Permission::ACCESS_EXCEL_STORE,
        'excel_store_delete_records'               => Permission::ACCESS_EXCEL_STORE,
        'excel_store_page_by_url'                  => Permission::ACCESS_EXCEL_STORE,

        'banking_account_yesb_bulk_create'         => Permission::BANKING_UPDATE_ACCOUNT,
        'banking_account_activation_status_'
        . 'change_log'                             => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_spocs'         => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_ops_mx_pocs'              => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_detail_create' => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_detail_update' => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_detail_update'.
        '_internal'                                 => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_comments_create'          => Permission::VIEW_ACTIVATION_FORM,
        'co_created_reset_password_admin'          => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_mis_download'  => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_activation_mis_report'    => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_comments_list'            => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_call_log_list'            => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_comment_edit'             => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_bulk_assign_reviewer'     => Permission::ASSIGN_BANKING_ACCOUNT_REVIEWER,
        'set_channel_action'                       => Permission::SETTLEMENT_BULK_UPDATE,
        'get_channel_action'                       => Permission::SETTLEMENT_BULK_UPDATE,
        'banking_account_create_dashboard_admin'   => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_statement_details_create' => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_customer_appointment_dates' => Permission::VIEW_ACTIVATION_FORM,

        'update_to_ca_onboarding_partner_type'     => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_bank_lms_assign_to_partner_bulk' => Permission::VIEW_ACTIVATION_FORM,
        'create_invitation_for_ca_onboarding_partner' => Permission::VIEW_ACTIVATION_FORM,

        'commissions_get_multiple'                 => Permission::VIEW_COMMISSIONS,
        'commissions_get'                          => Permission::VIEW_COMMISSIONS,
        'commissions_invoice_fetch_all'            => Permission::VIEW_COMMISSIONS,
        'commissions_invoice_fetch'                => Permission::VIEW_COMMISSIONS,
        'commissions_invoice_generate'             => Permission::COMMISSION_CAPTURE,
        'commissions_capture'                      => Permission::COMMISSION_CAPTURE,
        'commissions_capture_by_partner'           => Permission::COMMISSION_CAPTURE,
        'commissions_bulk_capture_by_partner'      => Permission::COMMISSION_CAPTURE,
        'commissions_get_aggregates'               => Permission::COMMISSION_PAYOUT,
        'commissions_mark_for_settlement'          => Permission::COMMISSION_PAYOUT,
        'invoice_on_hold_clear_bulk'               => Permission::ADMIN_MANAGE_PARTNERS,

        'merchant_restrict'                        => Permission::MERCHANT_RESTRICT,
        'user_account_lock_unlock_admin'           => Permission::USER_ACCOUNT_LOCK_UNLOCK,
        'user_delete_incorrect_password_count'     => Permission::USER_ACCOUNT_LOCK_UNLOCK,

        'p2p_admin_add_handle'                      => Permission::P2P_MANAGE_MERCHANT,
        'p2p_admin_update_handle'                   => Permission::P2P_MANAGE_MERCHANT,
        'p2p_admin_manage_banks'                    => Permission::P2P_MANAGE_MERCHANT,
        'recon_fetch_batchs_files_multiple'         => Permission::GET_RECONCILIATION,
        'recon_fetch_files_count'                   => Permission::GET_RECONCILIATION,

        'fts_dashboard_fund_transfer_update'                => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_fund_transfer_status_bulk'           => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_pending_transfers_get'               => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_raw_bank_status'                     => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_fund_transfer_check_status'          => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_bulk_status_get'                     => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_fetch_account_balance'               => Permission::FTS_TRANSFER_ATTEMPT_BULK_UPDATE,
        'fts_dashboard_new_channel_health_stats'            => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_trigger_health_status'               => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_sa_mappings_create'                  => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_sa_mappings_delete'                  => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_direct_account_routing_rules_create' => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_direct_account_routing_rules_delete' => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_pr_weights_create'                   => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_pr_weights_delete'                   => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_account_mappings_create'             => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_account_mappings_delete'             => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_source_account_update'               => Permission::FTS_SOURCE_ACCOUNT_UPDATE,
        'fts_dashboard_source_account_graceful_update'      => Permission::FTS_SOURCE_ACCOUNT_GRACEFUL_UPDATE,
        'fts_dashboard_transfer_force_retry'                => Permission::FTS_FORCE_RETRY_TRANSFER,
        'fts_dashboard_source_account_create'               => Permission::GATEWAY_PVT,
        'fts_dashboard_source_account_copy'                 => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_source_account_delete'               => Permission::GATEWAY_PVT,
        'mozart_gateway_action'                             => Permission::GATEWAY_PVT,
        'fts_dashboard_fail_queued_transfer'                => Permission::FTS_FAIL_QUEUED_TRANSFER,
        'fts_dashboard_fail_queued_transfer_bulk'           => Permission::FTS_FAIL_QUEUED_TRANSFER,
        'fts_dashboard_schedule_create'                     => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_schedule_delete'                     => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_schedule_update'                     => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_manual_override'                     => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_fail_fast_status_manual_update'      => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_merchant_configurations_create'      => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_merchant_configurations_delete'      => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_merchant_configurations_patch'       => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_key_value_store_patch'               => Permission::FTS_ROUTING_RULES_UPDATE,
        'fts_dashboard_key_value_store_post'               => Permission::FTS_ROUTING_RULES_UPDATE,

        //relay permissions
        'relay_get_apps'                                    => Permission::RELAY_READ_PERMISSION,
        'relay_get_app_by_id'                               => Permission::RELAY_READ_PERMISSION,
        'relay_create_app'                                  => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_update_apps'                                 => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_delete_apps'                                 => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_get_props'                                   => Permission::RELAY_READ_PERMISSION,
        'relay_create_props'                                => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_delete_props'                                => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_update_props'                                => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_get_pending_props'                           => Permission::RELAY_READ_PERMISSION,
        'relay_get_props_history'                           => Permission::RELAY_READ_PERMISSION,
        'relay_props_action'                                => Permission::RELAY_READ_WRITE_PERMISSION,
        'relay_create_bulk_props'                           => Permission::RELAY_READ_WRITE_PERMISSION,

        'reports_monthly_banking_invoice_admin'     => Permission::VIEW_MERCHANT_REPORT,

        'create_merchant_options_admin'             => Permission::MANAGE_RENDERING_PREFERENCES,
        'read_merchant_options_admin'               => Permission::MANAGE_RENDERING_PREFERENCES,
        'update_merchant_options_admin'             => Permission::MANAGE_RENDERING_PREFERENCES,
        'delete_merchant_options_admin'             => Permission::MANAGE_RENDERING_PREFERENCES,

        'merchant_inheritance_parent_fetch'                  => Permission::MANAGE_INHERITANCE,
        'merchant_inheritance_parent_set'                    => Permission::MANAGE_INHERITANCE,
        'merchant_inheritance_parent_set_bulk'               => Permission::MANAGE_INHERITANCE,
        'merchant_inheritance_parent_delete'                 => Permission::MANAGE_INHERITANCE,


        'subscription_registration_cancel_links_batch'      => Permission::CANCEL_BATCH,

        'unclaimed_merchant_poc_update'                     => Permission::ADMIN_MANAGE_PARTNERS,
        'merchant_poc_update_with_time'                     => Permission::ADMIN_MANAGE_PARTNERS,
        'merchant_poc_update'                               => Permission::ADMIN_MANAGE_PARTNERS,
        'create_submerchant_user'                           => Permission::PARTNER_AND_SUBMERCHANT_ACTIONS,

        'fetch_merchant_balance_configs'                    => Permission::FETCH_MERCHANT_BALANCE_CONFIG,
        'get_merchant_balance_config'                       => Permission::FETCH_MERCHANT_BALANCE_CONFIG,
        'add_merchant_balance_config'                       => Permission::CREATE_MERCHANT_BALANCE_CONFIG,
        'edit_merchant_balance_config'                      => Permission::EDIT_MERCHANT_BALANCE_CONFIG,

        'merchant_locked_balance_update'                    => Permission::EDIT_MERCHANT_HOLD_FUNDS,

        'commissions_invoice_status_change'         => Permission::COMMISSION_PAYOUT,

        'toggle_transaction_hold'                   => Permission::TOGGLE_TRANSACTION_HOLD_STATUS,
        'toggle_transaction_release'                => Permission::TOGGLE_TRANSACTION_HOLD_STATUS,

        'fetch_batch_action_entities'               => Permission::ADMIN_BATCH_CREATE,
        'fetch_batch_actions'                       => Permission::ADMIN_BATCH_CREATE,

        'merchant_invoice_pdf_control'              => Permission::MERCHANT_INVOICE_CONTROL,
        'merchant_invoice_entity_create_admin'      => Permission::MERCHANT_INVOICE_CONTROL,

        // Razorpay Capital
        // Financial Data Service
        'financial_data_service'                    => Permission::FINANCIAL_DATA_SERVICE,
        'user_roles_mapping_bulk'                   => Permission::MAKE_API_CALL,
        'consume_typeform_webhook'                  => Permission::EDIT_MERCHANT_INTERNATIONAL_NEW,
        'banking_account_create_admin'              => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_service_lms_routes_all'    => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_create_lms_mob'            => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_update_lms_mob'            => Permission::VIEW_ACTIVATION_FORM,
        'banking_account_service_lms_routes_ops'    => Permission::BANKING_UPDATE_ACCOUNT,
        'delete_payment_config'                     => Permission::DELETE_PAYMENT_CONFIG,
        'fetch_payment_config_admin'                => Permission::FETCH_PAYMENT_CONFIG_ADMIN,
        'create_payment_config_admin'               => Permission::CREATE_PAYMENT_CONFIG,
        'update_payment_config_admin'               => Permission::UPDATE_PAYMENT_CONFIG,
        'update_late_auth_config_admin_bulk'        => Permission::UPDATE_PAYMENT_CONFIG,
        'create_payment_config_bulk'                => Permission::CREATE_PAYMENT_CONFIG,
        'sync_pg_router_order_bulk'                 => Permission::PG_ROUTER_ORDER_SYNC,
        'admin_fetch_fund_account_validate'         => Permission::ADMIN_FETCH_FUND_ACCOUNT_VALIDATION,
        'create_promotions_events'                  => Permission::CREATE_PROMOTION_EVENT,
        'fee_recovery_payout_admin'                 => Permission::PROCESS_FEE_RECOVERY,
        'fee_recovery_payout_schedule_task'         => Permission::ASSIGN_FEE_RECOVERY_SCHEDULE,

        'fund_account_validate_bulk_patch_status'   => Permission::BULK_PATCH_FUND_ACCOUNT_VALIDATION,

        'fee_recovery_manual_update'                => Permission::PROCESS_FEE_RECOVERY,
        'gateway_file_bank_refunds_upload'          => Permission::REFUNDS_BANK_FILE_UPLOAD,

        //payout downtime
        'create_payout_downtime'                   => Permission::MANAGE_PAYOUT_DOWNTIME,
        'update_payout_downtime_by_id'             => Permission::MANAGE_PAYOUT_DOWNTIME,
        'fetch_payout_downtime_by_id'              => Permission::VIEW_PAYOUT_DOWNTIME,
        'fetch_payout_downtimes'                   => Permission::VIEW_PAYOUT_DOWNTIME,

        //fund loading downtime
        'create_fund_loading_downtime'              => Permission::MANAGE_FUND_LOADING_DOWNTIME,
        'update_fund_loading_downtime_by_id'        => Permission::MANAGE_FUND_LOADING_DOWNTIME,
        'fetch_fund_loading_downtime_by_id'         => Permission::VIEW_FUND_LOADING_DOWNTIME,
        'list_fund_loading_downtimes'               => Permission::VIEW_FUND_LOADING_DOWNTIME,
        'delete_fund_loading_downtime_by_id'        => Permission::MANAGE_FUND_LOADING_DOWNTIME,
        'list_active_fund_loading_downtimes'        => Permission::VIEW_FUND_LOADING_DOWNTIME,
        'notification_flow_fund_loading_downtime'   => Permission::MANAGE_FUND_LOADING_DOWNTIME,

        // Workflow Service requests
        'wfs_config_create'                        => Permission::WFS_CONFIG_CREATE,
        'wfs_config_update'                        => Permission::WFS_CONFIG_UPDATE,
        'wfs_config_get_admin'                     => Permission::WFS_CONFIG_CREATE,

        'wfs_workflows_list'                        => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_workflows_get'                         => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_workflow_action_create'                => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_comments_create'                       => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_comments_list'                         => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_workflow_add_assignee'                 => Permission::WFS_VIEW_SPR_WORKFLOWS,
        'wfs_workflow_remove_assignee'              => Permission::WFS_VIEW_SPR_WORKFLOWS,

        'wfs_cb_workflows_list'                     => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_workflows_get'                      => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_workflow_action_create'             => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_workflow_add_assignee'              => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_workflow_remove_assignee'           => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_comments_create'                    => Permission::WFS_VIEW_CB_WORKFLOWS,
        'wfs_cb_comments_list'                      => Permission::WFS_VIEW_CB_WORKFLOWS,

        'payout_wf_config_migrate'                 => Permission::WFS_CONFIG_CREATE,

        // Instrument requests
        'get_internal_instrument_request_by_id'       => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'get_templates'                               => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'get_method_templates'                        => Permission::PAYMENTS_TERMINAL_BUY_PRICING_PLANS,
        'patch_internal_instrument_request_by_id'     => Permission::UPDATE_INTERNAL_INSTRUMENT_REQUEST,
        'bulk_copy_internal_instrument_request'       => Permission::UPDATE_INTERNAL_INSTRUMENT_REQUEST,
        'delete_internal_instrument_request_by_id'    => Permission::DELETE_INTERNAL_INSTRUMENT_REQUEST,
        'fetch_internal_instrument_requests'          => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'patch_internal_instrument_requests'          => Permission::UPDATE_INTERNAL_INSTRUMENT_REQUEST,
        'pause_internal_instrument_request_by_id'     => Permission::UPDATE_KAM_INTERNAL_INSTRUMENT_REQUEST,
        'bulk_cancel_internal_instrument_requests'    => Permission::CANCEL_INTERNAL_INSTRUMENT_REQUEST,
        'instrument_request_razorx_admin'             => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'fetch_instrument_comment_list'               => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'fetch_instrument_previous_status'            => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'terminal_enable_bulk'                        => Permission::ENABLE_TERMINALS_BULK,
        'update_template_mappings'                    => Permission::EDIT_IIR_TEMPLATE,
        'fetch_template_mappings'                     => Permission::VIEW_IIR_TEMPLATE,
        'terminals_proxy_fetch_multiple'              => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'terminals_proxy_update_methods_from_rules'   => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'merchant_instrument_request_create'          => Permission::UPDATE_MERCHANT_INSTRUMENT_REQUEST,
        'merchant_instrument_request_create_bulk'     => Permission::UPDATE_MERCHANT_INSTRUMENT_REQUEST,
        'merchant_instrument_request_create_bulk_v2'  => Permission::UPDATE_MERCHANT_INSTRUMENT_REQUEST,
        'merchant_instrument_request_update_by_id'    => Permission::UPDATE_MERCHANT_INSTRUMENT_REQUEST,
        'mir_instrument_set'                          => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,
        'fetch_merchant_instrument_requests'          => Permission::VIEW_MERCHANT_INSTRUMENT_REQUEST,
        'trigger_instrument_rules_event'              => Permission::VIEW_INTERNAL_INSTRUMENT_REQUEST,

        'terminals_universal_proxy'                   => Permission::TERMINALS_UNIVERSAL_PROXY,
        'create_iir_discrepancy_answer_admin'         => Permission::VIEW_IIR_DISCREPANCY,
        'get_discrepancy_list'                        => Permission::VIEW_IIR_DISCREPANCY,
        'create_iir_discrepancy'                      => Permission::CREATE_IIR_DISCREPANCY,
        'create_iir_discrepancy_bulk'                 => Permission::CREATE_IIR_DISCREPANCY,
        'fetch_iir_discrepancies_of_iir'              => Permission::VIEW_IIR_DISCREPANCY,
        'fetch_iir_discrepancies_for_merchant'        => Permission::VIEW_IIR_DISCREPANCY,
        'patch_iir_discrepancy_by_id'                 => Permission::CREATE_IIR_DISCREPANCY,
        'create_static_discrepancy'                   => Permission::CREATE_DISCREPANCY,
        'edit_static_discrepancy'                     => Permission::EDIT_DISCREPANCY,

        // gateway credential
        'terminals_proxy_create_gateway_credential'   => Permission::CREATE_GATEWAY_CREDENTIAL,
        'terminals_proxy_fetch_gateway_credential'    => Permission::VIEW_GATEWAY_CREDENTIAL,
        'terminals_proxy_delete_gateway_credential'   => Permission::DELETE_GATEWAY_CREDENTIAL,

        'execute_terminal_test_run'                   => Permission::EXECUTE_TERMINAL_TEST,
        'fetch_terminal_test_run'                     => Permission::EXECUTE_TERMINAL_TEST,
        'fetch_terminal_test_run_by_params'           => Permission::EXECUTE_TERMINAL_TEST,
        'create_terminal_test_instrument'             => Permission::EXECUTE_TERMINAL_TEST,
        'delete_terminal_test_instrument'             => Permission::EXECUTE_TERMINAL_TEST,

        'get_irctc_settlement_file_admin'             => Permission::GET_IRCTC_SETTLEMENT_FILE,

        'update_payout_status'                     => Permission::PAYOUT_STATUS_UPDATE_MANUALLY,
        'update_payout_status_batch'               => Permission::PAYOUT_STATUS_UPDATE_MANUALLY,
        'payouts_bulk_amount_type'                 => Permission::MANAGE_BULK_FEATURE_MAPPING,

        'admin_key_migrate_to_credcase'            => Permission::EDGE_WRITE_OPERATION,
        'admin_consumer_migrate_apps_to_credcase'  => Permission::EDGE_WRITE_OPERATION,
        'admin_key_migrate_impersonation_grants'   => Permission::EDGE_WRITE_OPERATION,

        'admin_access_maps_bootstrap_cache'        => Permission::STORK_WRITE_OPERATION,

        'admin_bulk_assign_role'                   => Permission::ADMIN_BULK_ASSIGN_ROLE,

        // update free payout attributes
        'update_free_payouts_attributes'              => Permission::UPDATE_FREE_PAYOUTS_ATTRIBUTES,
        'create_sub_balances'                         => Permission::PAYOUT_STATUS_UPDATE_MANUALLY,
        'sub_balance_adjustment'                      => Permission::PAYOUT_STATUS_UPDATE_MANUALLY,

        // Get free_payout attributes for balance
        'admin_get_free_payouts_attributes'           => Permission::VIEW_FREE_PAYOUTS_ATTRIBUTES,

        // Free Payout Migration
        'admin_free_payout_migration'              => Permission::FREE_PAYOUT_MIGRATION_TO_PS,

        'banking_account_statement_process_admin'     => Permission::MANAGE_BULK_FEATURE_MAPPING,
        'tax_payments_admin_auth_api'                 => Permission::TAX_PAYMENT_ADMIN_AUTH_EXECUTE,

        'accounting_integrations_admin_routes'        => Permission::TAX_PAYMENT_ADMIN_AUTH_EXECUTE,

        'invoice_admin_actions'                       => Permission:: TAX_PAYMENT_ADMIN_AUTH_EXECUTE,

        'payout_links_admin_auth_api'                 => Permission::TAX_PAYMENT_ADMIN_AUTH_EXECUTE,
        'salesforce_opportunity_details'              => Permission::VIEW_SALESFORCE_OPPORTUNITY_DETAIL,

        'fee_recovery_payout_manual_retry'            => Permission::PROCESS_FEE_RECOVERY,

        'banking_account_statement_source_update'     => Permission::MANUALLY_LINK_RBL_ACCOUNT_STATEMENT,

        'banking_account_statement_source_update_validate' => Permission::MANUALLY_LINK_RBL_ACCOUNT_STATEMENT,


        'reward_update'                               => Permission::UPDATE_REWARD,
        'reward_create'                               => Permission::CREATE_REWARD,
        'reward_delete'                               => Permission::DELETE_REWARD,
        'advertiser_logo'                             => Permission::GET_ADVERTISER_LOGO,
        'rewards_batch_email'                         => Permission::REWARD_BATCH_MAIL,
        // Admin merchant notification configs
        'create_merchant_notification_config_admin'           => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'update_merchant_notification_config_admin'           => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'fetch_merchant_notification_config_admin'            => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'list_merchant_notification_config_admin'             => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'delete_merchant_notification_config_admin'           => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'disable_merchant_notification_config_admin'          => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,
        'enable_merchant_notification_config_admin'           => Permission::MERCHANT_NOTIFICATION_CONFIG_ADMIN,

        'merchant_invoice_control'                            => Permission::MERCHANT_INVOICE_CONTROL,
        'merchant_details_suggested_update'                   => Permission::MERCHANT_INVOICE_CONTROL,

        'survey_create'                                       => Permission::NPS_SURVEY,
        'survey_edit'                                         => Permission::NPS_SURVEY,

        'app_create'                                          => Permission::APP_REGISTRATION,
        'app_update'                                          => Permission::APP_REGISTRATION,
        'app_get'                                             => Permission::APP_REGISTRATION,
        'app_mapping_create'                                  => Permission::APP_MAPPING,
        'app_mapping_delete'                                  => Permission::APP_MAPPING,
        'app_tags_delete'                                     => Permission::APP_MAPPING,

        'admin_fund_account_validate'                         => Permission::FUND_ACCOUNT_VALIDATION_ADMIN,

        'admin_tpv_create'                                    => Permission::CREATE_BANKING_ACCOUNT_TPV,
        'admin_tpv_edit'                                      => Permission::EDIT_BANKING_ACCOUNT_TPV,
        'admin_fetch_tpvs'                                    => Permission::VIEW_BANKING_ACCOUNT_TPV,
        'admin_merchants_tpvs_create'                         => Permission::CREATE_BANKING_ACCOUNT_TPV,

        'create_low_balance_config_admin'                     => Permission::CREATE_LOW_BALANCE_CONFIG_ADMIN,
        'delete_low_balance_config_admin'                     => Permission::CREATE_LOW_BALANCE_CONFIG_ADMIN,
        'update_low_balance_config_admin'                     => Permission::UPDATE_LOW_BALANCE_CONFIG_ADMIN,
        'enable_low_balance_config_admin'                     => Permission::UPDATE_LOW_BALANCE_CONFIG_ADMIN,
        'disable_low_balance_config_admin'                    => Permission::UPDATE_LOW_BALANCE_CONFIG_ADMIN,
        'list_low_balance_config_admin'                       => Permission::UPDATE_LOW_BALANCE_CONFIG_ADMIN,

        'templating_create_namespace'                         => Permission::TEMPLATING_SERVICE_WRITE_NAMESPACES,
        'templating_list_namespace'                           => Permission::TEMPLATING_SERVICE_READ_NAMESPACES,
        'templating_create_template_config'                   => Permission::TEMPLATING_SERVICE_WRITE_TEMPLATE_CONFIGS,
        'templating_update_template_config'                   => Permission::TEMPLATING_SERVICE_WRITE_TEMPLATE_CONFIGS,
        'templating_list_template_config'                     => Permission::TEMPLATING_SERVICE_READ_TEMPLATE_CONFIGS,
        'templating_get_template_config'                      => Permission::TEMPLATING_SERVICE_READ_TEMPLATE_CONFIGS,
        'templating_view_template_config'                     => Permission::TEMPLATING_SERVICE_READ_TEMPLATE_CONFIGS,
        'templating_test_pre_processor'                       => Permission::TEMPLATING_SERVICE_READ_TEMPLATE_CONFIGS,
        'templating_render_template'                          => Permission::TEMPLATING_SERVICE_READ_TEMPLATE_CONFIGS,
        'templating_delete_template_config'                   => Permission::TEMPLATING_SERVICE_DELETE_TEMPLATE_CONFIGS,
        'templating_assign_user_role'                         => Permission::TEMPLATING_SERVICE_WRITE_ROLE,
        'templating_revoke_user_role'                         => Permission::TEMPLATING_SERVICE_WRITE_ROLE,
        'currency_fetch_all_proxy'                            => Permission::CURRENCY_FETCH_RATES,

        //media Service routes
        'media_service_upload_file'                           => Permission::MEDIA_SERVICE_UPLOAD_FILE,
        'media_service_get_bucket'                            => Permission::MEDIA_SERVICE_GET_BUCKET,
        'media_service_upload_process'                        => Permission::MEDIA_SERVICE_UPLOAD_PROCESS,

        'care_service_admin_proxy'                            => Permission::MANAGE_CARE_SERVICE_CALLBACK, // todo: have more fine grained permissions at route level
        'care_service_dark_proxy'                             => Permission::CARE_SERVICE_DARK_PROXY,

        'cmma_service_admin_proxy'                            => Permission::CMMA_SERVICE_PROXY_ACCESS,
        'merchant_nc_count_admin'                                   => Permission::VIEW_MERCHANT,

        'freshchat_put_chat_timings_config'                   => Permission::MANAGE_FRESHCHAT,
        'freshchat_get_chat_timings_config'                   => Permission::MANAGE_FRESHCHAT,
        'freshchat_put_chat_holidays_config'                  => Permission::MANAGE_FRESHCHAT,
        'freshchat_get_chat_holidays_config'                  => Permission::MANAGE_FRESHCHAT,


        //Partner Activation routes
        'partner_activation_details'               => Permission::VIEW_PARTNERS,
        'partner_activation_update'                => Permission::EDIT_PARTNERS,
        'partner_activation_status'                => Permission::EDIT_ACTIVATE_PARTNER,
        'partner_actions'                          => Permission::PARTNER_ACTIONS,
        'partner_activation_bulk_assign_reviewer'  => Permission::ASSIGN_PARTNER_ACTIVATION_REVIEWER,


        // Ledger Service Routes
        'create_ledger_accounts_in_bulk'                  => Permission::LEDGER_SERVICE_ACTIONS,
        'archive_ledger_account'                          => Permission::LEDGER_SERVICE_ACTIONS,
        'update_ledger_account'                           => Permission::LEDGER_SERVICE_ACTIONS,
        'create_ledger_journal'                           => Permission::LEDGER_SERVICE_ACTIONS,
        'update_account_by_entities_and_mid'              => Permission::LEDGER_SERVICE_ACTIONS,
        'delete_ledger_ledger_config'                     => Permission::LEDGER_SERVICE_ACTIONS,
        'request_governor'                                => Permission::LEDGER_SERVICE_ACTIONS,
        'delete_merchants_ledger'                         => Permission::LEDGER_SERVICE_ACTIONS,
        'create_ledger_accounts_on_event'                 => Permission::LEDGER_CLIENT_ACTIONS,
        'create_ledger_account'                           => Permission::LEDGER_CLIENT_ACTIONS,
        'update_ledger_account_detail'                    => Permission::LEDGER_CLIENT_ACTIONS,
        'activate_ledger_account'                         => Permission::LEDGER_CLIENT_ACTIONS,
        'deactivate_ledger_account'                       => Permission::LEDGER_CLIENT_ACTIONS,
        'create_ledger_ledger_config'                     => Permission::LEDGER_CLIENT_ACTIONS,
        'update_ledger_ledger_config'                     => Permission::LEDGER_CLIENT_ACTIONS,
        'fetch_accounts_by_entities_and_merchant_id'      => Permission::LEDGER_CLIENT_ACTIONS,
        'fetch_journal_by_transactor'                     => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_ledger'                                    => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_multiple_ledger'                           => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_filter_ledger'                             => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_account_form_field_options_ledger'         => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_journal_form_field_options_ledger'         => Permission::LEDGER_VIEW_DASHBOARD,
        'replay_journal_rejected_events_ledger'           => Permission::LEDGER_CLIENT_ACTIONS,
        'fetch_ledger_config_form_field_options_ledger'   => Permission::LEDGER_VIEW_DASHBOARD,
        'fetch_account_types_ledger'                      => Permission::LEDGER_VIEW_DASHBOARD,

        'merchant_risk_data'                              => Permission::GET_MERCHANT_RISK_DATA,
        'bulk_fraud_notify'                               => Permission::BULK_FRAUD_NOTIFY,

        'max_payment_limit_update'                        => Permission::MERCHANT_MAX_PAYMENT_LIMIT_UPDATE,
        'execute_max_payment_limit_workflow'              => Permission::UPDATE_MERCHANT_MAX_PAYMENT_LIMIT_WORKFLOW,

        // PG Ledger Routes
        'pg_onboard_merchant'                               => Permission::PG_LEDGER_ACTIONS,
        'pg_offboard_merchant'                              => Permission::PG_LEDGER_ACTIONS,
        'pg_sync_balances_merchant'                         => Permission::PG_LEDGER_ACTIONS,

        // Metro service Route
        'metro_project_create'                            => Permission::METRO_PROJECT_CREATE,
        'metro_project_credentials_create'                => Permission::METRO_PROJECT_CREDENTIALS_CREATE,
        'metro_project_topic_update'                      => Permission::METRO_PROJECT_TOPIC_UPDATE,
        'retry_payouts_on_service'                        => Permission::RETRY_PAYOUTS_ON_SERVICE,
        'toggle_whatsapp_notifications'                   => Permission::EDIT_MERCHANT_FEATURES,
        'complete_submerchant_onboarding'                 => Permission::MERCHANT_ACTIONS,

        'merchant_save_business_website'                  => Permission::EDIT_MERCHANT_WEBSITE_DETAIL,

        // Merchant Risk Notes
        'merchant_risk_notes_get'                         => Permission::GET_MERCHANT_RISK_NOTES,
        'merchant_risk_notes_create'                      => Permission::CREATE_MERCHANT_RISK_NOTES,
        'merchant_risk_notes_delete'                      => Permission::DELETE_MERCHANT_RISK_NOTES,

        // Merchant Risk Alerts
        'merchant_risk_alerts_foh_workflow_trigger_nc'    => Permission::MERCHANT_RISK_ALERT_FOH,
        'merchant_risk_alerts_needs_clarification_fetch_mapping'  => Permission::MERCHANT_RISK_ALERT_FOH,
        'merchant_risk_alerts_create_rule'                => Permission::MERCHANT_RISK_ALERT_UPSERT_RULE,
        'merchant_risk_alerts_update_rule'                => Permission::MERCHANT_RISK_ALERT_UPSERT_RULE,
        'merchant_risk_alerts_delete_rule'                => Permission::MERCHANT_RISK_ALERT_DELETE_RULE,

        //cyber helpdesk
        'cyber_helpdesk_admin_upload_document'    => Permission::CREATE_CYBER_HELPDESK_WORKFLOW,
        'cyber_helpdesk_admin_delete_document'    => Permission::CREATE_CYBER_HELPDESK_WORKFLOW,
        'cyber_helpdesk_admin_create_ticket'      => Permission::CREATE_CYBER_HELPDESK_WORKFLOW,

        // Risk Audit Workflow Actions
        'w-actions_merchant_risk_audit_get'               => Permission::VIEW_ALL_WORKFLOW,

        'decrypt_merchant_website_comment'                => Permission::DECRYPT_MERCHANT_WEBSITE_COMMENT,

        'user_verify_contact_batch'                       => Permission::UPDATE_USER_CONTACT_MOBILE,
        'bulk_regenerate_api_keys'                        => Permission::BULK_REGENERATE_API_KEYS,
        'update_trusted_badge_status'                     => Permission::UPDATE_TRUSTED_BADGE_STATUS,
        'tokenisation_local_cards_bulk'                   => Permission::BULK_TOKENISATION,
        'risk_attributes_get'                             => Permission::MERCHANT_ACTIONS,
        'create_risk_action'                              => Permission::MERCHANT_ACTIONS,


        'banking_axis_invitations_send'                   => Permission::REJECT_PAYOUT,
        // growth service
        'growth_downtime_for_x'                           => Permission::ENABLE_DOWNTIME_NOTIFICATION_X_DASHBOARD,
        'country_fetch'                                   => '*',
        'state_fetch'                                     => '*',

        //FIRS documents
        'firs_document_fetch'                 =>'*',
        'firs_document_download'              =>'*',

        // Payment Fraud
        'get_fraud_attributes'                              => Permission::GET_FRAUD_ATTRIBUTES,
        'save_payment_fraud'                                => Permission::SAVE_PAYMENT_FRAUD,

        'oauth_token_fetch_multiple'                        =>Permission::MERCHANT_GET_OAUTH_TOKEN,

        //Purpose code routes permission
        'purpose_code_admin'                  => Permission::VIEW_MERCHANT,
        'admin_patch_purpose_code'            => Permission::EDIT_MERCHANT,

        'hs_code_admin_fetch'                 => Permission::VIEW_MERCHANT,
        'admin_patch_hs_code'                 => Permission::EDIT_MERCHANT,
        'fetch_admin_hs_code'                 => Permission::VIEW_MERCHANT,

        'update_merchant_sla_for_on_hold_payouts'           => Permission::SET_MERCHANT_SLA_FOR_ON_HOLD_PAYOUTS,

        //Merchant International Integrations
        'merchant_integration_create'           => Permission::VIEW_MERCHANT,
        'merchant_integrations_get'             => Permission::VIEW_MERCHANT,
        'merchant_integrations_delete'          => Permission::VIEW_MERCHANT,

        //Global Bank Account Beneficiary creation
        'create_beneficiary_for_international_payout' => Permission::VIEW_MERCHANT,

        'get_beneficiary_details_for_international_payout_admin' => Permission::VIEW_MERCHANT,

        //Emerchantpay APM onboarding request
        'emerchantpay_get_request_data'         => Permission::VIEW_MERCHANT,
        'emerchantpay_create_request_data'      => Permission::VIEW_MERCHANT,

        'admin_collect_info_merchant_details_patch'        =>Permission::UPDATE_MERCHANT_INSTRUMENT_REQUEST,


        'banking_account_statement_fetch_missing'        => Permission::FETCH_MISSING_BAS,
        'banking_account_statement_async_insert_missing' => Permission::FETCH_MISSING_BAS,
        'banking_account_statement_detect_missing'       => Permission::FETCH_MISSING_BAS,

        'merchant_features_edit'                     => Permission::UPDATE_MERCHANT_FEATURE,
        'enable_non_3ds_self_serve'                  => Permission::ENABLE_NON_3DS_PROCESSING,
        'get_non_3ds_details'                        => Permission::VIEW_ALL_WORKFLOW,

        // Self serve workflow admin routes
        'workflow_config_create_admin'              => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'workflow_config_update_admin'              => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'workflow_config_delete_admin'              => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'workflow_config_create_bulk_admin'         => Permission::SELF_SERVE_WORKFLOW_CONFIG,

        'salesforce_event_admin'                    => Permission::VIEW_ACTIVATION_FORM,
        'salesforce_event_admin_one_ca'             => Permission::SUBMIT_ONE_CA,

        'mob_intent_apply_application'              => Permission::VIEW_ACTIVATION_FORM,
        'mob_fetch_application'                     => Permission::VIEW_ACTIVATION_FORM,
        'mob_fetch_multiple_applications'           => Permission::VIEW_ACTIVATION_FORM,
        'mob_create_intent'                         => Permission::VIEW_ACTIVATION_FORM,
        'mob_fetch_intent'                          => Permission::VIEW_ACTIVATION_FORM,
        'mob_fetch_multiple_intents'                => Permission::VIEW_ACTIVATION_FORM,
        'mob_get_workflow'                          => Permission::VIEW_ACTIVATION_FORM,
        'mob_save_workflow'                         => Permission::VIEW_ACTIVATION_FORM,

        //magic checkout
        '1cc_shopify_fetch_meta_fields'            => Permission::MAGIC_OPS,
        '1cc_shopify_update_meta_fields'           => Permission::MAGIC_OPS,
        '1cc_shopify_fetch_themes'                 => Permission::MAGIC_OPS,
        '1cc_shopify_insert_theme'                 => Permission::MAGIC_OPS,
        '1cc_shopify_render_magic_snippet'         => Permission::MAGIC_OPS,
        'admin_1cc_whitelist_coupons'              => Permission::MAGIC_OPS,
    ];

    public static $bankLmsRoutePermissions = [
        'banking_account_bank_lms_fetch_multiple'      => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'banking_account_bank_lms_fetch_by_id'         => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'banking_account_bank_lms_patch_lead'          => Permission::RBL_BANK_MID_OFFICE_EDIT_LEAD,
        'banking_account_bank_lms_activity_list'       => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'banking_account_bank_lms_comments_list'       => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'banking_account_bank_lms_comment_create'      => Permission::RBL_BANK_MID_OFFICE_EDIT_LEAD,
        'banking_account_bank_lms_assign_bank_poc'     => Permission::RBL_BANK_MID_OFFICE_MANAGE_LEAD,
        'banking_account_bank_lms_download_mis'        => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'banking_account_bank_lms_send_complete_mis'   => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'merchant_fetch_users'                         => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'fetch_branch_list'                            => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
        'fetch_rm_list'                                => Permission::RBL_BANK_MID_OFFICE_VIEW_LEAD,
    ];

    public static $bankingRoutePermissions = [
        'merchant_ip_config_create'                    => Permission::MERCHANT_IP_WHITELIST,
        'merchant_ip_config_fetch'                     => Permission::MERCHANT_IP_WHITELIST,
        'user_check_has_set_password'                  => Permission::VIEW_USER,
        'mob_fetch_multiple_intents'                   => Permission::MOB_SERVICE_READ,
        'mob_fetch_intent'                             => Permission::MOB_SERVICE_READ,
        'mob_fetch_multiple_applications'              => Permission::MOB_SERVICE_READ,
        'mob_create_intent'                            => Permission::MOB_SERVICE_WRITE,
        'mob_fetch_application'                        => Permission::MOB_SERVICE_READ,
        'mob_intent_apply_application'                 => Permission::MOB_SERVICE_WRITE,
        'mob_save_workflow'                            => Permission::MOB_SERVICE_WRITE,
        'switch_merchant_token'                        => '*',
        'mob_get_workflow'                             => Permission::MOB_SERVICE_READ,
        'merchant_store_add'                           => Permission::EDIT_MERCHANT,
        'merchant_store_fetch'                         => Permission::VIEW_MERCHANT,
        'merchant_activation_needs_clarification'      => '*',
        'merchant_activation_otp_send'                 => Permission::UPDATE_MERCHANT_DETAILS,
        'merchant_business_types'                      => Permission::MERCHANT_ONBOARDING,
        'merchant_fire_hubspot_event'                  => Permission::MERCHANT_ONBOARDING_WRITE,
        'merchant_create_lead_to_salesforce'           => Permission::MERCHANT_ONBOARDING_WRITE,
        'accounting_payouts_integration_status'        => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_payouts_cash_flow_list_ba'         => Permission::SYNC_ACCOUNTING_INTEGRATION,
        'accounting_payouts_cash_flow_update_ba_mapping'=>Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_payouts_integration_app_get_url'   => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_payouts_integration_app_initiate'  => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_payouts_integration_status_app'    => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_payouts_app_credentials'           => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_payouts_delete_integration'        => Permission::DELETE_ACCOUNTING_INTEGRATION,
        'accounting_payouts_sync_status'               => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_payouts_sync'                      => Permission::SYNC_ACCOUNTING_INTEGRATION,
        'accounting_payouts_waitlist'                  => Permission::WAITLIST_ACCOUNTING_INTEGRATION,

        'accounting_integration_get_organization'         => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_integration_set_organization'         => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_integration_get_chart_of_accounts'    => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_integration_put_chart_of_accounts'    => Permission::UPDATE_ACCOUNTING_INTEGRATION,
        'accounting_integration_sync_chart_of_accounts'   => Permission::SYNC_ACCOUNTING_INTEGRATION,
        'accounting_integration_bank_statement_fetch_trigger_merchant' => Permission::SYNC_ACCOUNTING_INTEGRATION,
        'accounting_integration_bank_transactions_sync_status'         => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_integration_check_bank_ledger_mapping_required'    => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_integration_get_all_settings'         => Permission::VIEW_ACCOUNTING_INTEGRATION,
        'accounting_integration_add_or_update_settings'   => Permission::CREATE_ACCOUNTING_INTEGRATION,
        'accounting_integration_tally_delete_integration' => Permission::DELETE_ACCOUNTING_INTEGRATION,
        'accounting_integration_get_bank_statement_report' => Permission::VIEW_ACCOUNTING_INTEGRATION,

        'merchant_primary_balance_fetch'               => '*',
        'ufh_upload_file'                              => '*',
        'capital_cards_service'                        => '*',
        'capital_cards_onboarding'                     => '*',
        'capital_virtual_cards_generate_token'         => '*',
        'otp_create'                                   => '*',
        'banking_account_update_dashboard'             => Permission::BANKING_ACCOUNT_WRITE,
        'banking_accounts_get'                         => Permission::BANKING_ACCOUNT_READ,
        'banking_account_verify_otp'                   => Permission::BANKING_ACCOUNT_WRITE,
        'los_service'                                  => '*',
        'loc_service'                                  => '*',
        'capital_collections_service'                  => '*',
        'capital_marketplace_service'                  => '*',
        // common routes between banking and admin dashboard
        'merchant_balance_fetch'                       => Permission::VIEW_MERCHANT_BALANCE,
        'merchant_balance_fetch_by_id'                 => Permission::VIEW_MERCHANT_BALANCE,
        'merchant_edit_config'                         => Permission::ASSIGN_MERCHANT_HANDLE,
        'merchant_activation_details'                  => Permission::MERCHANT_ONBOARDING,
        'merchant_fetch_users'                         => Permission::VIEW_MERCHANT_USER,
        'invitation_fetch'                             => Permission::VIEW_INVITATION,
        'merchant_analytics'                           => Permission::VIEW_MERCHANT_ANALYTICS,
        'merchant_get_tags'                            => '*',
        'webhook_edit'                                 => Permission::UPDATE_WEBHOOK,
        'webhook_delete'                               => Permission::UPDATE_WEBHOOK,
        'batch_create'                                 => Permission::CREATE_BATCH,
        'payout_links_batch_create'                    => Permission::CREATE_PAYOUT_LINKS_BATCH,
        'reporting_config_get'                         => Permission::GET_SELF_SERVE_REPORT,
        'reporting_config_list'                        => Permission::GET_SELF_SERVE_REPORT,
        'reporting_config_edit'                        => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_config_delete'                      => Permission::CREATE_SELF_SERVE_REPORT,
        'reporting_log_get'                            => Permission::VIEW_REPORTING,
        'reporting_log_list'                           => Permission::VIEW_REPORTING,
        'reporting_log_create'                         => Permission::CREATE_REPORTING,
        'reporting_log_update'                         => Permission::UPDATE_REPORTING,
        'ufh_get_file_signed_url'                      => '*',
        'payout_create'                                => Permission::CREATE_PAYOUT,
        'payout_validate'                              => Permission::CREATE_PAYOUT,
        'payouts_batch_create'                         => Permission::CREATE_PAYOUT,
        'payout_create_with_otp'                       => Permission::CREATE_PAYOUT,
        'composite_payout_create_with_otp'             => Permission::CREATE_PAYOUT,
        'payout_create_2FA'                            => Permission::CREATE_PAYOUT,
        'payout_send_2FA_otp'                          => Permission::CREATE_PAYOUT,
        'undo_payout_creation'                         => Permission::CREATE_PAYOUT,
        'resume_payout_creation'                       => Permission::CREATE_PAYOUT,
        'payout_get_holiday_details'                   => Permission::CREATE_PAYOUT,
        'currency_fetch_all_proxy'                     => '*',
        'reports_monthly_banking_invoice'              => '*',
        'merchant_activation_business_categories'      => Permission::MERCHANT_ONBOARDING,
        'merchant_activation_business_categories_v2'   => Permission::VIEW_MERCHANT,
        'merchant_activation_update_website'           => Permission::EDIT_MERCHANT_WEBSITE_DETAIL,
        'fetch_merchant_balance_configs'               => '*',
        'balance_fetch'                                => '*',
        'setl_amount'                                  => '*',
        'merchant_submit_support_call_request'         => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        // Specific to Banking
        'payout_bulk_create'                           => Permission::CREATE_PAYOUT_BULK,
        // This is for batch service -- change name
        'payout_bulk_approve'                          => Permission::APPROVE_PAYOUT_BULK,
        // This is for dashboard
        'payout_approve_bulk'                          => Permission::APPROVE_PAYOUT_BULK,
        'payout_reject_bulk'                           => Permission::REJECT_PAYOUT_BULK,
        'payout_approve'                               => Permission::APPROVE_PAYOUT,
        'payout_2fa_approve'                           => Permission::APPROVE_PAYOUT,
        'payout_reject'                                => Permission::REJECT_PAYOUT,
        'payout_fetch_by_id'                           => Permission::VIEW_PAYOUT,
        'payout_update_attachments'                    => Permission::UPDATE_PAYOUT_ATTACHMENT,
        'payout_download_attachments'                  => Permission::DOWNLOAD_PAYOUT_ATTACHMENTS,
        'payout_report_get_attachment_signed_url'      => Permission::DOWNLOAD_PAYOUT_ATTACHMENTS,
        'payout_report_get_attachment_details'         => Permission::DOWNLOAD_PAYOUT_ATTACHMENTS,
        'payout_upload_attachment'                     => Permission::CREATE_PAYOUT,
        'payout_get_attachment_signed_url'             => Permission::VIEW_PAYOUT,
        'payout_fetch_multiple'                        => Permission::VIEW_PAYOUT,
        'payout_status_to_reason_mapping'              => Permission::VIEW_PAYOUT,
        'payout_cancel'                                => Permission::CANCEL_PAYOUT,
        'payout_update_status'                         => Permission::UPDATE_PAYOUT,
        'payout_purpose_get'                           => Permission::VIEW_PAYOUT_PURPOSE,
        'payout_purpose_post'                          => Permission::CREATE_PAYOUT_PURPOSE,
        'payout_fetch_reversals'                       => Permission::VIEW_PAYOUT_REVERSAL,
        'payouts_summary'                              => Permission::VIEW_PAYOUT_SUMMARY,
        'payouts_workflow_summary'                     => Permission::VIEW_PAYOUT_WORKFLOW_SUMMARY,
        'payouts_workflow_config_get'                  => Permission::VIEW_PAYOUT_WORKFLOW_SUMMARY,
        'wfs_config_get'                               => Permission::VIEW_PAYOUT_WORKFLOW_SUMMARY,
        'payout_links_fetch_multiple'                  => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_fetch_by_id'                     => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_create'                          => Permission::CREATE_PAYOUT_LINKS,
        'payout_links_approve'                         => Permission::APPROVE_PAYOUT_LINKS,
        'payout_links_approve_otp'                     => Permission::APPROVE_PAYOUT_LINKS,
        'payout_links_reject'                          => Permission::REJECT_PAYOUT_LINKS,
        'payout_links_workflow_summary'                => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_bulk_approve'                    => Permission::BULK_APPROVE_PAYOUT_LINKS,
        'payout_links_bulk_approve_otp'                => Permission::BULK_APPROVE_PAYOUT_LINKS,
        'payout_links_bulk_reject'                     => Permission::BULK_REJECT_PAYOUT_LINKS,
        'payout_links_upload_attachment'               => Permission::CREATE_PAYOUT_LINKS,
        'payout_links_get_signed_url'                  => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_update_attachments'              => Permission::CREATE_PAYOUT_LINKS,
        'payout_links_update'                          => Permission::CREATE_PAYOUT_LINKS,
        'payout_links_cancel'                          => Permission::CANCEL_PAYOUT_LINKS,
        'payout_links_merchant_on_boarding_status'     => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_merchant_summary'                => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_batch_summary'                   => Permission::VIEW_PAYOUT_LINKS,
        'payout_links_merchant_settings_get'           => Permission::DASHBOARD_PAYOUT_LINKS,
        'payout_links_merchant_settings_post'          => Permission::DASHBOARD_PAYOUT_LINKS,
        'payout_links_resend_notification'             => Permission::RESEND_PAYOUT_LINKS,
        'vendor_payment_get_email_mapping'             => Permission::ENABLE_EMAIL_IMPORT,
        'vendor_payment_send_vendor_invite_ei'         => Permission::INVITE_VENDOR,
        'vendor_payment_disable_vendor_portal'         => Permission::INVITE_VENDOR,
        'vendor_payment_enable_vendor_portal'          => Permission::INVITE_VENDOR,
        'vendor_payment_create_email_mapping'          => Permission::CREATE_VENDOR_PAYMENTS_EMAIL,
        'vendor_payment_contact_list'                  => Permission::VIEW_CONTACT,
        'vendor_payment_invoice_upload'                => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_create_file_upload'            => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_get_file_upload'               => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_delete_file_upload'            => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_add_or_update_settings'        => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_get_settings'                  => Permission::VIEW_VENDOR_PAYMENTS,

        'vendor_payment_get_latest_approvers'          => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_get_timeline_view'             => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_get_ocr_data'                  => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_invoice_get_signed_url'        => Permission::GET_SIGNED_URL,
        'vendor_payment_get_auto_processed_invoice'    => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_contact_get'                   => Permission::VIEW_CONTACT,
        'vendor_payment_contact_create'                => Permission::CREATE_CONTACT,
        'vendor_payment_contact_update'                => Permission::UPDATE_CONTACT,
        'vendor_payment_create_vendor_advance'         => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_get_vendor_advance'            => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_list_vendor_advance'           => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_create'                        => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payments_check_existing_invoice'       => Permission::CREATE_VENDOR_PAYMENTS,
        'vendor_payment_list'                          => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_get_by_id'                     => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_settlement_fund_accounts'              => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_execute'                       => Permission::CREATE_PAYOUT,
        'vendor_payment_execute_2fa'                   => Permission::CREATE_PAYOUT,
        'vendor_payment_execute_bulk'                  => Permission::CREATE_PAYOUT,
        'vendor_payment_get_tds_categories'            => Permission::VIEW_TDS_CATEGORIES,
        'vendor_settlement_execute_single'             => Permission::CREATE_PAYOUT,
        'vendor_settlement_vendor_balance'             => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_settlement_execute_multiple'           => Permission::CREATE_PAYOUT,
        'vendor_settlement_mark_as_paid'               => Permission::EDIT_VENDOR_PAYMENTS,
        'vendor_payment_summary'                       => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_edit'                          => Permission::EDIT_VENDOR_PAYMENTS,
        'vendor_payment_cancel'                        => Permission::CANCEL_VENDOR_PAYMENTS,
        'vendor_payment_bulk_cancel'                   => Permission::CANCEL_VENDOR_PAYMENTS,
        'vendor_payment_accept'                        => Permission::EDIT_VENDOR_PAYMENTS,
        'vendor_payment_mark_as_paid'                  => Permission::EDIT_VENDOR_PAYMENTS,
        'vendor_payment_reporting_info'                => Permission::GENERATE_VP_INVOICE_ZIP,
        'vendor_payment_update_invoice_file_id'        => Permission::EDIT_VENDOR_PAYMENTS,
        'vendor_payment_bulk_invoice_download'         => Permission::GENERATE_VP_INVOICE_ZIP,
        'vendor_payment_get_invoice_zip_file'          => Permission::GENERATE_VP_INVOICE_ZIP,
        'vendor_payment_get_quick_filter_amounts'      => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_payment_list_vendors'                  => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_sign_up_create_business_info'          => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_sign_up_get_business_info_status'      => Permission::VIEW_VENDOR_PAYMENTS,
        'vendor_invoices_list'                         => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_invoice_create'                        => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_list_tds_categories'            => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_invoice_get_by_id'                     => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_invoice_get_signed_url'         => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_invites_list'                   => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_upload_invoice'                 => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_get_ocr_data'                   => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_get_vendor_preferences'         => Permission::VENDOR_PORTAL_PERMISSION,
        'vendor_portal_update_vendor_preferences'      => Permission::VENDOR_PORTAL_PERMISSION,
        'x_apps_get_all_settings'                      => Permission::UPDATE_TAX_PAYMENT_SETTINGS,
        'x_apps_add_or_update_settings'                => Permission::UPDATE_TAX_PAYMENT_SETTINGS,
        'accounting_integrations_proxy_routes'         => '*',
        'accounts_receivable_all_routes'               => '*',
        'business_reporting_all_proxy_routes'          => '*',
        'tax_get_meta_states'                          => Permission::VIEW_TAX_STATES,
        'invite_to_vendor_portal'                      => Permission::INVITE_VENDOR,
        'resend_invite_to_vendor_portal'               => Permission::INVITE_VENDOR,
        'merchant_edit_config_logo'                    => Permission::MERCHANT_CONFIG_LOGO,
        'contact_get'                                  => Permission::VIEW_CONTACT,
        'contact_list'                                 => Permission::VIEW_CONTACT,
        'contact_create'                               => Permission::CREATE_CONTACT,
        'contact_create_address'                       => Permission::CREATE_CONTACT,
        'contact_fetch_addresses'                      => Permission::VIEW_CONTACT,
        'corporate_card_update'                        => Permission::EDIT_CORPORATE_CARD,
        'corporate_card_get'                           => Permission::VIEW_CORPORATE_CARD,
        'corporate_card_list'                          => Permission::VIEW_CORPORATE_CARD,
        'bulk_contact_create'                          => Permission::CREATE_CONTACT_BULK,
        'contact_update'                               => Permission::UPDATE_CONTACT,
//        'contact_delete'                               => Permission::DELETE_CONTACT,
        'contact_types_get'                            => Permission::VIEW_CONTACT_TYPE,
        'contact_types_post'                           => Permission::CREATE_CONTACT_TYPE,
        'fund_account_validate'                        => Permission::FUND_ACCOUNT_VALIDATION,
        'fund_account_validate_fetch'                  => Permission::VIEW_FUND_ACCOUNT_VALIDATION,
        'fund_account_validate_fetch_by_id'            => Permission::VALIDATE_FUND_ACCOUNT,
        'fund_account_get'                             => Permission::VIEW_FUND_ACCOUNT,
        'fund_account_list'                            => Permission::VIEW_FUND_ACCOUNT,
        'fund_account_create'                          => Permission::CREATE_FUND_ACCOUNT,
        'fund_account_update'                          => Permission::UPDATE_FUND_ACCOUNT,
        'fund_account_bulk_create'                     => Permission::CREATE_FUND_ACCOUNT_BULK,
        'merchant_create_key'                          => Permission::CREATE_MERCHANT_KEY,
        'merchant_create_key_with_otp'                 => Permission::CREATE_MERCHANT_KEY,
        'merchant_fetch_keys'                          => Permission::VIEW_MERCHANT_KEY,
        'merchant_replace_key'                         => Permission::CREATE_MERCHANT_KEY,
        'merchant_replace_key_with_otp'                => Permission::CREATE_MERCHANT_KEY,
        'merchant_invoice_fetch_multiple'              => Permission::VIEW_MERCHANT_INVOICE,
        'user_edit_self'                               => Permission::UPDATE_USER_PROFILE,
        'user_fetch'                                   => Permission::VIEW_USER,
        'webhook_create'                               => Permission::CREATE_WEBHOOK,
        'webhook_fetch'                                => Permission::VIEW_WEBHOOK,
        'webhook_fetch_events'                         => Permission::VIEW_WEBHOOK_EVENT,
        'webhook_fetch_multiple'                       => Permission::VIEW_WEBHOOK,
        'webhook_analytics'                            => Permission::VIEW_WEBHOOK,
        'oauth_app_webhook_create'                     => Permission::CREATE_WEBHOOK,
        'transaction_statement_fetch'                  => Permission::VIEW_TRANSACTION_STATEMENT,
        'transaction_statement_fetch_multiple'         => Permission::VIEW_TRANSACTION_STATEMENT,
        'transaction_statement_fetch_multiple_for_banking'   => Permission::VIEW_TRANSACTION_STATEMENT,
        'invitation_create'                            => Permission::CREATE_INVITATION,
        'invitation_fetch_by_token'                    => Permission::VIEW_INVITATION,
        'invitation_resend'                            => Permission::RESEND_INVITATION,
        'invitation_edit'                              => Permission::UPDATE_INVITATION,
        'invitation_delete'                            => Permission::DELETE_INVITATION,
        'invitation_action'                            => Permission::CREATE_INVITATION,
        'accounting_integrations_invite_resend'        => Permission::CREATE_INVITATION,
        'merchant_product_switch'                      => Permission::MERCHANT_PRODUCT_SWITCH,
        'user_otp_create'                              => Permission::CREATE_USER_OTP,
        'banking_account_statement_generate'           => Permission::GENERATE_BANKING_ACCOUNT_STATEMENT,
        'merchant_instant_activation_post'             => Permission::MERCHANT_INSTANT_ACTIVATION,
        'merchant_features_update'                     => Permission::UPDATE_MERCHANT_FEATURE,
        'bank_transfer_process_test'                   => Permission::UPDATE_TEST_MERCHANT_BALANCE,
        'virtual_account_banking_fetch_multiple'       => Permission::VIEW_VIRTUAL_ACCOUNT,
        'merchant_document_upload'                     => Permission::UPLOAD_MERCHANT_DOCUMENT,
        'merchant_document_url_fetch'                  => Permission::VIEW_MERCHANT,
        'merchant_document_delete'                     => Permission::DELETE_MERCHANT_DOCUMENT,
        'merchant_bank_account_change_status'          => Permission::UPDATE_MERCHANT_BANK_ACCOUNT_STATUS,
        'merchant_2fa_change_setting'                  => Permission::UPDATE_MERCHANT_2FA_SETTING,
        'merchant_post_preferences'                    => Permission::UPDATE_MERCHANT_PREFERENCE,
        'merchant_bank_allocation'                     => Permission::UPDATE_MERCHANT_PREFERENCE,
        'merchant_get_preferences'                     => Permission::VIEW_MERCHANT_PREFERENCE,
        'user_account_unlock'                          => Permission::UPDATE_MERCHANT_2FA_SETTING,
        'user_send_x_mobile_app_link'                  => '*',
        'user_2fa_change_setting'                      => '*',
        'user_opt_out_whatsapp'                        => '*',
        'user_opt_in_status_whatsapp'                  => '*',
        'user_opt_in_whatsapp'                         => Permission::MERCHANT_USER_WRITE,
        'banking_account_create'                       => Permission::BANKING_ACCOUNT_WRITE,
        'banking_account_create_dashboard'             => Permission::BANKING_ACCOUNT_WRITE,
        'get_banking_account_slot_booking_details'     => Permission::BANKING_ACCOUNT_READ,
        'rbl_current_account_serviceability_get'       => Permission::BANKING_ACCOUNT_READ,
        'merchant_activation_upload_file'              => '*',
        'user_verify_contact'                          => Permission::MERCHANT_USER_WRITE,
        'user_merchant_mapping_action'                 => Permission::UPDATE_USER_ROLE,
        'merchant_activation_save'                     => Permission::UPDATE_MERCHANT_DETAILS,
        'bvs_service_dashboard'                        => '*',
        'merchant_razorx_bulk_evaluate'                => '*',
        'growth_get_asset_details'                     => '*',
        'growth_create_pricing_subscription'           => '*',
        'growth_get_pricing_subscription_by_mid'       => '*',
        'growth_check_pricing_subscription'            => '*',
        'growth_get_template_by_id'                    => '*',
        'merchant_razorx_evaluate'                     => '*',
        'splitz_evaluate_bulk_proxy'                   => '*',
        'fetch_partner_intent'                         => '*',
        'merchant_features_fetch'                      => '*',
        'banking_accounts_list'                        => Permission::BANKING_ACCOUNT_READ,
        'user_mobile_oauth_logout'                     => '*',
        'merchant_fetch_config'                        => '*',
        'merchant_edit_pre_signup_details'             => Permission::MERCHANT_ONBOARDING_WRITE,
        'merchant_gst_fetch'                           => Permission::VIEW_MERCHANT,
        'batch_fetch_multiple'                         => '*',
        'batch_fetch_by_id'                            => '*',
        'batch_validate_file'                          => '*',
        'validate_file_name'                           => Permission::CREATE_BATCH,
        'batch_download_file'                          => '*',
        'bank_account_fetch'                           => '*',
        'pincode_get'                                  => '*',
        'user_update_contact'                          => Permission::MERCHANT_USER_WRITE,
        'user_verify_and_update_mobile_otp'            => '*',
        'user_contact_update_sent_otp'                 => '*',
        'user_verify_through_mode'                     => '*',
        'reporting_consumer_restrictions'              => '*',
        'payouts_scheduled_time_slots'                 => '*',
        'user_trigger_2fa_otp'                         => '*',

        'merchant_partner_configs_fetch'               => '*',
        'setl_holidays'                                => '*',
        'merchant_activation_update_website_status'    => '*',

        //fetches all the active downtime
        'fetch_payout_downtimes_enabled'               => '*',
        'merchant_credits_balance_fetch'               => '*',

        // called in /user api in dashboard
        'credits_fetch_multiple'                       => '*',

        // low balance configs
        'create_low_balance_config'                     => Permission::CREATE_LOW_BALANCE_CONFIG,
        'update_low_balance_config'                     => Permission::UPDATE_LOW_BALANCE_CONFIG,
        'fetch_low_balance_config'                      => '*',
        'list_low_balance_config'                       => '*',
        'delete_low_balance_config'                     => Permission::DELETE_LOW_BALANCE_CONFIG,
        'disable_low_balance_config'                    => Permission::DISABLE_LOW_BALANCE_CONFIG,
        'enable_low_balance_config'                     => Permission::ENABLE_LOW_BALANCE_CONFIG,

        // merchant notification configs
        'create_merchant_notification_config'           => Permission::CREATE_MERCHANT_NOTIFICATION_CONFIG,
        'update_merchant_notification_config'           => Permission::UPDATE_MERCHANT_NOTIFICATION_CONFIG,
        'fetch_merchant_notification_config'            => '*',
        'list_merchant_notification_config'             => '*',
        'delete_merchant_notification_config'           => Permission::DELETE_MERCHANT_NOTIFICATION_CONFIG,
        'disable_merchant_notification_config'          => Permission::DISABLE_MERCHANT_NOTIFICATION_CONFIG,
        'enable_merchant_notification_config'           => Permission::ENABLE_MERCHANT_NOTIFICATION_CONFIG,

        // tax payment permission
        'tax_payments_pay'                             => Permission::PAY_TAX_PAYMENTS,
        'tax_payments_bulk_pay'                        => Permission::PAY_TAX_PAYMENTS,
        'tax_payments_get_all_settings'                => Permission::VIEW_TAX_PAYMENT_SETTINGS,
        'tax_payments_add_or_update_settings_auto'     => Permission::UPDATE_TAX_PAYMENT_SETTINGS_AUTO,
        'tax_payments_add_or_update_settings'          => Permission::UPDATE_TAX_PAYMENT_SETTINGS,
        'tax_payments_list'                            => Permission::VIEW_TAX_PAYMENTS,
        'tax_payments_get_by_id'                       => Permission::VIEW_TAX_PAYMENTS,
        'tax_payments_monthly_summary'                 => Permission::VIEW_TAX_PAYMENTS,
        'tax_payments_mark_as_paid'                    => Permission::PAY_TAX_PAYMENTS,
        'tax_payments_challan_upload'                  => Permission::PAY_TAX_PAYMENTS,
        'tax_payments_update_challan_file_id'          => Permission::PAY_TAX_PAYMENTS,
        'tax_payments_edit'                            => Permission::CREATE_TAX_PAYMENTS,
        'tax_payments_cancel'                          => Permission::CREATE_TAX_PAYMENTS,
        'tax_payments_challan_download'                => Permission::GENERATE_TDS_CHALLAN_ZIP,
        'tax_payments_create'                          => Permission::CREATE_TAX_PAYMENTS,
        'tax_payments_invalid_tan_status'              => Permission::VIEW_TAX_PAYMENTS,
        'tax_payments_downtime_schedule'               => Permission::CREATE_TAX_PAYMENTS,
        'tax_payments_downtime_schedules_list'         => Permission::VIEW_TAX_PAYMENTS,
        'tax_payments_fetch_pending_gst'               => Permission::CREATE_TAX_PAYMENTS,
        'salesforce_event'                             => '*',
        'salesforce_opportunity_details'               => '*',
        'payment_validate_vpa_internal'                => '*',

        'get_free_payouts_attributes'                  => Permission::MERCHANT_VIEW_FREE_PAYOUTS_ATTRIBUTES,
        'payouts_bulk_sample_file'                     => '*',

        'payouts_bulk_amount_type_update'              => Permission::UPDATE_BULK_PAYOUT_AMOUNT_TYPE,

        // Bulk Payouts
        'payouts_bulk_template_file'                   => Permission::CREATE_PAYOUT_BULK,
        'payouts_batch_process'                        => Permission::CREATE_PAYOUT_BULK,
        'payouts_get_batch_rows'                       => Permission::CREATE_PAYOUT_BULK,
        'payouts_batch_validate'                       => Permission::CREATE_PAYOUT_BULK,

        //freshdesk ticket permissions
        'fd_create_ticket'                             => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        'fd_fetch_tickets'                             => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        'fd_fetch_converations'                        => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        'fd_fetch_ticket'                              => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        'fd_post_ticket_reply'                         => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,
        'fd_post_ticket_grievance'                     => Permission::CUSTOMER_SUPPORT_FULL_ACCESS,

        //TPV - Third party validation
        //- validations on source accounts through which money gets loaded to va.
        'merchant_fetch_tpvs'                          => Permission::VIEW_PAYOUT,
        'merchant_tpv_create'                          => Permission::CREATE_PAYOUT,

        //NPS
        'pending_survey_get'                           => '*',
        'update_survey_tracker'                        => Permission::CREATE_PAYOUT,

        //Banking account service
        'banking_account_service_routes'                             => Permission::BANKING_ACCOUNT_WRITE,
        'banking_account_service_pincode_serviceability_check'       => Permission::BANKING_ACCOUNT_READ,
        'banking_account_service_pincode_serviceability_check_bulk'  => Permission::BANKING_ACCOUNT_READ,
        'banking_account_service_common_serviceability_check'        => Permission::BANKING_ACCOUNT_READ,
        'banking_account_slot_book'                                  => Permission::BANKING_ACCOUNT_WRITE,
        'banking_account_get_recent_slot'                            => Permission::BANKING_ACCOUNT_READ,
        'banking_account_get_free_slot'                              => Permission::BANKING_ACCOUNT_READ,
        'banking_account_slot_reschedule'                            => Permission::BANKING_ACCOUNT_WRITE,

        // Payout Links - Shopify Integration
        'payout_links_integrate_app'                   => '*',
        'payout_links_fetch_shopify_order'             => Permission::CREATE_PAYOUT_LINKS,
        'payout_links_integration_details'             => '*',

        // Sub VA Routes
        'sub_virtual_account_list'                     => Permission::MERCHANT_FETCH_SUB_VIRTUAL_ACCOUNT,
        'sub_virtual_account_transfer_with_otp'        => Permission::MERCHANT_SUB_VIRTUAL_ACCOUNT_TRANSFER,
        'sub_virtual_account_transfer_list'            => Permission::MERCHANT_FETCH_SUB_VIRTUAL_ACCOUNT,

        // Allow coupon validation for X
        'coupon_validate'                              => Permission::COUPON_VALIDATE,
        'user_resend_verification_otp'                 => '*',
        'user_verify_email'                            => '*',
        'banking_axis_invitations_send'                => Permission::REJECT_PAYOUT,

        // Add Email
        'user_add_email'                                => Permission::ADD_MERCHANT_EMAIL,
        'user_add_email_verify'                         => Permission::ADD_MERCHANT_EMAIL,

        //Purpose code routes permission
        'purpose_code_fetch'                  => Permission::VIEW_MERCHANT,
        'merchant_patch_purpose_code'         => Permission::EDIT_MERCHANT,
        'user_fetch_purpose_code'             => '*',
        'oauth_token_fetch_multiple'          => Permission::MERCHANT_GET_OAUTH_TOKEN,

        // HS code
        'hs_code_fetch'                     => Permission::VIEW_MERCHANT,
        'merchant_patch_hs_code'            => Permission::EDIT_MERCHANT,
        'fetch_hs_code'                     => '*',

        //CAC
        'cac_privileges_fetch'                         => Permission::VIEW_PRIVILEGES,
        'cac_role_fetch_all'                           => Permission::VIEW_ALL_ROLES,
        'cac_role_fetch_role_map'                      => Permission::VIEW_ALL_ROLES,
        'view_cac_role'                                => Permission::VIEW_ROLE,
        'role_self_get'                                => Permission::VIEW_USER,
        //'delete_cac_role'                              => Permission::DELETE_ROLE,
        'create_cac_role'                              => Permission::CREATE_ROLE,
        'edit_cac_role'                                => Permission::EDIT_ROLE,

        // self serve workflow
        'workflow_config_create'                    => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'workflow_config_update'                    => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'workflow_config_delete'                    => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'payouts_bulk_reject_owner'                 => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'payout_links_bulk_reject_owner'            => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'fetch_pending_payouts_summary'             => Permission::SELF_SERVE_WORKFLOW_CONFIG,
        'fetch_pending_payout_links_summary'        => Permission::SELF_SERVE_WORKFLOW_CONFIG,

        'payout_partner_bank_status'                  => Permission::CREATE_PAYOUT,
    ];

    public static $direct = [
//        'customAction',
        'payment_page_fetch_records',
        'notifications_for_b2b',
        'merchant_website_section_download',
        'public_merchant_website_section_page_load',
        'public_merchant_website_section_pages',
        'fund_addition_webhook',
        'friend_buy_reward_validation',
        'mailmodo_l1_form_submission',
        //'qr_code_demo',
        //'qr_code_demo_cors',
        'store_hosted_page_data_options',
        'store_hosted_page_by_slug',
        'store_hosted_product_detail_page',
        'store_hosted_page_by_slug_detail_page',
        'store_hosted_page_data',
        'customer_truecaller_callback',
        'customer_flagging_entity_details',
        'customer_flagging_post_grievance',
        'customer_flagging_post_grievance_options',
        'capital_collections_webhook',
        'capital_marketplace_oauth',
        'download_papernach_form',
        'splitz_evaluate',
        'splitz_evaluate_bulk',
        'splitz_preflight',
        'splitz_preflight_bulk_evaluate',
        'settlement_ondemand_razorpayx_webhook',
        'loc_razorpayx_webhook',
        'payment_links_service_hosted_page',
        'third_party_health_check',
        'channel_health_check',
        'inspector_view_get',
        'batch_upload_form_get',
        'batch_upload_form_validate_file',
        'bank_transfer_process_rbl',
        'bank_transfer_process_rbl_test',
        'device_verify',
        'upi_get_bank_list',
        'upi_read_async',
        'upi_get_key_list',
        'account',
        'corporate_card_iframe_form',
        'corporate_card_token_create',
        'payment_create_checkout_get',
        'pages_view_by_slug',
        'pages_view_by_slug_empty',
        'invoice_view_live',
        'invoice_view_test',
        'invoice_view_live_preferences_test',
        'invoice_view_test_preferences_test',
        'invoice_view_live_post',
        'invoice_view_test_post',
        'subscription_view_live',
        'subscription_view_test',
        'subscription_view_live_post',
        'subscription_view_test_post',
        'subscription_fetch_hosted_test',
        'subscription_fetch_hosted_live',
        'sms_callback',
        'checkout_public',
        'checkout_public_canary',
        'mock_hdfc_3dsecure',
        'mock_ebs_payment',
        'transparent_redirect_get',
        'transparent_redirect_post',
        'gateway_payment_callback_get',
        'gateway_payment_callback_post',
        'gateway_payment_callback_recurring',
        'gateway_payment_static_callback_get',
        'gateway_payment_static_callback_post',
        'gateway_payment_static_s2scallback_get',
        'gateway_payment_static_s2scallback_post',
        'gateway_payment_callback_kotak',
        'gateway_payment_callback_kotak_cancel',
        'gateway_payment_callback_kotak_corp_post',
        'gateway_payment_callback_kotak_corp_get',
        'gateway_payment_callback_corporation',
        'gateway_payment_callback_yesb_post',
        'gateway_payment_callback_getsimpl_post',
        'gateway_payment_callback_yesb_get',
        'gateway_emandate_callback_npci_nb',
        'gateway_payment_callback_canara_get',
        'gateway_payment_callback_canara_post',
        'gateway_payment_callback_amazonpay',
        'gateway_payment_callback_amazonpay_post',
        'terminal_onboard_callback',
        'mailgun_webhook',
        'gateway_downtime_source_webhook',
        'checkout_onyx',
        'checkout_hosted',
        'checkout_hosted_get',
        'mock_event_tracker',
        'upi_npci_request',
        'upi_zero_call',
        'mock_billdesk_payment',
        'mock_esigner_payment',
        'qr_code_download_live',
        'qr_code_download_test',
        'gateway_payment_callback_bharatqr',
        'gateway_payment_validate_bharatqr',
        'upi_transfer_process',
        'upi_transfer_process_test',
        'virtual_account_validate_vpa',
        'virtual_account_validate_vpa_test',
        'refund_fetch_for_customer',
        'refunds_fetch_for_customer',
        'get_merchant_partner_status',
        'payment_update_and_redirect',
        'payment_redirect_to_dcc_info',
        'payment_redirect_to_address_collect',
        'payment_redirect_to_authorize',
        'payment_redirect_to_authenticate_get',
        'payment_redirect_to_authenticate_post',
        'gateway_payment_callback_upi_airtel',
        'payment_page_create_order',
        'store_create_order',
        'payment_page_create_order_option',
        'payment_button_create_order_option',
        'store_create_order_options',
        'payment_button_create_order',
        'payment_links_demo',
        'payment_links_demo_cors',

        //virtual cards - capital
        'capital_virtual_cards_validate_token',
        'capital_virtual_cards_get_card_number',
        'capital_virtual_cards_get_card_cvv',
        'capital_virtual_cards_send_otp',
        'capital_virtual_cards_validate_session',
        'capital_virtual_cards',

        // Offline QR
        'activate_test_offline_device',
        'activate_live_offline_device',
        'offline_qr_poll_test_order_status',
        'offline_qr_poll_live_order_status',
        'consume_typeform_webhook',
        'update_wait_timeout',

        // Razorflow
        'razorflow_post_slash_command',
        'razorflow_post_slash_command_custom_endpoint',

        // Freshdesk
        'freshdesk_create_ticket',
        'freshdesk_otp_send',
        'freshdesk_fetch_tickets',
        'freshdesk_post_reply',
        'freshdesk_fetch_conversations',
        'freshdesk_raise_grievance',
        'freshdesk_account_recovery_create_ticket',

        // Generic Accounting Integration Callback
        'accounting_integrations_callback',

        //Accounting Payouts Callback
        'accounting_payouts_callback',
        'reward_terms',
        'reward_metrics',
        'reward_redirect_url',
        'trusted_badge_redirect',

        // Mandate HQ Webhook Callback
        'mandate_hq_callback',

        // Sihub Webhook
        'sihub_update_webhook',
        'sihub_delete_webhook',

        // Direct Tax-Payment
        'direct_tax_payments_tds_category_public',
        'direct_tax_payments_create',
        'direct_tax_payments_tds_category_opt',
        'direct_tax_payments_create_options',
        'direct_tax_payments_pg_webhook',
        'direct_tax_payments_config',
        'direct_tax_payments_downtime_schedule_public',
        'direct_tax_payments_downtime_schedule_opt',

        // NPS webhook
        'consume_survey_typeform_webhook',

        //website salesforce event generation
        'salesforce_event_website',
        'salesforce_event_website_cors',

        'appsflyer_attribution_details',
        'merchant_tnc_details',
        'partner_kyc_approve_reject',
        'partner_kyc_approve_reject_cors',

        // Payout Links Shopify Integration
        'payout_links_shopify_app_install',
        'payout_links_shopify_app_uninstall',
        'payout_links_shopify_app_customers_redact',
        'payout_links_shopify_app_shop_redact',
        'payout_links_shopify_customers_data_request',

        // Payout Links Widget App
        'payout_links_create_demo',
        'payout_links_create_demo_cors',
        'payout_links_customer_hosted_page_demo',
        'payout_links_generate_end_user_otp_demo',
        'payout_links_generate_end_user_otp_demo_cors',
        'payout_links_verify_customer_otp_demo',
        'payout_links_verify_customer_otp_demo_cors',
        'payout_links_initiate_demo',
        'payout_links_initiate_demo_cors',

        // Banking Account Service
        'banking_account_service_pincode_serviceability_check_bulk',

        // Growth Public Route
        'growth_get_public_asset_details',

        // Webhooks from Shopify
        '1cc_process_webhooks',
        '1cc_fetch_analytics',

        // Support Dashboard Routes
        'support_page_otp_verify',
        'app_fetch_payments',

        // Vendor Payments Public approve reject pages
        'vendor_payment_approve_reject',
        'vendor_payment_approve_reject_cors',
    ];

    public static $dynamicLifeTimeSession = [
        'freshdesk_post_reply',
        'freshdesk_fetch_conversations',
        'freshdesk_fetch_tickets',
        'freshdesk_raise_grievance',
        'freshdesk_create_ticket',
    ];

    /**
     * List of routes, requiring session changes
     */
    public static $session = [
        'merchant_checkout_preferences',
        /*
         * customer ticket rules for support page
         */
        'freshdesk_post_reply',
        'freshdesk_fetch_conversations',
        'freshdesk_fetch_tickets',
        'freshdesk_raise_grievance',
        'freshdesk_create_ticket',
        'merchant_coupon_validity',
        'internal_merchant_checkout_preferences',
        'otp_verify',
        '1cc_otp_verify',
        'support_page_otp_verify',
        '1cc_customer_truecaller_verify',
        'customer_update_global',
        'customer_truecaller_verify',
        'customer_get_saved_status',
        'payment_create',
        'payment_create_checkout',
        'payment_create_jsonp',
        'payment_create_ajax',
        'payment_create_fees',
        'payment_calculate_fees',
        'app_fetch_payments',
        'customer_logout_global',
        'app_delete_token',
        'checkout_personalisation',
        'customer_create_global_address',
        'customer_edit_global_address',
        'capital_virtual_cards_validate_token',
        'capital_virtual_cards_get_card_number',
        'capital_virtual_cards_validate_session',
        'capital_virtual_cards',
        'capital_virtual_cards_get_card_cvv',
        'capital_virtual_cards_send_otp',
        'app_fetch_tokens_v2',
        'app_delete_tokens_v2',
        'customer_record_1cc_address_consent_view',
        'customer_record_1cc_address_consent',
        'record_1cc_customer_consent',
        '1cc_shopify_checkout',
        '1cc_apply_gift_card',
        '1cc_remove_gift_card',
        '1cc_shopify_order',
        'customer_fetch_tokens_internal',
        'checkout_personalisation_internal',
        'customer_fetch_internal_for_checkout',
        'merchant_methods_offers_checkout_internal',
        'offers_fetch_for_order'
    ];

    /**
     * defined here
     *
     * Todo-
     * In throttle middleware(first) request.ctx is initialized.
     * Following skipping is bypassing it and should not have been done here.
     *
     * @var array
     */
    public static $skipThrottling = [
        'checkout_public',
    ];

    /**
     * These are all the applications we have
     * If you add something here, add it to $internal as well
     * Nothing here should be in private or admin auth
     */
    public static $internalApps = [
        'master_onboarding' => [
            'banking_account_service_common_serviceability_check',
            'banking_account_service_routes',
            'bas_internal_admin_routes',
            'merchant_post_preferences',
            'mob_to_bas_routes',
            'merchant_get_preferences',
            'merchant_activation_details',
            'banking_account_service_pincode_serviceability_check',
            'banking_account_create_lms_mob',
            'banking_account_update_lms_mob',
            'banking_account_create_dashboard',
            'banking_account_update_dashboard',
            'banking_accounts_get',
            'internal_merchant_fetch',
            'banking_accounts_list',
            'banking_accounts_get_internal',
            'banking_account_activation_detail_update_internal'
        ],

        'accounts_receivable' => [
            'contact_get_internal',
            'contact_list_internal',
            'account_receivables_merchant_details_fetch',
            'payment_links_create',
            'settings_fetch_internal',
            'settings_upsert_internal',
            'payment_links_get',
            'payout_create_internal',
            'payout_create_2FA_internal',
            'contact_fetch_address',
        ],

        'business_reporting' => [
            'merchant_fetch_internal_users',
        ],

        'accounting_integrations' => [
            'merchant_fetch_internal_users',
            'payout_fetch_multiple_internal',
            'payout_fetch_by_id_internal',
            'contact_get_internal',
            'contact_create_internal',
            'contact_list_internal',
            'contact_update_internal',
            'fund_account_get_internal',
        ],

        'metro' => [
            'payout_email_attachments',
            'account_service_handle_update_event',
        ],

        'vendor_payments' => [
            'contact_get_internal',
            'contact_list_internal',
            'contact_update_internal',
            'contact_create_internal',
            'fund_account_get_internal',
            'fund_account_list_internal',
            'payout_fetch_by_id_internal',
            'payout_create_internal',
            'payout_create_2FA_internal',
            'transaction_statement_fetch_multiple_for_banking_internal',
            'user_fetch_internal',
            'vendor_payment_verify_otp',
            'vendor_payment_send_failure_email',
            'internal_merchant_fetch',
            'internal_merchants_fetch',
            'vendor_payment_composite_expands_helper',
            'settings_fetch_internal',
            'settings_upsert_internal',
            'fund_account_create_internal',
            'fund_account_update_internal',
            'payout_create_on_internal_contact',
            'tax_payments_enabled_merchant_settings',
            'payout_cancel_internal',
            'tax_payments_send_email',
            'banking_accounts_list_internal',
            'vendor_payment_send_email_generic',
            'accounting_payouts_sync_internal',
            'app_merchant_mapping_create',
            'app_merchant_mapping_update',
            'merchant_fetch_internal_users',
            'user_details_unified',
            'payout_update_tax_payment_id',
            'bulk_payout_purpose_post',
            'accounting_integration_merchant_details',
        ],

        'dashboard' => [
            '*',
        ],

        'merchant_dashboard' => [
            'merchant_bmc_response_fetch',
            'merchant_bmc_response_save',
            'merchant_consents_save',
            'merchant_identity_verification',
            'merchant_process_verification_details',
            'merchant_activation_clarifications_fetch',
            'merchant_nc_revamp_eligibility',
            'merchant_activation_clarifications_save',
            'merchant_ip_config_fetch',
            'merchant_ip_config_create',
            'merchant_website_plugin_save',
            'payment_links_subscription_activate',
            'payment_links_subscription_deactivate',
            'payment_links_subscription_fetch',
            'fetch_international_virtual_accounts',
            'create_international_virtual_accounts',
            'fetch_balance_international_virtual_account',
            'get_beneficiary_details_for_international_payout',
            'payout_international_virtual_account',
            'fetch_all_payouts_international_virtual_account',
            'payment_update_b2b_invoice',
            'b2b_invoice_collect_address',
            'b2b_invoice_show_address',
            'state_fetch_internal',
            'collect_info_merchant_details_patch',
            'mob_fetch_multiple_intents',
            'mob_fetch_intent',
            'mob_fetch_multiple_applications',
            'mob_create_intent',
            'mob_fetch_application',
            'mob_intent_apply_application',
            'mob_save_workflow',
            'mob_get_workflow',
            'shipping_provider_list',
            'shipping_provider_post',
            'payment_page_notify_all',
            'shipping_provider_patch',
            'shipping_provider_delete',
            'shipping_method_provider_list',
            'shipping_method_provider_post',
            'shipping_method_provider_patch',
            'shipping_method_provider_delete',
            'qr_configs_create',
            'qr_configs_fetch',
            'qr_configs_delete',
            'qr_configs_update',
            'fund_addition_tpv',
            'corporate_card_get',
            'corporate_card_update',
            'corporate_card_list',
            'growth_get_asset_details',
            'growth_get_template_by_id',
            'growth_create_pricing_subscription',
            'growth_get_pricing_subscription_by_mid',
            'growth_check_pricing_subscription',
            'merchant_activation_otp_send',
            'merchant_coupons_apply',
            'store_create',
            'store_get_by_merchant',
            'store_update',
            'store_delete',
            'store_validate_slug',
            'store_add_product',
            'store_fetch_products',
            'store_get_product',
            'store_update_product',
            'store_patch_product',
            'store_upload_image',
            'merchant_store_add',
            'merchant_store_fetch',
            'm2m_referral_link_get',
            'merchant_edit_email_self_serve',
            'email_user_status_for_email_update',
            'merchant_fire_hubspot_event',
            'merchant_create_lead_to_salesforce',
            'rbl_current_account_serviceability_get',
            'account',
            'account_action',
            'account_create',
            'account_create_v2',
            'account_delete_v2',
            'account_edit',
            'account_edit_v2',
            'account_features_add',
            'account_features_get',
            'account_fetch',
            'account_fetch_by_external_id',
            'account_fetch_v2',
            'account_list',
            'accounting_payouts_app_credentials',
            'accounting_payouts_callback',
            'accounting_integrations_callback',
            'accounting_payouts_delete_integration',
            'accounting_payouts_integration_app_get_url',
            'accounting_payouts_integration_app_initiate',
            'accounting_payouts_integration_status',
            'accounting_integration_get_all_settings',
            'accounting_payouts_cash_flow_list_ba',
            'accounting_payouts_cash_flow_update_ba_mapping',
            'accounting_payouts_integration_status_app',
            'accounting_payouts_sync',
            'accounting_payouts_sync_status',
            'accounting_payouts_waitlist',
            'update_submerchant_user_contact',

            'accounting_integration_get_organization',
            'accounting_integration_set_organization',
            'accounting_integration_get_chart_of_accounts',
            'accounting_integration_put_chart_of_accounts',
            'accounting_integration_sync_chart_of_accounts',
            'accounting_integration_bank_statement_fetch_trigger_merchant',
            'accounting_integration_bank_transactions_sync_status',
            'accounting_integration_check_bank_ledger_mapping_required',
            'accounting_integration_tally_invoices',
            'accounting_integration_tally_fetch_invoice',
            'accounting_integration_tally_cancel_invoice',
            'accounting_integration_tally_fetch_payment',
            'accounting_integration_tally_acknowledge_payment',
            'accounting_integration_tally_integrate',
            'accounting_integration_tally_delete_integration',
            'accounting_integration_tally_cash_flow_acknowledge',
            'accounting_integration_tally_cash_flow_update_mapping',
            'accounting_integration_tally_fetch_cash_flow_entries',
            'accounting_integration_tally_ack_bank_transactions',
            'accounting_integration_tally_get_bank_transactions',
            'accounting_integration_tally_create_contact',
            'accounting_integration_tally_sync_status',
            'accounting_integration_add_or_update_settings',
            'accounting_integration_tally_tax_slab_rates',
            'accounting_integration_tally_banking_accounts',
            'accounting_integration_update_rx_tally_ledger_mapping',
            'accounting_integration_get_bank_statement_report',
            'activate_live_offline_device',
            'activate_test_offline_device',
            'add_additional_website_self_serve',
            'additional_website_status',
            'get_merchant_data_for_segment',
            'addon_delete',
            'addon_fetch',
            'addon_fetch_multiple',
            'adj_fetch_by_id',
            'is_admin_as_merchant',
            'adj_fetch_multiple',
            'app_delete_token',
            'app_merchant_mapping_get',
            'auth_link_paper_mandate_authenticate',
            'auth_link_paper_mandate_authenticate_proxy',
            'auth_link_paper_mandate_retry_token',
            'auth_link_paper_mandate_validate',
            'auth_link_paper_mandate_validate_proxy',
            'balance_fetch',
            'bank_account_fetch',
            'affordability_widget_details',
            'bank_transfer_process_hdfc_ecms',
            'bank_transfer_process_icici',
            'bank_transfer_process_rbl',
            'bank_transfer_process_rbl_test',
            'bank_transfer_process_test',
            'banking_account_create',
            'banking_account_create_dashboard',
            'banking_account_bank_lms_fetch_multiple',
            'banking_account_bank_lms_fetch_by_id',
            'banking_account_bank_lms_patch_lead',
            'banking_account_bank_lms_activity_list',
            'banking_account_bank_lms_comments_list',
            'banking_account_bank_lms_comment_create',
            'fetch_branch_list',
            'fetch_rm_list',
            'banking_account_bank_lms_download_mis',
            'banking_account_bank_lms_send_complete_mis',
            'banking_account_bank_lms_assign_bank_poc',
            'banking_account_service_pincode_serviceability_check_bulk',
            'get_banking_account_slot_booking_details',
            'banking_accounts_get',
            'banking_account_update_dashboard',
            'banking_account_verify_otp',
            'banking_account_statement_generate',
            'banking_accounts_list',
            'user_mobile_oauth_logout',
            'batch_create',
            'payout_links_batch_create',
            'batch_download_file',
            'batch_fetch_by_id',
            'batch_fetch_multiple',
            'batch_stats',
            'batch_upload_form_get',
            'batch_upload_form_validate_file',
            'batch_validate_file',
            'validate_file_name',
            'beta_account_create',
            'beta_account_fetch',
            'beta_account_fetch_multiple',
            'beta_account_fetch_setl_destinations',
            'beta_account_post_bank_account',
            'bharat_qr_pay_test',
            'bulk_contact_create',
            'bulk_invoice_create',
            'bulk_submerchant_assign',
            'bvs_service_dashboard',
            'can_merchant_submit_support_call_request',
            'capital_cards_service',
            'capital_cards_onboarding',
            'capital_virtual_cards_generate_token',
            'capital_collections_service',
            'capital_collections_webhook',
            'capital_marketplace_oauth',
            'capital_marketplace_service',
            'card_check_recurring',
            'card_fetch_by_id',
            'card_fetch_multiple',
            'card_issuer_validate',
            'care_service_dashboard_proxy',
            'care_service_get_dashboard_proxy',
            'channel_health_check',
            'checkout',
            'checkout_embedded',
            'checkout_embedded_get',
            'checkout_hdfcvas',
            'checkout_hosted',
            'checkout_hosted_get',
            'checkout_onyx',
            'checkout_personalisation',
            'checkout_public',
            'checkout_public_canary',
            'checkout_rewards',
            'commissions_analytics',
            'commissions_get',
            'commissions_get_multiple',
            'commissions_invoice_fetch',
            'commissions_invoice_fetch_all',
            'commissions_invoice_status_change',
            'partner_activation_details',
            'partner_sales_poc',
            'partner_request_migration',
            'partner_activation_save',
            'partner_kyc_access_request',
            'partner_kyc_revoke_access',
            'merchant_authorize_partner_save',
            'merchant_authorize_partner_status',
            'consume_typeform_webhook',
            'contact_create',
            'contact_get',
            'contact_list',
            'contact_types_get',
            'contact_types_post',
            'contact_update',
            'contact_create_address',
            'contact_fetch_addresses',
            'coupon_validate',
            'create_credit_note',
            'create_low_balance_config',
            'create_merchant_notification_config',
            'create_merchant_options',
            'create_merchant_options_admin',
            'create_payment_config',
            'create_submerchant_user',
            'create_virtual_account_from_order',
            'credit_note_apply',
            'credit_note_get',
            'credit_note_list',
            'credits_fetch_by_id',
            'credits_fetch_multiple',
            'currency_fetch_all',
            'currency_fetch_all_proxy',
            'currency_fetch_rates_proxy',
            'customer_add_bank_account',
            'customer_cancel_token',
            'customer_collect_request_fetch_private',
            'customer_create',
            'customer_create_address',
            'customer_create_token',
            'customer_create_token_public',
            'customer_delete_address',
            'customer_delete_token',
            'customer_fetch_addresses',
            'customer_fetch_bank_account',
            'customer_delete_bank_account',
            'customer_fetch_by_id',
            'customer_fetch_multiple',
            'customer_fetch_token',
            'customer_fetch_tokens',
            'customer_flagging_entity_details',
            'customer_flagging_post_grievance',
            'customer_flagging_post_grievance_options',
            'customer_get_saved_status',
            'customer_get_wallet_balance',
            'customer_get_wallet_statement',
            'customer_logout_global',
            'customer_set_primary_address',
            'customer_update',
            'customer_update_token',
            'customer_wallet_payout',
            'delete_low_balance_config',
            'delete_merchant_notification_config',
            'delete_merchant_options',
            'delete_merchant_options_admin',
            'developer_console_action',
            'developer_console_merchant_action',
            'device_create',
            'device_verify',
            'device_verify_token',
            'disable_low_balance_config',
            'disable_merchant_notification_config',
            'dispute_edit',
            'dispute_fetch',
            'dispute_fetch_multiple',
            'dispute_fetch_multiple_count',
            'dispute_file_delete',
            'dispute_files_fetch',
            'document_upload_v1',
            'document_get_v1',
            'document_download_v1',
            'document_download_v2',
            'document_get_v2',
            'document_upload_v2',
            'download_papernach_form',
            'dummy_return_callback',
            'emi_plans_fetch_multiple',
            'enable_es_scheduled',
            'enable_low_balance_config',
            'enable_merchant_notification_config',
            'entity_bulk_update',
            'entity_origin_create',
            'fb_setl_fetch_transactions',
            'fd_create_ticket',
            'fd_fetch_converations',
            'fd_fetch_ticket',
            'fd_fetch_tickets',
            'fd_post_ticket_grievance',
            'fd_post_ticket_reply',
            'fd_reserve_balance_ticket',
            'fd_reserve_balance_ticket_status',
            'feature_dummy',
            'feature_get_all',
            'feature_get_status',
            'feature_onboarding_create',
            'feature_onboarding_fetch_responses',
            'fetch_low_balance_config',
            'fetch_merchant_balance_configs',
            'fetch_merchant_notification_config',
            'fetch_merchant_products',
            'fetch_merchant_sr',
            'fetch_offline_device_multiple',
            'fetch_order_line_items',
            'fetch_partner_intent',
            'fetch_payment_config',
            'fetch_payment_merchant_actions',
            'fetch_payout_downtimes_enabled',
            'fetch_product_details_for_order',
            'fetch_product_status',
            'file_get_signed_url',
            'freshdesk_create_ticket',
            'freshdesk_fetch_tickets',
            'freshdesk_otp_send',
            'freshdesk_raise_grievance',
            'freshdesk_account_recovery_create_ticket',
            'freshchat_get_chat_timings_config_proxy',
            'freshchat_get_chat_holidays_config_proxy',
            'fund_account_bulk_create',
            'fund_account_create',
            'fund_account_create_public',
            'fund_account_get',
            'fund_account_list',
            'fund_account_update',
            'banking_account_beneficiary_fetch',
            'fund_account_validate',
            'fund_account_validate_fetch',
            'fund_account_validate_fetch_by_id',
            'gateway_downtime_source_webhook',
            'gateway_emandate_callback_npci_nb',
            'gateway_payment_callback_amazonpay',
            'gateway_payment_callback_amazonpay_post',
            'gateway_payment_callback_bharatqr',
            'gateway_payment_callback_canara_get',
            'gateway_payment_callback_canara_post',
            'gateway_payment_callback_corporation',
            'gateway_payment_callback_get',
            'gateway_payment_callback_getsimpl_post',
            'gateway_payment_callback_kotak',
            'gateway_payment_callback_kotak_cancel',
            'gateway_payment_callback_kotak_corp_get',
            'gateway_payment_callback_kotak_corp_post',
            'gateway_payment_callback_post',
            'gateway_payment_callback_recurring',
            'gateway_payment_callback_upi_airtel',
            'gateway_payment_callback_yesb_get',
            'gateway_payment_callback_yesb_post',
            'gateway_payment_static_callback_get',
            'gateway_payment_static_callback_post',
            'gateway_payment_static_s2scallback_get',
            'gateway_payment_static_s2scallback_post',
            'gateway_payment_validate_bharatqr',
            'get_account_documents_v2',
            'get_es_pricing_merchant',
            'payment_validate_vpa_internal',
            'get_free_payouts_attributes',
            'get_instant_refunds_pricing_merchant',
            'get_merchant_balance_config',
            'get_merchant_partner_status',
            'get_merchant_support_option_flags',
            'get_paper_mandate_uploaded_url',
            'get_scheduled_es_pricing_merchant',
            'get_stakeholder_documents_v2',
            'governor_create_merchant_rule_group',
            'governor_delete_merchant_rule_group',
            'governor_get_merchant_rule_group',
            'governor_list_merchant_providers',
            'governor_list_merchant_rule_groups',
            'governor_reorder_merchant_rule_groups',
            'governor_update_merchant_rule_group',
            'governor_update_merchant_rule_group_mode',
            'hosted_subscription_button_details',
            'subscription_button_hosted_button_details',
            'iin_list_by_flow',
            'initiate_terminal_onboarding',
            'terminals_proxy_get_optimizer_gateways',
            'terminals_proxy_add_optimizer_provider',
            'terminals_proxy_update_optimizer_provider',
            'terminals_proxy_get_merchant_optimizer_provider',
            'terminals_proxy_get_optimizer_merchant_methods',
            'inspector_view_get',
            'invitation_create',
            'invitation_delete',
            'invitation_edit',
            'invitation_fetch',
            'invitation_resend',
            'accounting_integrations_invite_resend',
            'invoice_add_line_items',
            'invoice_cancel',
            'invoice_cancel_by_batch',
            'invoice_create',
            'invoice_delete',
            'invoice_fetch',
            'invoice_fetch_multiple',
            'invoice_get_count',
            'invoice_get_pdf',
            'invoice_get_stats_by_batch_ids',
            'invoice_get_status',
            'invoice_issue',
            'invoice_notify_by_batch',
            'invoice_remove_line_item',
            'invoice_remove_line_item_bulk',
            'invoice_send_notification',
            'invoice_send_notification_private',
            'invoice_send_notification_proxy',
            'invoice_update',
            'invoice_update_billing_period',
            'invoice_update_line_item',
            'invoice_view_live',
            'invoice_view_live_post',
            'invoice_view_live_preferences_test',
            'invoice_view_test',
            'invoice_view_test_post',
            'invoice_view_test_preferences_test',
            'item_create',
            'item_delete',
            'item_fetch',
            'item_fetch_multiple',
            'item_update',
            'la_fetch',
            'la_transfer_create_reversal',
            'link_account_documents_v2',
            'link_stakeholder_documents_v2',
            'linked_account_create_batch',
            'payment_transfer_batch',
            'list_low_balance_config',
            'list_merchant_notification_config',
            'loc_service',
            'los_service',
            'partnerships_service_proxy',
            'capital_es_service',
            'mailgun_webhook',
            'merchant_2fa_change_setting',
            'merchant_activation_business_categories',
            'merchant_activation_business_categories_v2',
            'merchant_activation_business_details',
            'merchant_activation_company_search',
            'merchant_activation_gst_details',
            'merchant_activation_details',
            'fetch_merchant_escalation',
            'merchant_activation_needs_clarification',
            'merchant_business_types',
            'merchant_supported_plugins',
            'merchant_activation_save',
            'merchant_balance_fetch_by_id',
            'merchant_plugin_fetch',
            'merchant_tnc_save',
            'merchant_tnc_details_by_mid',
            'merchant_tnc_details',
            'merchant_website_section_action',
            'merchant_website_section_save',
            'merchant_website_section_fetch',
            'merchant_website_section_page_load',
            'merchant_checkout_details_save',
            'merchant_checkout_details',
            'merchant_activation_status_partner',
            'merchant_activation_update_partner',
            'merchant_activation_update_website',
            'merchant_activation_update_website_status',
            'merchant_activation_upload_file',
            'merchant_analytics',
            'merchant_aov_config',
            'merchant_balance_fetch',
            'merchant_bank_account_change_status',
            'merchant_bank_account_create',
            'merchant_bank_account_update',
            'merchant_bank_account_file_upload',
            'merchant_billing_label_suggestions',
            'merchant_billing_label_update',
            'purpose_code_fetch',
            'merchant_patch_purpose_code',
            'user_fetch_purpose_code',
            'firs_document_fetch',
            'firs_document_download',
            'emerchantpay_get_request_data',
            'emerchantpay_create_request_data',
            'emerchantpay_owner_delete',
            'hs_code_fetch',
            'merchant_patch_hs_code',
            'fetch_hs_code',
            'payment_update_merchant_document',
            'payment_bulk_update_merchant_document',
            'merchant_checkout_preferences',
            'merchant_create_key',
            'merchant_create_key_with_otp',
            'merchant_credits_balance_fetch',
            'merchant_delete_config_logo',
            'merchant_document_delete',
            'merchant_document_fetch',
            'merchant_document_upload',
            'merchant_document_url_fetch',
            'merchant_edit_config',
            'merchant_edit_email2fa',
            'merchant_edit_config_la',
            'merchant_edit_config_logo',
            'merchant_edit_email_la',
            'merchant_edit_pre_signup_details',
            'merchant_features_fetch',
            'merchant_tnc_popup_status',
            'merchant_features_update',
            'merchant_fetch_config',
            'merchant_fetch_config_internal',
            'merchant_fetch_keys',
            'merchant_fetch_methods',
            'merchant_fetch_referrals',
            'merchant_fetch_schedule_tasks',
            'merchant_fetch_payment_failure_analysis',
            'merchant_fetch_tpvs',
            'merchant_fetch_users',
            'merchant_get_apps_on_appstore',
            'merchant_get_disabled_banks',
            'merchant_get_preferences',
            'merchant_get_tags',
            'merchant_gst_edit',
            'merchant_gst_fetch',
            'merchant_gstin_self_serve_status',
            'merchant_gstin_self_serve_update',
            'merchant_install_app_on_appstore',
            'merchant_instant_activation_post',
            'merchant_instrument_request_create',
            'merchant_instrument_request_get_by_id',
            'merchant_instrument_request_get_by_merchant_id',
            'merchant_instrument_request_update_by_id',
            'merchant_instrument_status_get_by_merchant_id',
            'merchant_international_toggle',
            'merchant_invoice_fetch_multiple',
            'merchant_methods',
            'merchant_methods_downtime',
            'merchant_methods_edit',
            'merchant_mtu_update_dashboard',
            'merchant_one_time_token',
            'merchant_partner_configs_fetch',
            'merchant_post_preferences',
            'merchant_bank_allocation',
            'merchant_pre_signup_details',
            'merchant_primary_balance_fetch',
            'merchant_product_international_request',
            'merchant_product_switch',
            'merchant_public_get_banks',
            'merchant_app_scalability_config',
            'merchant_user_app_incr_product_session',
            'merchant_recent_trans_with_source',
            'merchant_user_app_change_ftux',
            'merchant_razorx_bulk_evaluate',
            'merchant_razorx_evaluate',
            'splitz_evaluate_bulk_proxy',
            'merchant_replace_key',
            'merchant_replace_key_with_otp',
            'merchant_requests_create',
            'merchant_requests_get_feature',
            'merchant_rtb_details_fetch',
            'merchant_sub_create',
            'merchant_sub_send_password_link',
            'merchant_submit_support_call_request',
            'merchant_tag_map_create',
            'merchant_tag_map_update',
            'merchant_toggle_fee_bearer',
            'merchant_tpv_create',
            'merchant_verify_attributes',
            'merchants_risk_service',
            'mir_instruments_get',
            'terminals_universal_proxy',
            'get_discrepancy_list',
            'get_discrepancy_list_merchant',
            'fetch_iir_discrepancies_of_mir',
            'create_iir_discrepancy_answer',
            'mock_acs',
            'mock_aeps_payment',
            'mock_amex_payment',
            'mock_atom_payment',
            'mock_axis_genius_payment',
            'mock_axis_migs_payment',
            'mock_billdesk_payment',
            'mock_card_fss_payment',
            'mock_card_fss_payment_post',
            'mock_cardless_emi_payment',
            'mock_ebs_payment',
            'mock_emandate_payment',
            'mock_esigner_payment',
            'mock_event_tracker',
            'mock_first_data_payment',
            'mock_hdfc_3dsecure',
            'mock_mobikwik_payment',
            'mock_mozart_payment_get',
            'mock_mozart_payment_post',
            'mock_netbanking_payment',
            'mock_netbanking_payment_get',
            'mock_paylater_payment',
            'mock_paysecure_payment',
            'mock_paytm_payment',
            'mock_sharp_payment_get',
            'mock_sharp_payment_post',
            'mock_sharp_payment_submit',
            'mock_upi_payment',
            'mock_wallet_payment',
            'mock_wallet_payment_get',
            'mock_wallet_payment_with_paymentid',
            'mpans_fetch',
            'mpans_issue',
            'nach_register_test_payment_authorize_or_fail',
            'oauth_app_webhook_create',
            'oauth_application_create',
            'oauth_application_create_clients',
            'oauth_application_create_partner',
            'oauth_application_delete',
            'oauth_application_delete_client',
            'oauth_application_fetch',
            'oauth_application_fetch_multiple',
            'oauth_application_fetch_partner',
            'oauth_application_update',
            'oauth_token_create',
            'oauth_token_fetch',
            'oauth_token_fetch_multiple',
            'oauth_token_revoke',
            'oauth_fetch_submerchant_applications',
            'oauth_application_access_revoke',
            'offer_create',
            'offer_fetch_by_id',
            'offer_fetch_multiple',
            'offer_fetch_subscription',
            'offer_update',
            'offline_qr_poll_live_order_status',
            'offline_qr_poll_test_order_status',
            'on_demand_settlement',
            'on_demand_settlement_fees',
            'onboarding_features_create',
            'onboarding_features_fetch_details',
            'onboarding_features_fetch_submission',
            'onboarding_webhook_create',
            'onboarding_webhook_fetch',
            'onboarding_webhook_fetch_all',
            'onboarding_webhook_update',
            'onboarding_webhook_delete',
            'order_create',
            'order_edit',
            'order_fetch',
            'order_fetch_by_id',
            'order_fetch_by_id_1cc',
            'order_payments',
            'otp_create',
            'otp_post',
            'otp_verify',
            '1cc_otp_verify',
            'otp_verify_app',
            'p2p_fetch_private',
            'pages_view',
            'pages_view_by_slug',
            'pages_view_by_slug_empty',
            'partner_referral_create',
            'partner_referral_fetch',
            'payment_acknowledge',
            'payment_add_metadata',
            'payment_bank_transfer_fetch',
            'payment_button_hosted_view',
            'payment_calculate_fees',
            'payment_callback_ajax_get',
            'payment_callback_get',
            'payment_callback_post',
            'payment_cancel',
            'payment_capture',
            'payment_create',
            'payment_create_aeps',
            'payment_create_ajax',
            'payment_create_checkout',
            'payment_create_checkout_get',
            'payment_create_checkout_json',
            'payment_create_fees',
            'payment_create_jsonp',
            'payment_create_nach_register',
            'payment_create_openwallet',
            'payment_create_private',
            'payment_create_private_json',
            'payment_create_private_old',
            'payment_create_recurring',
            'payment_create_subscriptions',
            'payment_create_upi',
            'payment_create_wallet',
            'payment_edit',
            'payment_fees',
            'payment_fetch_by_id',
            'payment_fetch_card_details',
            'payment_fetch_multiple',
            'payment_fetch_refund_by_id',
            'payment_fetch_refunds',
            'payment_fetch_transaction',
            'payment_fetch_transfers',
            'payment_get_flows',
            'payment_get_flows_private',
            'payment_get_iin_details',
            'payment_get_status',
            'payment_links_demo',
            'payment_links_demo_cors',
            'payment_links_payment_by_id',
            'payment_links_service_count_route',
            'payment_links_get',
            'payment_links_create',
            'payment_links_update',
            'payment_links_cancel',
            'payment_links_expire',
            'payment_links_fetch_multiple',
            'payment_links_notify_by_medium',
            'payment_links_get_reminder_next_run',
            'payment_links_get_batch_status',
            'payment_links_service_hosted_page',
            'payment_links_sign_payload',
            'payment_links_switch_versions',
            'payment_links_plans_fetch',
            'payment_links_insights',
            'payment_mandate_hq_redirect_authenticate',
            'payment_otp_generate',
            'payment_otp_resend',
            'payment_otp_resend_json',
            'payment_otp_resend_private',
            'payment_otp_submit',
            'payment_otp_submit_private',
            'payment_page_activate',
            'payment_page_create',
            'payment_page_cds_domain_create',
            'payment_page_cds_domain_list',
            'payment_page_cds_domain_delete',
            'payment_page_cds_check_propagation',
            'payment_page_cds_domain_exists',
            'payment_page_cds_subdomain',
            'payment_page_cds_fetch_plans',
            'payment_page_create_order',
            'payment_page_cds_fetch_plan',
           'payment_page_get_pending_payments',

            'store_create_order' ,
            'payment_page_create_order_option',
            'store_create_order_options',
            'payment_page_deactivate',
            'payment_page_fetch_merchant_details',
            'payment_page_get',
            'payment_page_get_details',
            'payment_page_get_invoice_details',
            'payment_page_hosted_button_details',
            'payment_page_hosted_button_preferences',
            'payment_page_images',
            'payment_page_item_update',
            'payment_page_list',
            'payment_page_notify',
            'payment_page_save_receipt_for_payment',
            'payment_page_send_receipt',
            'payment_page_set_merchant_details',
            'payment_page_set_receipt_details',
            'payment_page_slug_exists',
            'payment_page_update',
            'payment_page_view_get',
            'payment_page_get_batches',
            'payment_handle_precreate',
            'payment_handle_create',
            'payment_handle_update_old',
            'payment_handle_update',
            'payment_handle_availability',
            'payment_handle_get',
            'payment_handle_suggestion',
            'payment_handle_amount_encryption',
            'payment_button_create',
            'payment_button_list',
            'payment_button_get_details',
            'payment_button_update',
            'payment_button_item_update',
            'payment_button_get',
            'payment_button_activate',
            'payment_button_deactivate',
            'payment_button_create_order',
            'payment_button_send_receipt',
            'payment_button_set_receipt_details',
            'payment_button_create_order_option',
            'payment_button_hosted_preferences',
            'payment_button_hosted_button_details',
            'payment_button_fetch_merchant_details',
            'payment_button_set_merchant_details',
            'payment_button_get_receipt_details',
            'payment_button_save_receipt_for_payment',

            'nca_store_create',
            'nca_store_list',
            'nca_store_details',
            'nca_store_update',
            'nca_store_delete',
            'nca_store_payments',
            'nca_store_activate',
            'nca_store_deactivate',
            'nca_store_order_line_item',

            'store_category_create',
            'store_category_list',
            'store_category_details',
            'store_category_update',
            'store_category_delete',

            'store_catalog_create',
            'store_catalog_list',
            'store_catalog_details',
            'store_catalog_update',
            'store_catalog_delete',

            'payment_payout',
            'payment_redirect_3ds',
            'payment_redirect_3ds_get',
            'payment_redirect_callback',
            'payment_redirect_to_authenticate_get',
            'payment_redirect_to_authenticate_post',
            'payment_redirect_to_authorize',
            'payment_refund',
            'payment_status_count',
            'payment_topup_ajax',
            'payment_topup_post',
            'payment_transfer',
            'payment_upi_transfer_fetch',
            'payment_validate_account',
            'payment_validate_vpa',
            'payment_validate_vpa_old',
            'payments_downtime',
            'refresh_payments_resolved_downtimes',
            'refresh_payments_scheduled_downtimes',
            'fetch_payments_ongoing_downtimes',
            'fetch_payments_resolved_downtimes',
            'fetch_payments_scheduled_downtimes',
            'payments_downtime_by_id',
            'payout_approve',
            'payout_2fa_approve',
            'payout_approve_bulk',
            'payout_bulk_approve',
            'payout_bulk_create',
            'payout_cancel',
            'payout_create',
            'payout_validate',
            'payout_create_with_otp',
            'composite_payout_create_with_otp',
            'payout_create_2FA',
            'payout_send_2FA_otp',
            'payout_update_attachments',
            'payout_download_attachments',
            'payout_report_get_attachment_signed_url',
            'payout_report_get_attachment_details',
            'payout_upload_attachment',
            'undo_payout_creation',
            'resume_payout_creation',
            'payout_get_attachment_signed_url',
            'payout_get_holiday_details',
            'payout_fetch_by_id',
            'payout_fetch_multiple',
            'payout_fetch_reversals',
            'payout_links_approve',
            'payout_links_approve_otp',
            'payout_links_reject',
            'payout_links_workflow_summary',
            'payout_links_bulk_approve',
            'payout_links_bulk_approve_otp',
            'payout_links_bulk_reject',
            'payout_links_upload_attachment',
            'payout_links_get_signed_url',
            'payout_links_update_attachments',
            'payout_status_to_reason_mapping',
            'payout_links_added_fund_accounts',
            'payout_links_added_fund_accounts_cors',
            'payout_links_batch_summary',
            'payout_links_cancel',
            'payout_links_create',
            'payout_links_update',
            'payout_links_customer_hosted_page',
            'payout_links_fetch_by_id',
            'payout_links_fetch_multiple',
            'payout_links_fetch_shopify_order',
            'payout_links_generate_end_user_otp',
            'payout_links_generate_end_user_otp_cors',
            'payout_links_initiate',
            'payout_links_initiate_cors',
            'payout_links_integrate_app',
            'payout_links_integration_details',
            'payout_links_merchant_on_boarding_status',
            'payout_links_merchant_settings_get',
            'payout_links_merchant_settings_post',
            'payout_links_merchant_summary',
            'payout_links_resend_notification',
            'payout_links_status',
            'payout_links_status_cors',
            'payout_links_verify_customer_otp',
            'payout_links_verify_customer_otp_cors',
            'payout_purpose_get',
            'payout_purpose_post',
            'payout_reject',
            'payout_reject_bulk',
            'payout_update_status',
            'payouts_batch_create',
            'payouts_bulk_amount_type_update',
            'payouts_bulk_sample_file',
            'payouts_batch_validate',
            'payouts_bulk_template_file',
            'payouts_batch_process',
            'payouts_get_batch_rows',
            'payouts_scheduled_time_slots',
            'payouts_summary',
            'payouts_workflow_summary',
            'payouts_workflow_config_get',
            'pending_survey_get',
            'pincode_get',
            'plan_create',
            'plan_fetch',
            'plan_fetch_multiple',
            'proxy_merchant_create_support_details',
            'proxy_merchant_edit_support_details',
            'proxy_merchant_get_pricing',
            'proxy_merchant_get_support_details',
            'proxy_merchant_get_terminals',
            'terminals_proxy_gateway_terminal_status',
            'qr_code_download_live',
            'qr_code_download_test',
            'razorflow_post_slash_command',
            'razorflow_post_slash_command_custom_endpoint',
            'razorx_dummy',
            'read_merchant_options',
            'read_merchant_options_admin',
            'read_options_by_id',
            'read_options_by_ref_id',
            'refund_cancel_batch',
            'refund_create',
            'refund_edit',
            'refund_fetch_by_id',
            'refund_fetch_creation_data',
            'refund_fetch_fee',
            'refund_fetch_for_customer',
            'refund_fetch_multiple',
            'refunds_fetch_for_customer',
            'reminder_next_run',
            'reminder_service',
            'reporting_config_create',
            'reporting_config_delete',
            'reporting_config_edit',
            'reporting_config_get',
            'reporting_config_list',
            'reporting_consumer_restrictions',
            'reporting_log_create',
            'reporting_log_get',
            'reporting_log_list',
            'reporting_log_update',
            'reporting_schedule_create',
            'reporting_schedule_delete',
            'reporting_schedule_get',
            'reporting_schedule_update',
            'reporting_schedule_list',
            'reports_fetch_multiple',
            'reports_generate',
            'reports_monthly_banking_invoice',
            'reports_monthly_invoice',
            'reports_order_rpp',
            'reports_public_entity',
            'reports_public_entity_file',
            'reports_refund_irctc',
            'reports_transaction_broking',
            'reports_transaction_dsp',
            'reversal_fetch',
            'reversal_fetch_la',
            'reversal_fetch_multiple',
            'reversal_fetch_multiple_la',
            'reward_activate_or_deactivate',
            'reward_fetch',
            'reward_terms',
            'reward_metrics',
            'fetch_trusted_badge_status',
            'trusted_badge_merchant_status',
            'salesforce_event',
            'salesforce_opportunity_details',
            'send_email_for_pl_service',
            'setl_amount',
            'setl_combined_recon',
            'setl_combined_report',
            'setl_fetch_by_id',
            'org_setl_fetch_by_id',
            'setl_fetch_multiple',
            'setl_fetch_source_details',
            'setl_fetch_transactions',
            'setl_get_details',
            'setl_holidays',
            'setl_amount_check',
            'setl_sms_notification_status',
            'setl_sms_notification_toggle',
            'settlement_ondemand_create',
            'settlement_ondemand_create_dashboard',
            'settlement_ondemand_feature_validate',
            'settlement_ondemand_blocked',
            'settlement_ondemand_fees',
            'settlement_ondemand_fees_dashboard',
            'settlement_ondemand_fetch',
            'settlement_ondemand_fetch_by_id',
            'settlement_ondemand_razorpayx_webhook',
            'setl_merchant_dashboard_config_get',
            'setl_fetch_details',
            'sms_callback',
            'splitz_evaluate',
            'splitz_preflight',
            'splitz_preflight_bulk_evaluate',
            'stakeholder_create_v2',
            'stakeholder_fetch_all_v2',
            'stakeholder_fetch_v2',
            'stakeholder_update_v2',
            'submerchants_fetch',
            'submerchants_fetch_multiple',
            'submerchants_fetch_capital_applications',
            'subscription_button_create_subscription',
            'subscription_button_create_subscription_v2',
            'subscription_button_hosted_view',
            'subscription_cancel',
            'subscription_cancel_changes',
            'subscription_cancel_token',
            'subscription_create',
            'subscription_create_addon',
            'subscription_delete_offer',
            'subscription_fetch',
            'subscription_fetch_by_id',
            'subscription_fetch_changes',
            'subscription_fetch_due_addons',
            'subscription_fetch_hosted_live',
            'subscription_fetch_hosted_test',
            'subscription_fetch_multiple',
            'subscription_get_revenue_by_source',
            'subscription_item_create',
            'subscription_item_delete',
            'subscription_item_fetch',
            'subscription_item_fetch_multiple',
            'subscription_item_update',
            'subscription_manual_retry',
            'subscription_manual_retry_old',
            'subscription_offer_fetch_discount',
            'subscription_offer_fetch_usage',
            'subscription_offer_preference',
            'subscription_pause',
            'subscription_payment_fetch_by_id',
            'subscription_registration_auto_charge',
            'subscription_registration_cancel_link',
            'subscription_registration_charge_token',
            'subscription_registration_charge_token_bulk',
            'subscription_registration_create_links',
            'subscription_registration_delete_token',
            'subscription_registration_fetch_link',
            'subscription_registration_fetch_link_internal',
            'subscription_registration_fetch_token',
            'subscription_registration_list_links',
            'subscription_registration_list_tokens',
            'subscription_registration_resend_link',
            'subscription_registration_resend_links_batch',
            'subscription_resume',
            'subscription_settings',
            'subscription_settings_get',
            'subscription_test_charge',
            'subscription_update',
            'subscription_view_live',
            'subscription_view_live_post',
            'subscription_view_test',
            'subscription_view_test_post',
            'subscriptions_overview',
            'sub_virtual_account_list',
            'sub_virtual_account_transfer_with_otp',
            'sub_virtual_account_transfer_list',
            'tax_create',
            'tax_delete',
            'tax_get',
            'tax_get_meta_gst_taxes',
            'tax_get_meta_states',
            'tax_group_create',
            'tax_group_delete',
            'tax_group_get',
            'tax_group_list',
            'tax_group_update',
            'tax_list',
            'tax_payments_add_or_update_settings_auto',
            'tax_payments_add_or_update_settings',
            'tax_payments_bulk_pay',
            'tax_payments_cancel',
            'tax_payments_challan_download',
            'tax_payments_challan_upload',
            'tax_payments_create',
            'tax_payments_edit',
            'tax_payments_get_all_settings',
            'tax_payments_get_by_id',
            'tax_payments_list',
            'tax_payments_mark_as_paid',
            'tax_payments_monthly_summary',
            'tax_payments_pay',
            'tax_payments_update_challan_file_id',
            'tax_payments_invalid_tan_status' ,
            'tax_payments_downtime_schedule',
            'tax_payments_downtime_schedules_list',
            'tax_update',
            'tax_payments_fetch_pending_gst',
            'terminal_disable',
            'terminal_enable',
            'terminal_fetch',
            'terminal_onboard',
            'terminal_onboard_callback',
            'terminals_proxy_fetch_terminals_credentials',
            'third_party_health_check',
            'token_fetch_card',
            'token_fetch_vpa',
            'transaction_statement_fetch',
            'transaction_statement_fetch_multiple',
            'transaction_statement_fetch_multiple_for_banking',
            'transfer_create',
            'transfer_create_reversal',
            'transfer_edit',
            'transfer_fetch',
            'transfer_fetch_la',
            'transfer_fetch_multiple',
            'transfer_fetch_multiple_la',
            'transfer_fetch_payment_la',
            'transfer_fetch_reversals',
            'transfer_fetch_reversals_la',
            'transparent_redirect_get',
            'transparent_redirect_post',
            'ufh_get_file_signed_url',
            'ufh_upload_file',
            'update_low_balance_config',
            'update_merchant_notification_config',
            'update_merchant_options',
            'update_merchant_options_admin',
            'update_partner_intent',
            'update_partner_type',
            'fetch_partner_first_user_experience',
            'update_survey_tracker',
            'increase_transaction_limit_self_serve',
            'merchant_workflow_details',
            'merchant_consents_admin_fetch',
            'merchant_workflow_clarification',
            'update_payment_config',
            'update_wait_timeout',
            'upi_get_bank_list',
            'upi_get_key_list',
            'upi_npci_request',
            'upi_read_async',
            'upi_transfer_process',
            'upi_transfer_process_test',
            'upi_zero_call',
            'user_2fa_change_setting',
            'user_access',
            'switch_merchant_token',
            'user_account_unlock',
            'user_change_password',
            'user_update_name',
            'user_check_has_set_password',
            'user_set_password',
            'user_device_detail_save',
            'user_edit_self',
            'user_fetch',
            'user_fetch_for_merchant',
            'user_login_2fa_setup_mobile',
            'user_merchant_mapping_action',
            'user_merchant_upgrade',
            'user_opt_in_status_whatsapp',
            'user_opt_in_whatsapp',
            'user_opt_out_whatsapp',
            'user_otp_create',
            'user_send_x_mobile_app_link',
            'user_resend_otp_2fa',
            'user_resend_verification',
            'user_resend_verification_otp',
            'user_trigger_2fa_otp',
            'user_update_contact',
            'user_verify_contact',
            'user_verify_email',
            'user_otp_verify',
            'user_verify_second_factor_auth',
            'user_verify_through_mode',
            'user_contact_update_sent_otp',
            'user_verify_and_update_mobile_otp' ,
            'user_add_email',
            'user_add_email_verify',
            'user_otp_login_2fa_password',
            'user_fetch_admin',
            'validate_checkout_offers',
            'vendor_payment_send_vendor_invite_ei',
            'vendor_payment_disable_vendor_portal',
            'vendor_payment_enable_vendor_portal',
            'vendor_payment_get_email_mapping',
            'vendor_payment_create_email_mapping',
            'vendor_payment_bulk_cancel',
            'vendor_payment_bulk_invoice_download',
            'vendor_payment_cancel',
            'vendor_payment_accept',
            'vendor_payment_contact_create',
            'vendor_payment_contact_get',
            'vendor_payment_contact_list',
            'vendor_payment_contact_update',
            'vendor_payment_create_vendor_advance',
            'vendor_payment_get_vendor_advance',
            'vendor_payment_list_vendor_advance',
            'vendor_payment_create',
            'vendor_payments_check_existing_invoice',
            'vendor_payment_edit',
            'vendor_payment_execute',
            'vendor_payment_execute_2fa',
            'vendor_settlement_execute_single',
            'vendor_settlement_execute_multiple',
            'vendor_settlement_mark_as_paid',
            'vendor_settlement_fund_accounts',
            'vendor_settlement_vendor_balance',
            'vendor_payment_execute_bulk',
            'vendor_payment_get_by_id',
            'vendor_payment_get_invoice_zip_file',
            'vendor_payment_get_ocr_data',
            'vendor_payment_get_tds_categories',
            'vendor_payment_invoice_get_signed_url',
            'vendor_payment_invoice_upload',
            'vendor_payment_create_file_upload',
            'vendor_payment_get_file_upload',
            'vendor_payment_delete_file_upload',
            'vendor_payment_add_or_update_settings',
            'vendor_payment_get_settings',
            'vendor_payment_get_latest_approvers',
            'vendor_payment_get_timeline_view',
            'vendor_payment_list',
            'vendor_payment_list_vendors',
            'vendor_sign_up_create_business_info',
            'vendor_sign_up_get_business_info_status',
            'vendor_payment_mark_as_paid',
            'vendor_payment_reporting_info',
            'vendor_payment_summary',
            'vendor_payment_update_invoice_file_id',
            'vendor_payment_get_quick_filter_amounts',
            'vendor_payment_get_auto_processed_invoice',
            'vendor_invoices_list',
            'vendor_invoice_create',
            'vendor_portal_list_tds_categories',
            'vendor_portal_upload_invoice',
            'vendor_portal_get_ocr_data',
            'vendor_portal_get_vendor_preferences',
            'vendor_portal_update_vendor_preferences',
            'vendor_invoice_get_by_id',
            'vendor_portal_invoice_get_signed_url',
            'vendor_portal_invites_list',
            'accounting_integrations_proxy_routes',
            'x_apps_get_all_settings',
            'x_apps_add_or_update_settings',
            'accounts_receivable_all_routes',
            'business_reporting_all_proxy_routes',
            'invite_to_vendor_portal',
            'resend_invite_to_vendor_portal',
            'virtual_account_add_receivers',
            'virtual_account_add_allowed_payer',
            'virtual_account_delete_allowed_payer',
            'virtual_account_banking_fetch_multiple',
            'virtual_account_close',
            'virtual_account_configs',
            'merchant_virtual_account_edit',
            'qr_code_create',
            'qr_code_close',
            'qr_code_fetch',
            'qr_code_fetch_multiple',
            'qr_payments_fetch_multiple',
            'qr_payment_fetch_for_qr_code',
            'virtual_account_create',
            'virtual_account_create_for_banking',
            'virtual_account_create_for_internal',
            'virtual_account_edit',
            'virtual_account_expiry_setting_get',
            'virtual_account_expiry_setting_upsert',
            'virtual_account_fetch',
            'virtual_account_fetch_multiple',
            'virtual_account_fetch_payments',
            'virtual_account_order_create',
            'virtual_account_validate_vpa',
            'virtual_account_validate_vpa_test',
            'virtual_vpa_prefix_save',
            'virtual_vpa_prefix_validate',
            'wallet_service',
            'webhook_analytics',
            'webhook_create',
            'webhook_delete',
            'webhook_edit',
            'webhook_fetch',
            'webhook_fetch_events',
            'webhook_fetch_multiple',
            'webhook_fire',
            'wfs_config_get',
            'workflow_payout_amount_rules',
            'banking_account_service_routes',
            'banking_account_service_pincode_serviceability_check',
            'banking_account_service_common_serviceability_check',
            'banking_account_slot_book',
            'banking_account_get_recent_slot',
            'banking_account_get_free_slot',
            'banking_account_slot_reschedule',
            'bbps_bill_payments',
            'merchant_international_enablement_preview',
            'merchant_international_visibility_info',
            'merchant_international_enablement_get',
            'merchant_international_enablement_draft',
            'merchant_international_enablement_submit',
            'merchant_international_enablement_discard',
            'merchant_save_business_website',
            'business_website_status',
            'get_dispute_document_types_metadata',
            'patch_dispute_contest_by_id',
            'post_dispute_accept_by_id',
            'banking_axis_invitations_send',
            'draft_invitation_fetch',
            'draft_invitation_accept',
            'update_serviceability_url',
            'update_coupon_validity_url',
            'update_fetch_coupons_url',
            '1cc_configs_update',
            '1cc_configs_get',
            '1cc_prepay_cod_configs_get',
            '1cc_disable_magic',
            'update_merchant_platform',
            '1cc_cod_eligibility_attribute_list',
            '1cc_cod_eligibility_attribute_upsert_bulk',
            '1cc_cod_eligibility_attribute_delete',
            '1cc_cod_eligibility_attribute_delete_by_attribute',
            '1cc_merchant_order_review_automation_rule_configs_get',
            '1cc_merchant_order_review_automation_rule_configs_upsert',
            'country_fetch',
            'state_fetch',
            '1cc_rto_dashboard_list',
            '1cc_cod_order_list',
            '1cc_prepay_order_list',
            '1cc_prepay_order_details',
            '1cc_merchant_file_upload_audit_create',
            '1cc_merchant_file_upload_audit_list',
            '1cc_cod_order_review',
            '1cc_fetch_dashboard_analytics',
            '1cc_create_fee_rules',
            '1cc_create_fee_rule',
            '1cc_fetch_fee_rule',
            '1cc_filter_fee_rule',
            '1cc_delete_fee_rule',
            '1cc_create_zone',
            '1cc_update_zone',
            '1cc_add_locations',
            '1cc_remove_locations',
            '1cc_fetch_zone',
            '1cc_filter_zone',
            '1cc_delete_zone',
            '1cc_fetch_all_countries_with_zone',
            '1cc_cod_engine_config_summary',
            '1cc_create_item_category',
            '1cc_update_item_category',
            '1cc_fetch_item_category',
            '1cc_filter_item_category',
            '1cc_delete_item_category',
            '1cc_config_item_category',
            '1cc_item_category_search_product',
            '1cc_fee_rule_associations',
            '1cc_clear_fee_rule',

            'growth_get_public_asset_details',

            //CAC
            'cac_privileges_fetch',
            'cac_role_fetch_all',
            'cac_role_fetch_role_map',
            'role_self_get',
            'view_cac_role',
            //'delete_cac_role',
            'create_cac_role',
            'edit_cac_role',

            'merchant_features_edit',
            'enable_non_3ds_self_serve',
            'get_non_3ds_details',

            // self serve workflow
            'workflow_config_create',
            'workflow_config_update',
            'workflow_config_delete',
            'payouts_bulk_reject_owner',
            'payout_links_bulk_reject_owner',
            'fetch_pending_payouts_summary',
            'fetch_pending_payout_links_summary',
            'partner_config_fetch',
            'partner_config_edit',
            'partner_config_edit_logo',
            'wallet_dashboard_proxy',
            'submerchant_partner_feature_check',
            'payout_partner_bank_status',
        ],

        'admin_dashboard' => [
            'dispute_ingestion',
            'dispute_dcs_config_add',
            'dispute_dcs_config_update',
            'dispute_dcs_config_get',
            'merchant_bmc_response_fetch_admin',
            'media_service_upload_file',
            'media_service_get_bucket',
            'media_service_upload_process',
            'admin_merchant_get_terminals',
            'merchant_activation_eligibilty',
            'merchant_activation_clarifications_fetch',
            'merchant_nc_revamp_eligibility',
            'merchant_activation_clarifications_save',
            'merchant_activation_clarifications_save_admin',
            'merchant_activation_clarifications_fetch_admin',
            'merchant_nc_revamp_eligibility_admin',
            'merchant_website_plugin_save',
            'wfs_workflows_list',
            'wfs_workflows_get',
            'wfs_workflow_action_create',
            'wfs_workflow_add_assignee',
            'wfs_workflow_remove_assignee',
            'wfs_comments_create',
            'wfs_comments_list',
            'wfs_cb_workflows_list',
            'wfs_cb_workflows_get',
            'wfs_cb_workflow_action_create',
            'wfs_cb_workflow_add_assignee',
            'wfs_cb_workflow_remove_assignee',
            'wfs_cb_comments_create',
            'wfs_cb_comments_list',
            'admin_payouts_workflow_config_get',
            'merchant_website_section_action',
            'merchant_website_section_save',
            'merchant_website_section_fetch',
            'merchant_website_section_page_load',
            'admin_website_section_action',
            'admin_website_section_save',
            'admin_website_section_fetch',
            'payment_page_notify_all',
            'banking_account_statement_insert_missing',
            'role_self_get',
            'linked_account_reference_data_create',
            'linked_account_reference_data_update',
            'amc_linked_account_create',
            'admin_collect_info_merchant_details_patch',
            'merchant_enhanced_activation_details',
            'mob_admin_routes',
            'mob_migration',
            'salesforce_event_admin',
            'salesforce_event_admin_one_ca',
            'mob_admin_routes_for_one_ca',
            'merchant_create_lead_to_salesforce_admin_for_one_ca',
            'mob_ca_lms_routes',
            'merchant_business_types_admin',
            'merchant_info',
            'merchant_audit_info',
            'merchant_plugin_fetch',
            'admin_merchant_la_fetch',
            'entity_audit_info',
            'get_audit_entities',
            'merchant_logs_search',
            'merchant_logs_fetch',
            'admin_trigger_2fa_otp',
            'admin_account_lock_unlock',
            'setl_merchant_dashboard_config_get',
            'setl_fetch_details',
            'workflow_needs_merchant_clarification',
            'growth_admin',
            "growth_upload_asset",
            'splitz_evaluate_bulk_proxy',
            'merchant_update_fraud_type',
            'admin_merchant_post_preferences',
            'admin_merchant_post_preferences_bulk',
            'merchant_activation_gst_details',
            'get_merchant_data_for_segment',
            'merchant_upload',
            'user_verify_contact_batch',
            'banking_account_service_routes',
            'banking_account_service_pincode_serviceability_check',
            'rbl_current_account_serviceability_get_admin',
            'fetch_banking_account_beneficiary',
            'merchant_business_detail_fetch',
            'merchant_business_detail_save',
            'admin_merchant_get_preferences',
            'admin_merchant_get_preferences_for_one_ca',
            'retry_payouts_on_service',
            'populate_merchant_trim_data_cron',
            'add_verify_disabled_gateway',
            'order_create_admin',
            'update_payout_status_batch',
            'banking_account_webhook_data_reset',
            'admin_fetch_banking_account',
            'admin_fetch_banking_accounts_multiple',
            'account',
            'account_action',
            'account_create',
            'account_create_v2',
            'account_delete_v2',
            'account_edit',
            'account_edit_v2',
            'account_features_add',
            'account_features_get',
            'account_fetch',
            'account_fetch_by_external_id',
            'account_fetch_v2',
            'account_list',
            'accounting_payouts_app_credentials',
            'accounting_payouts_callback',
            'accounting_integrations_callback',
            'accounting_payouts_delete_integration',
            'accounting_payouts_integration_app_get_url',
            'accounting_payouts_integration_app_initiate',
            'accounting_payouts_integration_status',
            'accounting_integration_get_all_settings',
            'accounting_integration_tally_delete_integration',
            'accounting_payouts_integration_status_app',
            'accounting_payouts_sync',
            'accounting_payouts_sync_status',
            'accounting_payouts_waitlist',
            'update_submerchant_user_contact',

            'accounting_integration_get_organization',
            'accounting_integration_set_organization',
            'accounting_integration_get_chart_of_accounts',
            'accounting_integration_put_chart_of_accounts',
            'accounting_integration_sync_chart_of_accounts',
            'accounting_integration_get_bank_statement_report',
            'accounting_integration_bank_transactions_sync_status',
            'action_checker_create',
            'action_comment_create',
            'action_diff_get',
            'action_request_execute',
            'activate_live_offline_device',
            'activate_test_offline_device',
            'add_additional_website',
            'add_merchant_balance_config',
            'add_ondemand_pricing_if_absent',
            'addon_delete',
            'addon_fetch',
            'addon_fetch_multiple',
            'adj_add',
            'adj_add_bulk',
            'adj_add_reverse',
            'adj_fetch_by_id',
            'adj_fetch_multiple',
            'admin_access_maps_bootstrap_cache',
            'admin_change_password',
            'admin_create',
            'fund_management_balance_get_config',
            'fund_management_balance_set_config',
            'admin_delete',
            'admin_dummy_account_test',
            'admin_edit',
            'admin_fetch_all_entities',
            'external_admin_fetch_all_entities',
            'admin_fetch_entity_by_id',
            'external_admin_fetch_entity_by_id',
            'admin_fetch_entity_multiple',
            'admin_entity_sync',
            'external_admin_fetch_entity_multiple',
            'admin_fetch_fund_account_validate',
            'admin_fetch_merchant_ids_new',
            'admin_fetch_merchants_new',
            'admin_fetch_unified_dashboard_merchants',
            'admin_fetch_partner_activation',
            'admin_fetch_report',
            'admin_fetch_report_types',
            'admin_fetch_terminal_by_id',
            'non_org_admin_fetch_terminal_by_id',
            'merchant_onboard_external_org_terminal',
            'admin_fetch_terminal_multiple',
            'admin_fetch_axis_paysecure_payments',
            'admin_fetch_entity_by_id_axis_paysecure',
            'admin_fetch_all_entities_axis',
            'admin_fetch_tpvs',
            'admin_fund_account_validate',
            'merchant_ip_config_opt_status_admin',
            'merchant_ip_config_fetch_admin',
            'merchant_ip_config_create_admin',
            'admin_get',
            'admin_get_app_auth',
            'admin_get_file',
            'admin_get_free_payouts_attributes',
            'admin_free_payout_migration',
            'admin_get_multiple',
            'admin_key_migrate_to_credcase',
            'admin_consumer_migrate_apps_to_credcase',
            'admin_key_migrate_impersonation_grants',
            'admin_lead_create',
            'admin_lead_get_multiple',
            'admin_lead_put',
            'admin_lead_verify',
            'merchant_invitation_verify',
            'admin_logout',
            'admin_merchants_tpvs_create',
            'admin_post_stork',
            'admin_process_webhook_events_by_ids',
            'admin_process_webhook_events_csv',
            'admin_tpv_create',
            'admin_tpv_edit',
            'admin_webhook_email_stork_recon',
            'advertiser_logo',
            'api_refunds_retry_without_verify',
            'app_create',
            'app_delete_token',
            'app_get',
            'app_mapping_create',
            'app_mapping_delete',
            'app_merchant_mapping_get',
            'admin_reports_fetch_filters',
            'admin_reports_fetch_report_data',
            'admin_reports_fetch_reports_by_type',
            'admin_reports_fetch_reports_for_admin',
            'admin_reports_fetch_reports_by_id',
            'app_tags_delete',
            'app_update',
            'auditlog_search',
            'auth_link_paper_mandate_authenticate',
            'auth_link_paper_mandate_authenticate_proxy',
            'auth_link_paper_mandate_retry_token',
            'auth_link_paper_mandate_validate',
            'auth_link_paper_mandate_validate_proxy',
            'backfill_merchant_applications',
            'backfill_referred_application',
            'balance_fetch',
            'bank_account_fetch',
            'bank_transfer_edit_payer_account',
            'bank_transfer_insert',
            'bank_transfer_process_hdfc_ecms',
            'bank_transfer_process_icici',
            'bank_transfer_process_rbl',
            'bank_transfer_process_rbl_test',
            'bank_transfer_process_test',
            'bank_transfer_strip_payer_accounts',
            'banking_account_activate',
            'banking_account_activation_detail_create',
            'banking_account_statement_details_create',
            'update_to_ca_onboarding_partner_type',
            'banking_account_bank_lms_assign_to_partner_bulk',
            'create_invitation_for_ca_onboarding_partner',
            'banking_account_activation_detail_update',
            'banking_account_activation_detail_update_internal',
            'banking_account_activation_mis_download',
            'banking_account_activation_mis_report',
            'banking_account_activation_spocs',
            'banking_account_ops_mx_pocs',
            'banking_account_activation_status_change_log',
            'banking_account_bulk_assign_reviewer',
            'banking_account_comment_edit',
            'banking_account_customer_appointment_dates',
            'banking_account_comments_create',
            'co_created_reset_password_admin',
            'banking_account_comments_list',
            'banking_account_call_log_list',
            'banking_account_create',
            'banking_account_create_admin',
            'banking_account_create_dashboard_admin',
            'banking_account_service_lms_routes_all',
            'banking_account_service_lms_routes_ops',
            'banking_account_statement_generate',
            'banking_account_statement_process_admin',
            'banking_account_statement_source_update',
            'banking_account_statement_source_update_validate',
            'banking_account_update',
            'banking_account_webhook_account_info_internal',
            'banking_account_yesb_bulk_create',
            'banking_accounts_list',
            'account_service_trigger_sync',
            'account_service_trigger_full_sync',
            'batch_create',
            'batch_create_admin',
            'offer_bulk_deactivate',
            'batch_download_file',
            'batch_fetch_by_id',
            'batch_fetch_multiple',
            'batch_process_by_id',
            'batch_service_route',
            'batch_stats',
            'batch_upload_form_get',
            'batch_upload_form_validate_file',
            'batch_validate_file',
            'validate_file_name',
            'batch_validate_file_admin',
            'beta_account_create',
            'beta_account_fetch',
            'beta_account_fetch_multiple',
            'beta_account_fetch_setl_destinations',
            'beta_account_post_bank_account',
            'bharat_qr_pay_test',
            'bootstrap_key_cache',
            'bulk_contact_create',
            'bulk_copy_internal_instrument_request',
            'bulk_create_fund_accounts',
            'bulk_data_entry',
            'bulk_invoice_create',
            'bulk_submerchant_assign',
            'bvs_service_dashboard',
            'bvs_validation_artifact_details',
            'can_merchant_submit_support_call_request',
            'capital_cards_admin',
            'capital_cards_service',
            'capital_cards_onboarding',
            'capital_cards_dev_admin',
            'capital_collections_dev_admin',
            'capital_collections_admin',
            'capital_marketplace_admin',
            'capital_scorecard_admin',
            'capital_lender_admin',
            'capital_collections_service',
            'capital_collections_webhook',
            'capital_transaction_create',
            'capital_marketplace_oauth',
            'card_check_recurring',
            'card_fetch_by_id',
            'card_fetch_multiple',
            'card_issuer_validate',
            'care_service_dashboard_proxy',
            'care_service_admin_proxy',
            'care_service_dark_proxy',
            'cmma_service_admin_proxy',
            'merchant_nc_count_admin',
            'channel_health_check',
            'checkout',
            'checkout_embedded',
            'checkout_embedded_get',
            'checkout_hdfcvas',
            'checkout_hosted',
            'checkout_hosted_get',
            'checkout_onyx',
            'checkout_personalisation',
            'checkout_public',
            'checkout_public_canary',
            'checkout_rewards',
            'cities_get',
            'commissions_analytics',
            'commissions_bulk_capture_by_partner',
            'commissions_capture',
            'commissions_capture_by_partner',
            'invoice_on_hold_clear_bulk',
            'commissions_get',
            'commissions_get_aggregates',
            'commissions_get_multiple',
            'commissions_invoice_fetch',
            'commissions_invoice_fetch_all',
            'commissions_invoice_generate',
            'commissions_invoice_status_change',
            'commissions_mark_for_settlement',
            'partner_activation_migrate',
            'partner_activation_update',
            'partner_activation_status',
            'consume_typeform_webhook',
            'contact_create',
            'contact_get',
            'contact_list',
            'contact_types_get',
            'contact_types_post',
            'contact_update',
            'correct_merchant_owners_products',
            'coupon_apply',
            'coupon_create',
            'coupon_delete',
            'coupon_update',
            'coupon_validate',
            'create_credit_note',
            'create_low_balance_config_admin',
            'create_merchant_notification_config',
            'create_merchant_notification_config_admin',
            'create_merchant_options',
            'create_merchant_options_admin',
            'create_payment_config',
            'create_payment_config_admin',
            'create_payment_config_bulk',
            'create_payout_downtime',
            'create_fund_loading_downtime',
            'create_promotions_events',
            'create_submerchant_user',
            'create_virtual_account_from_order',
            'credit_note_apply',
            'credit_note_get',
            'credit_note_list',
            'credit_repayment_transaction_create',
            'credits_create',
            'credits_create_bulk',
            'credits_edit',
            'credits_fetch_by_id',
            'credits_fetch_multiple',
            'currency_fetch_all',
            'currency_fetch_all_proxy',
            'currency_fetch_rates',
            'currency_fetch_rates_proxy',
            'customer_add_bank_account',
            'customer_cancel_token',
            'customer_collect_request_fetch_private',
            'customer_create',
            'customer_create_address',
            'customer_create_token',
            'customer_create_token_public',
            'customer_delete_address',
            'customer_delete_token',
            'customer_fetch_addresses',
            'customer_fetch_bank_account',
            'customer_delete_bank_account',
            'customer_fetch_by_id',
            'customer_fetch_multiple',
            'customer_fetch_token',
            'customer_fetch_tokens',
            'customer_flagging_entity_details',
            'customer_flagging_post_grievance',
            'customer_flagging_post_grievance_options',
            'customer_get_saved_status',
            'customer_get_wallet_balance',
            'customer_get_wallet_statement',
            'customer_logout_global',
            'customer_set_primary_address',
            'customer_update',
            'customer_update_token',
            'customer_wallet_payout',
            'db_meta_query',
            'delete_additional_websites',
            'delete_config_key',
            'delete_fund_loading_downtime_by_id',
            'delete_internal_instrument_request_by_id',
            'delete_low_balance_config_admin',
            'delete_merchant_notification_config',
            'delete_merchant_notification_config_admin',
            'delete_merchant_options',
            'delete_merchant_options_admin',
            'delete_payment_config',
            'device_create',
            'device_verify',
            'device_verify_token',
            'disable_low_balance_config_admin',
            'disable_merchant_notification_config',
            'disable_merchant_notification_config_admin',
            'dispute_bulk_create',
            'dispute_bulk_edit',
            'dispute_edit',
            'dispute_fetch',
            'dispute_fetch_multiple',
            'dispute_fetch_multiple_count',
            'dispute_file_delete',
            'dispute_files_fetch',
            'dispute_poc_mails',
            'dispute_reason_create',
            'document_upload_v1',
            'document_get_v1',
            'document_download_v1',
            'document_download_v2',
            'document_get_v2',
            'document_upload_v2',
            'download_papernach_form',
            'dummy_critical_error',
            'dummy_return_callback',
            'dummy_route',
            'edge_list_services',
            'edge_list_routes',
            'edge_create_rate_limit_rule',
            'edge_list_rate_limit_rules',
            'edge_update_rate_limit_rule',
            'edge_delete_rate_limit_rule',
            'edge_create_rate_limit_limit',
            'edge_list_rate_limit_limits',
            'edge_update_rate_limit_limit',
            'edge_delete_rate_limit_limit',
            'edge_get_consumer',
            'waf_rule_signed_url',
            'edit_merchant_balance_config',
            'edit_throttle_settings',
            'emi_generate_excel',
            'emi_plan_add',
            'emi_plan_delete',
            'emi_plan_fetch_by_id',
            'emi_plans_fetch_multiple',
            'emi_plans_migrate',
            'enable_emi_merchant_sub',
            'enable_es_scheduled',
            'enable_low_balance_config_admin',
            'enable_merchant_notification_config',
            'enable_merchant_notification_config_admin',
            'entity_balance_id_update',
            'entity_bulk_update',
            'entity_origin_create',
            'es_aliases_post',
            'es_debug_get',
            'es_index',
            'es_index_create',
            'es_proxy',
            'es_sync_entities',
            'es_transactions_sync',
            'es_payouts_sync',
            'orphan_payouts_delete',
            'excel_store_create_page',
            'excel_store_delete_records',
            'excel_store_get_records',
            'excel_store_list_pages',
            'excel_store_page_by_url',
            'excel_store_update_page',
            'excel_store_update_records',
            'fb_setl_fetch_transactions',
            'fd_create_ticket',
            'fd_fetch_converations',
            'fd_fetch_ticket',
            'fd_fetch_tickets',
            'fd_post_ticket_grievance',
            'fd_post_ticket_reply',
            'fd_reserve_balance_ticket',
            'fd_reserve_balance_ticket_status',
            'feature_add',
            'enable_instant_refunds',
            'feature_bulk_assign',
            'feature_bulk_remove',
            'feature_delete',
            'feature_delete_entity',
            'disable_instant_refunds',
            'feature_dummy',
            'feature_get',
            'feature_get_all',
            'feature_get_multiple',
            'feature_get_status',
            'feature_onboarding_create',
            'feature_onboarding_fetch_all_responses',
            'feature_onboarding_fetch_responses',
            'fee_recovery_manual_update',
            'fee_recovery_payout_admin',
            'fee_recovery_payout_manual_retry',
            'fee_recovery_payout_schedule_task',
            'fetch_batch_action_entities',
            'fetch_batch_actions',
            'fetch_instrument_comment_list',
            'fetch_instrument_previous_status',
            'terminal_enable_bulk',
            'update_template_mappings',
            'fetch_template_mappings',
            'terminals_proxy_fetch_multiple',
            'terminals_proxy_update_methods_from_rules',
            'fetch_internal_instrument_requests',
            'fetch_fund_loading_downtime_by_id',
            'fetch_merchant_balance_configs',
            'fetch_merchant_instrument_requests',
            'trigger_instrument_rules_event',
            'fetch_merchant_notification_config',
            'fetch_merchant_notification_config_admin',
            'fetch_merchant_products',
            'fetch_merchant_sr',
            'fetch_offline_device_multiple',
            'fetch_order_line_items',
            'fetch_partner_intent',
            'fetch_payment_config',
            'fetch_payment_config_admin',
            'fetch_payment_merchant_actions',
            'fetch_payout_downtime_by_id',
            'fetch_payout_downtimes',
            'fetch_payout_downtimes_enabled',
            'fetch_product_details_for_order',
            'fetch_product_status',
            'fetch_throttle_settings',
            'file_get_signed_url',
            'file_upload_admin',
            'financial_data_service',
            'freshdesk_create_ticket',
            'freshdesk_fetch_tickets',
            'freshdesk_otp_send',
            'freshdesk_raise_grievance',
            'freshdesk_account_recovery_create_ticket',
            'freshchat_put_chat_timings_config',
            'freshchat_get_chat_timings_config',
            'freshchat_put_chat_holidays_config',
            'freshchat_get_chat_holidays_config',
            'fts_dashboard_bulk_status_get',
            'fts_dashboard_new_channel_health_stats',
            'fts_dashboard_trigger_health_status',
            'fts_dashboard_fund_transfer_check_status',
            'fts_dashboard_fund_transfer_status_bulk',
            'fts_dashboard_fund_transfer_update',
            'fts_dashboard_pending_transfers_get',
            'fts_dashboard_raw_bank_status',
            'fts_dashboard_fetch_account_balance',
            'fts_dashboard_sa_mappings_create',
            'fts_dashboard_sa_mappings_delete',
            'fts_dashboard_direct_account_routing_rules_delete',
            'fts_dashboard_direct_account_routing_rules_create',
            'fts_dashboard_source_account_create',
            'fts_dashboard_source_account_copy',
            'fts_dashboard_source_account_delete',
            'fts_dashboard_source_account_update',
            'fts_dashboard_source_account_graceful_update',
            'fts_dashboard_transfer_force_retry',
            'fts_dashboard_fail_queued_transfer',
            'fts_dashboard_fail_queued_transfer_bulk',
            'fts_dashboard_schedule_create',
            'fts_dashboard_schedule_delete',
            'fts_dashboard_schedule_update',
            'fts_dashboard_manual_override',
            'fts_dashboard_merchant_configurations_create',
            'fts_dashboard_merchant_configurations_delete',
            'fts_dashboard_merchant_configurations_patch',
            'fts_dashboard_fail_fast_status_manual_update',
            'fts_dashboard_key_value_store_patch',
            'fts_dashboard_key_value_store_post',
            'fund_account_bulk_create',
            'fund_account_create',
            'fund_account_create_public',
            'fund_account_get',
            'fund_account_list',
            'fund_account_update',
            'banking_account_beneficiary_fetch',
            'fund_account_validate',
            'fund_account_validate_bulk_patch_status',
            'fund_account_validate_fetch',
            'fund_account_validate_fetch_by_id',
            'fund_transfer_attempt_bulk_update',
            'fund_transfer_attempt_initiate_action',
            'gateway_create_downtime',
            'refresh_payments_ongoing_downtimes',
            'refresh_payments_resolved_downtimes',
            'refresh_payments_scheduled_downtimes',
            'add_downtime_slack_merchant_names',
            'gateway_create_rule',
            'gateway_delete_downtime',
            'gateway_delete_rule',
            'gateway_downtime_source_webhook',
            'gateway_emandate_callback_npci_nb',
            'gateway_fetch_downtimes',
            'gateway_file_acknowledge',
            'gateway_file_create',
            'gateway_file_retry',
            'gateway_payment_callback_amazonpay',
            'gateway_payment_callback_amazonpay_post',
            'gateway_payment_callback_bharatqr',
            'gateway_payment_callback_canara_get',
            'gateway_payment_callback_canara_post',
            'gateway_payment_callback_corporation',
            'gateway_payment_callback_get',
            'gateway_payment_callback_getsimpl_post',
            'gateway_payment_callback_kotak',
            'gateway_payment_callback_kotak_cancel',
            'gateway_payment_callback_kotak_corp_get',
            'gateway_payment_callback_kotak_corp_post',
            'gateway_payment_callback_post',
            'gateway_payment_callback_recurring',
            'gateway_payment_callback_upi_airtel',
            'gateway_payment_callback_yesb_get',
            'gateway_payment_callback_yesb_post',
            'gateway_payment_static_callback_get',
            'gateway_payment_static_callback_post',
            'gateway_payment_static_s2scallback_get',
            'gateway_payment_static_s2scallback_post',
            'gateway_payment_validate_bharatqr',
            'gateway_update_downtime',
            'gateway_update_rule',
            'geoip_update',
            'get_account_documents_v2',
            'get_cache_counts',
            'get_channel_action',
            'get_config_key',
            'get_config_keys',
            'get_es_pricing_merchant',
            'payment_validate_vpa_internal',
            'get_free_payouts_attributes',
            'get_gateway_downtime_conf',
            'get_instant_refunds_pricing_merchant',
            'get_internal_instrument_request_by_id',
            'get_irctc_settlement_file_admin',
            'get_merchant_balance_config',
            'get_merchant_partner_status',
            'get_merchant_support_option_flags',
            'get_mode_config_instruments',
            'get_paper_mandate_uploaded_url',
            'get_scheduled_es_pricing_merchant',
            'get_stakeholder_documents_v2',
            'get_templates',
            'get_method_templates',
            'governor_create_bulk_rule_group_v1',
            'governor_create_config_v1',
            'governor_create_domain_model',
            'governor_create_merchant_rule_group',
            'governor_create_namespace',
            'governor_create_namespace_v1',
            'governor_create_rule',
            'governor_create_rule_bulk',
            'governor_create_rule_chain',
            'governor_create_rule_chain_v1',
            'governor_create_rule_group_v1',
            'governor_create_rule_v1',
            'governor_create_template_v1',
            'governor_delete_config_v1',
            'governor_delete_merchant_rule_group',
//            'governor_delete_namespace_v1',
            'governor_delete_rule_chain_v1',
            'governor_delete_rule_group_v1',
            'governor_delete_rule_v1',
            'governor_domain_model_list',
            'governor_get_client_v1',
            'governor_get_config_v1',
            'governor_get_merchant_rule_group',
            'governor_get_namespace_v1',
            'governor_get_rule',
            'governor_get_rule_group_v1',
            'governor_get_rule_v1',
            'governor_list_config_map_v1',
            'governor_list_config_v1',
            'governor_list_merchant_providers',
            'governor_list_merchant_rule_groups',
            'governor_list_namespace_v1',
            'governor_list_rule_chains_v1',
            'governor_list_rule_groups_v1',
            'governor_list_rule_v1',
            'governor_list_template_v1',
            'governor_reorder_merchant_rule_groups',
            'governor_rule_chain_execute',
            'governor_rule_chain_list',
            'governor_rule_list',
            'governor_search_rules',
            'governor_optimizer_events',
            'governor_optimizer_rulegroup_stats',
            'governor_optimizer_merchant_stats',
            'governor_routing_events',
            'governor_update_chain_group_sequence_v1',
            'governor_update_config_v1',
            'governor_update_merchant_rule_group',
            'governor_update_merchant_rule_group_mode',
            'governor_optimizer_create_merchant',
            'governor_optimizer_update_merchant',
            'governor_update_namespace',
            'governor_update_namespace_v1',
            'governor_update_rule',
            'governor_update_rule_bulk',
            'governor_update_rule_chain',
            'governor_update_rule_chain_v1',
            'governor_update_rule_group_v1',
            'governor_update_rule_index_v1',
            'governor_update_rule_v1',
            'governor_update_template_v1',
            // cache downtime router routes
            'router_gateway_downtime_create',
            'router_gateway_downtime_delete',
            'router_gateway_downtime_fetch',
            'router_refresh_cron',
            'terminals_proxy_get_merchant_optimizer_provider',
            'terminals_proxy_get_optimizer_gateways',
            'terminals_proxy_add_optimizer_provider',
            'terminals_proxy_update_optimizer_provider',
            'terminals_proxy_get_optimizer_merchant_methods',
            'setl_optimizer_settlement_manual_api',
            'setl_insert_new_transaction_records',
            'setl_update_optimiser_execution_status',
            'setl_update_execution_transaction_count',
            'gratis_postpaid_transactions',
            'group_create',
            'group_delete',
            'group_edit',
            'group_get',
            'group_get_allowed_groups',
            'group_get_multiple',
            'growth_downtime_for_x',
            'hosted_subscription_button_details',
            'subscription_button_hosted_button_details',
            'iin_add',
            'iin_edit',
            'iin_edit_bulk',
            'iin_generate_post',
            'iin_list_by_flow',
            'iin_range_upload',
            'iin_upload',
            'initiate_terminal_onboarding',
            'inspector_view_get',
            'instrument_request_razorx_admin',
            'internal_balance_fetch_by_id',
            'internal_balance_fetch_by_merchant_id',
            'invitation_create',
            'invitation_delete',
            'invitation_edit',
            'invitation_fetch',
            'invitation_resend',
            'accounting_integrations_invite_resend',
            'invoice_add_line_items',
            'invoice_cancel',
            'invoice_cancel_by_batch',
            'invoice_cancel_by_batch_admin',
            'invoice_create',
            'invoice_delete',
            'invoice_fetch',
            'invoice_fetch_multiple',
            'invoice_get_count',
            'invoice_get_pdf',
            'invoice_get_stats_by_batch_ids',
            'invoice_get_status',
            'invoice_issue',
            'invoice_issue_by_batch',
            'invoice_notify_by_batch',
            'invoice_remove_line_item',
            'invoice_remove_line_item_bulk',
            'invoice_send_notification',
            'invoice_send_notification_private',
            'invoice_send_notification_proxy',
            'invoice_update',
            'invoice_update_billing_period',
            'invoice_update_line_item',
            'invoice_view_live',
            'invoice_view_live_post',
            'invoice_view_live_preferences_test',
            'invoice_view_test',
            'invoice_view_test_post',
            'invoice_view_test_preferences_test',
            'item_create',
            'item_delete',
            'item_fetch',
            'item_fetch_multiple',
            'item_update',
            'la_fetch',
            'la_transfer_create_reversal',
            'link_account_documents_v2',
            'link_stakeholder_documents_v2',
            'linked_account_create_batch',
            'payment_transfer_batch',
            'list_active_fund_loading_downtimes',
            'list_fund_loading_downtimes',
            'list_low_balance_config_admin',
            'list_merchant_notification_config',
            'list_merchant_notification_config_admin',
            'loc_bulk_withdrawal_update',
            'loc_service',
            'loc_service_admin',
            'loc_service_dev_admin',
            'capital_marketplace_dev_admin',
            'capital_scorecard_dev_admin',
            'capital_lender_dev_admin',
            'capital_es_dev_admin',
            'settlement_ondemand_reverse',
            'los_service',
            'los_service_admin',
            'los_service_dev_admin',
            'capital_marketplace_service',
            'mailgun_webhook',
            'mark_transactions_postpaid',
            'merchant_2fa_change_setting',
            'merchant_actions',
            'merchant_activation_archive',
            'merchant_activation_bulk_assign_reviewer',
            'merchant_activation_business_categories',
            'merchant_activation_business_categories_v2',
            'merchant_activation_business_details',
            'merchant_activation_company_search',
            'merchant_activation_details',
            'merchant_activation_files',
            'merchant_activation_needs_clarification',
            'merchant_business_types',
            'merchant_supported_plugins',
            'merchant_activation_reviewers',
            'merchant_activation_save',
            'merchant_tnc_save',
            'merchant_tnc_details_by_mid',
            'merchant_tnc_details',
            'merchant_checkout_details_save',
            'merchant_checkout_details',
            'merchant_activation_document_type',
            'merchant_activation_status',
            'merchant_activation_status_change_log',
            'merchant_activation_status_partner',
            'merchant_activation_update',
            'merchant_activation_send_notification',
            'merchant_activation_get_request_document_list',
            'merchant_activation_update_partner',
            'merchant_activation_update_website',
            'merchant_activation_update_website_status',
            'merchant_activation_upload_file',
            'merchant_activation_upload_file_admin',
            'merchant_analytics',
            'merchant_aov_config',
            'merchant_assign_pricing',
            'merchant_associated_accounts_fetch',
            'merchant_balance_bulk_backfill_ids',
            'merchant_balance_create',
            'merchant_balance_fetch',
            'merchant_balance_fetch_admin',
            'merchant_bank_account_change_status',
            'merchant_bank_account_create',
            'merchant_bank_account_update',
            'merchant_bank_account_file_upload',
            'org_bank_account_create',
            'org_fetch_bank_account',
            'org_update_bank_account',
            'merchant_batches',
            'merchant_beneficiary_file',
            'merchant_billing_label_suggestions',
            'merchant_billing_label_update',
            'merchant_bulk_edit_attributes',
            'merchant_checkout_preferences',
            'merchant_create',
            'merchant_create_additional_email',
            'merchant_create_key',
            'merchant_create_key_with_otp',
            'merchant_create_terminal',
            'merchant_credits_balance_fetch',
            'merchant_delete_additional_email',
            'merchant_delete_config_logo',
            'merchant_delete_terminal',
            'merchant_validate_delete_terminal_v3',
            'merchant_delete_terminal_v3',
            'merchant_details_fetch',
            'smart_dashboard_merchant_details_fetch',
            'merchant_details_patch',
            'smart_dashboard_merchant_details_patch',
            'external_merchant_composite_details_fetch',
            'merchant_details_suggested_update',
            'merchant_document_admin_fetch',
            'merchant_document_admin_upload',
            'merchant_document_admin_delete',
            'merchant_document_delete',
            'merchant_document_fetch',
            'merchant_document_types_fetch',
            'merchant_document_upload',
            'merchant_document_url_fetch',
            'affordability_widget_trial_period_update',
            'merchant_edit',
            'merchant_edit_bank_account',
            'merchant_edit_config',
            'merchant_edit_email2fa',
            'merchant_edit_config_la',
            'merchant_edit_config_logo',
            'merchant_edit_email',
            'update_merchant_mobile_number',
            'merchant_edit_email_la',
            'merchant_edit_free_credits',
            'merchant_edit_pre_signup_details',
            'merchant_risk_alerts_foh_workflow_trigger_nc',
            'merchant_risk_alerts_needs_clarification_fetch_mapping',
            'merchant_risk_alerts_create_rule',
            'merchant_risk_alerts_update_rule',
            'merchant_risk_alerts_delete_rule',
            'merchant_edit_risk_attributes',
            'cyber_helpdesk_admin_upload_document',
            'cyber_helpdesk_admin_delete_document',
            'cyber_helpdesk_admin_create_ticket',
            'execute_bulk_action',
            'merchant_features_fetch',
            'merchant_features_update',
            'merchant_fetch',
            'merchant_fetch_additional_email',
            'merchant_fetch_all_additional_email',
            'merchant_fetch_bank_account',
            'merchant_fetch_config',
            'merchant_fetch_config_internal',
            'merchant_fetch_keys',
            'merchant_fetch_methods',
            'merchant_fetch_multiple',
            'merchant_fetch_referrals',
            'merchant_fetch_schedule_tasks',
            'merchant_fetch_tpvs',
            'merchant_fetch_users',
            'merchant_generate_test_bank_acnt',
            'merchant_get_apps_on_appstore',
            'merchant_get_banks',
            'merchant_get_disabled_banks',
            'merchant_get_preferences',
            'merchant_get_pricing',
            'merchant_get_rejection_reasons',
            'merchant_get_tags',
            'merchant_get_capital_tags',
            'merchant_get_terminals',
            'merchant_gst_edit',
            'merchant_gst_fetch',
            'merchant_gstin_self_serve_status',
            'merchant_gstin_self_serve_update',
            'merchant_fetch_payment_failure_analysis',
            'merchant_inheritance_parent_delete',
            'merchant_inheritance_parent_fetch',
            'merchant_inheritance_parent_set',
            'merchant_inheritance_parent_set_bulk',
            'merchant_install_app_on_appstore',
            'merchant_instant_activation_post',
            'merchant_instrument_request_create',
            'merchant_instrument_request_create_bulk',
            'merchant_instrument_request_create_bulk_v2',
            'merchant_instrument_request_get_by_id',
            'merchant_instrument_request_get_by_merchant_id',
            'merchant_instrument_request_update_by_id',
            'merchant_instrument_status_get_by_merchant_id',
            'merchant_international_toggle',
            'merchant_integration_create',
            'merchant_integrations_get',
            'merchant_integrations_delete',
            'create_beneficiary_for_international_payout',
            'get_beneficiary_details_for_international_payout_admin',
            'merchant_invoice_add_bulk',
            'merchant_invoice_control',
            'merchant_invoice_entity_create_admin',
            'merchant_invoice_fetch_multiple',
            'merchant_invoice_pdf_control',
            'merchant_invoice_update_gstin',
            'merchant_live_disable',
            'merchant_live_enable',
            'merchant_locked_balance_update',
            'merchant_methods',
            'merchant_methods_downtime',
            'merchant_methods_edit',
            'merchant_mtu_update_dashboard',
            'merchant_onboard_terminal',
            'merchant_one_time_token',
            'merchant_partner_configs_fetch',
            'merchant_partners_fetch',
            'merchant_poc_update',
            'merchant_poc_update_with_time',
            'merchant_post_preferences',
            'merchant_bank_allocation',
            'merchant_pre_signup_details',
            'merchant_pricing_bulk',
            'merchant_primary_balance_fetch',
            'merchant_product_international_request',
            'merchant_product_switch',
            'merchant_public_get_banks',
            'merchant_put_payment_methods',
            'merchant_razorx_bulk_evaluate',
            'merchant_razorx_evaluate',
            'merchant_replace_key',
            'merchant_replace_key_with_otp',
            'merchant_requests_bulk_update',
            'merchant_requests_create',
            'merchant_requests_get',
            'merchant_requests_get_feature',
            'merchant_requests_list',
            'merchant_requests_rejection_reasons',
            'merchant_requests_status_log',
            'merchant_requests_update',
            'merchant_restrict',
            'merchant_schedule_bulk',
            'merchant_schedule_reset',
            'merchant_send_activation_mail',
            'merchant_set_banks',
            'merchant_sub_create',
            'merchant_sub_send_password_link',
            'merchant_submit_support_call_request',
            'merchant_sync_stakeholder',
            'merchant_tag_add',
            'merchant_tag_delete',
            'merchant_tag_map_create',
            'merchant_tag_map_update',
            'merchant_tags_bulk',
            'merchant_tpv_create',
            'merchant_update_key_access',
            'merchant_user_reset_password',
            'merchant_verify_attributes',
            'merchants_access_map_create',
            'merchants_access_map_delete',
            'merchants_access_map_update',
            'merchants_risk_admin',
            'merchants_risk_create_alert_config',
            'merchants_risk_update_alert_config',
            'merchants_risk_delete_alert_config',

            'merchants_risk_service',
            'merchant_workflow_details',
            'merchant_consents_admin_fetch',
            'merchants_update_bank_account',
            'merchants_update_bulk',
            'merchants_update_channel',
            'methods_update_merchants',
            'migrate_tokens_to_gateway_tokens',
            'mir_instrument_set',
            'mir_instruments_get',
            'mob_intent_apply_application',
            'mob_fetch_application',
            'mob_fetch_multiple_applications',
            'mob_create_intent',
            'mob_fetch_intent',
            'mob_fetch_multiple_intents',
            'mob_get_workflow',
            'mob_save_workflow',
            'mock_acs',
            'mock_aeps_payment',
            'mock_amex_payment',
            'mock_atom_payment',
            'mock_axis_genius_payment',
            'mock_axis_migs_payment',
            'mock_billdesk_payment',
            'mock_card_fss_payment',
            'mock_card_fss_payment_post',
            'mock_cardless_emi_payment',
            'mock_ebs_payment',
            'mock_emandate_payment',
            'mock_esigner_payment',
            'mock_event_tracker',
            'mock_first_data_payment',
            'mock_generate_reconciliation',
            'mock_hdfc_3dsecure',
            'mock_mobikwik_payment',
            'mock_mozart_payment_get',
            'mock_mozart_payment_post',
            'mock_netbanking_payment',
            'mock_netbanking_payment_get',
            'mock_paylater_payment',
            'mock_paysecure_payment',
            'mock_paytm_payment',
            'mock_sharp_payment_get',
            'mock_sharp_payment_post',
            'mock_sharp_payment_submit',
            'mock_upi_payment',
            'mock_wallet_payment',
            'mock_wallet_payment_get',
            'mock_wallet_payment_with_paymentid',
            'mozart_gateway_action',
            'mpans_fetch',
            'mpans_issue',
            'nach_register_test_payment_authorize_or_fail',
            'nodal_add_beneficiary',
            'nodal_beneficiary_update',
            'nodal_file_upload_retry',
            'nodal_initiate_transfer_admin',
            'notification_flow_fund_loading_downtime',
            'oauth_app_webhook_create',
            'oauth_application_create',
            'oauth_application_create_clients',
            'oauth_application_refresh_clients',
            'oauth_application_create_partner',
            'oauth_application_delete',
            'oauth_application_delete_client',
            'oauth_application_fetch',
            'oauth_application_fetch_multiple',
            'oauth_application_fetch_partner',
            'oauth_application_update',
            'oauth_sync_merchant_map',
            'oauth_token_create',
            'oauth_token_fetch',
            'oauth_token_fetch_multiple',
            'oauth_token_revoke',
            'oauth_fetch_submerchant_applications',
            'oauth_application_access_revoke',
            'offer_create',
            'offer_create_bulk',
            'offer_fetch_by_id',
            'offer_fetch_multiple',
            'offer_fetch_subscription',
            'offer_update',
            'offline_qr_poll_live_order_status',
            'offline_qr_poll_test_order_status',
            'on_demand_settlement',
            'on_demand_settlement_fees',
            'onboarding_features_bulk_update_status',
            'onboarding_features_create',
            'onboarding_features_fetch_details',
            'onboarding_features_fetch_status',
            'onboarding_features_fetch_submission',
            'onboarding_features_fetch_submissions',
            'onboarding_features_get_submissions',
            'onboarding_features_update',
            'onboarding_features_update_status',
            'onboarding_webhook_create',
            'onboarding_webhook_fetch',
            'onboarding_webhook_fetch_all',
            'onboarding_webhook_update',
            'onboarding_webhook_delete',
            'order_create',
            'order_edit',
            'order_fetch',
            'order_fetch_by_id',
            'order_fetch_by_id_1cc',
            'order_payments',
            'org_create',
            'org_delete',
            'org_edit',
            'org_fieldmap_create',
            'org_fieldmap_delete',
            'org_fieldmap_edit',
            'org_fieldmap_get',
            'org_fieldmap_get_by_entity',
            'org_fieldmap_get_multiple',
            'org_get',
            'org_get_multiple',
            'org_get_self',
            'otp_create',
            'otp_post',
            'otp_verify',
            '1cc_otp_verify',
            'otp_verify_app',
            'p2p_admin_add_handle',
            'p2p_admin_manage_banks',
            'p2p_admin_update_handle',
            'p2p_fetch_private',
            'pages_view',
            'pages_view_by_slug',
            'pages_view_by_slug_empty',
            'paper_nach_approve_failure',
            'paper_nach_fetch_failure',
            'partner_config_create_admin',
            'partner_config_fetch_admin',
            'partner_config_edit_admin',
            'partner_config_fetch',
            'partner_config_edit',
            'partner_config_edit_logo',
            'create_partner_sub_merchant_config',
            'update_partner_sub_merchant_config',
            'partner_bulk_update_onboarding_source',
            'partner_referral_create',
            'partner_referral_fetch',
            'partner_activation_migrate',
            'partner_actions',
            'partner_activation_bulk_assign_reviewer',
            'bulk_migrate_aggregator_to_reseller',
            'bulk_migrate_reseller_to_aggregator',
            'migrate_reseller_to_aggregator',
            'migrate_aggregator_to_reseller',
            'migrate_reseller_to_pure_platform',
            'migrate_pure_platform_to_reseller',
            'patch_internal_instrument_request_by_id',
            'pause_internal_instrument_request_by_id',
            'patch_internal_instrument_requests',
            'bulk_cancel_internal_instrument_requests',
            'create_iir_discrepancy_answer_admin',
            'get_discrepancy_list',
            'create_iir_discrepancy',
            'create_iir_discrepancy_bulk',
            'fetch_iir_discrepancies_of_iir',
            'create_static_discrepancy',
            'edit_static_discrepancy',
            'fetch_iir_discrepancies_for_merchant',
            'patch_iir_discrepancy_by_id',
            'payment_acknowledge',
            'payment_add_metadata',
            'payment_authorize_failed',
            'payment_authorize_refund',
            'payment_authorize_time_out',
            'payment_auto_capture_email',
            'payment_bank_transfer_fetch',
            'payment_bulk_capture',
            'payment_button_hosted_view',
            'payment_calculate_fees',
            'payment_callback_ajax_get',
            'payment_callback_get',
            'payment_callback_post',
            'payment_cancel',
            'payment_capture',
            'payment_capture_gateway_manual',
            'payment_capture_verify',
            'payment_card_vault_migrate',
            'payment_create',
            'payment_create_aeps',
            'payment_create_ajax',
            'payment_create_checkout',
            'payment_create_checkout_get',
            'payment_create_checkout_json',
            'payment_create_fees',
            'payment_create_jsonp',
            'payment_create_nach_register',
            'payment_create_openwallet',
            'payment_create_private',
            'payment_create_private_json',
            'payment_create_private_old',
            'payment_create_recurring',
            'payment_create_subscriptions',
            'payment_create_upi',
            'payment_create_wallet',
            'payment_dispute_create',
            'payment_edit',
            'payment_fees',
            'payment_fetch_by_id',
            'payment_fetch_card_details',
            'payment_fetch_multiple',
            'payment_fetch_refund_by_id',
            'payment_fetch_refunds',
            'payment_fetch_transaction',
            'payment_fetch_transfers',
            'payment_fix_attempted_orders',
            'payment_fix_authorize_at',
            'payment_force_authorize',
            'payment_get_flows',
            'payment_get_flows_private',
            'payment_get_iin_details',
            'payment_get_status',
            'payment_links_demo',
            'payment_links_demo_cors',
            'payment_links_payment_by_id',
            'payment_links_service_count_route',
            'payment_links_get',
            'payment_links_create',
            'payment_links_update',
            'payment_links_cancel',
            'payment_links_expire',
            'payment_links_fetch_multiple',
            'payment_links_notify_by_medium',
            'payment_links_get_reminder_next_run',
            'payment_links_get_batch_status',
            'payment_links_service_hosted_page',
            'payment_links_sign_payload',
            'payment_links_switch_versions',
            'payment_links_v2_admin',
            'payment_links_ops_batch_cancel',
            'payment_links_plans_fetch',
            'payment_links_insights',
            'payment_mandate_hq_redirect_authenticate',
            'payment_on_hold_bulk_update',
            'payment_otp_generate',
            'payment_otp_resend',
            'payment_otp_resend_json',
            'payment_otp_resend_private',
            'payment_otp_submit',
            'payment_otp_submit_private',
            'payment_page_activate',
            'payment_page_create',
            'payment_page_cds_domain_create',
            'payment_page_cds_domain_list',
            'payment_page_cds_domain_delete',
            'payment_page_cds_check_propagation',
            'payment_page_cds_domain_exists',
            'payment_page_cds_subdomain',
            'payment_page_cds_fetch_plans',
            'payment_page_cds_fetch_plan',
            'payment_page_cds_create_plans',
            'payment_page_cds_update_plans',
            'payment_page_cds_delete_plans',
            'payment_page_create_order',
            'payment_page_get_pending_payments',
            'store_create_order',
            'payment_page_create_order_option',
            'store_create_order_options',
            'payment_page_deactivate',
            'payment_page_fetch_merchant_details',
            'payment_page_get',
            'payment_page_get_details',
            'payment_page_get_invoice_details',
            'payment_page_hosted_button_details',
            'payment_page_hosted_button_preferences',
            'payment_page_images',
            'payment_page_item_update',
            'payment_page_list',
            'payment_page_notify',
            'payment_page_save_receipt_for_payment',
            'payment_page_send_receipt',
            'payment_page_set_merchant_details',
            'payment_page_set_receipt_details',
            'payment_page_slug_exists',
            'payment_page_update',
            'payment_page_view_get',
            'payment_page_get_batches',
            'payment_handle_precreate',
            'payment_handle_create',
            'payment_handle_update_old',
            'payment_handle_update',
            'payment_handle_get',
            'payment_handle_availability',
            'payment_handle_suggestion',
            'payment_handle_amount_encryption',
            'payment_button_create',
            'payment_button_list',
            'payment_button_get_details',
            'payment_button_get',
            'payment_button_update',
            'payment_button_item_update',
            'payment_button_activate',
            'payment_button_deactivate',
            'payment_button_create_order',
            'payment_button_send_receipt',
            'payment_button_set_receipt_details',
            'payment_button_create_order_option',
            'payment_button_hosted_preferences',
            'payment_button_hosted_button_details',
            'payment_button_fetch_merchant_details',
            'payment_button_set_merchant_details',
            'payment_button_get_receipt_details',
            'payment_button_save_receipt_for_payment',

            'fetch_emandate_merchant_configs',
            'create_emandate_merchant_configs',
            'edit_emandate_merchant_configs',

            'fetch_netbanking_configs',
            'create_netbanking_configs',
            'edit_netbanking_configs',

            'fetch_all_banking_configs',
            'get_banking_config',
            'edit_banking_configs',
            'fetch_merchant_da_payout_mode_config',
            'create_merchant_da_payout_mode_config',
            'edit_merchant_da_payout_mode_config',

            'nca_store_create',
            'nca_store_list',
            'nca_store_details',
            'nca_store_update',
            'nca_store_delete',
            'nca_store_payments',
            'nca_store_activate',
            'nca_store_deactivate',
            'nca_store_order_line_item',

            'store_category_create',
            'store_category_list',
            'store_category_details',
            'store_category_update',
            'store_category_delete',

            'store_catalog_create',
            'store_catalog_list',
            'store_catalog_details',
            'store_catalog_update',
            'store_catalog_delete',

            'payment_payout',
            'payment_redirect_3ds',
            'payment_redirect_3ds_get',
            'payment_redirect_callback',
            'payment_redirect_to_authenticate_get',
            'payment_redirect_to_authenticate_post',
            'payment_redirect_to_authorize',
            'payment_refund',
            'payment_refund_at_bulk_update',
            'payment_status_count',
            'payment_topup_ajax',
            'payment_topup_post',
            'payment_transfer',
            'payment_upi_transfer_fetch',
            'payment_validate_account',
            'payment_validate_vpa',
            'payment_validate_vpa_old',
            'payment_verify',
            'payment_verify_bulk',
            'payments_downtime',
            'fetch_payments_ongoing_downtimes',
            'fetch_payments_resolved_downtimes',
            'fetch_payments_scheduled_downtimes',
            'payments_downtime_by_id',
            'payments_multiple_authorize_refund',
            'payout_approve',
            'payout_approve_bulk',
            'payout_bulk_approve',
            'payout_bulk_create',
            'payout_cancel',
            'payout_create',
            'payout_validate',
            'payout_create_with_otp',
            'payout_create_2FA',
            'payout_send_2FA_otp',
            'undo_payout_creation',
            'resume_payout_creation',
            'payout_fetch_by_id',
            'payout_fetch_multiple',
            'payout_fetch_reversals',
            'payout_links_added_fund_accounts',
            'payout_links_added_fund_accounts_cors',
            'payout_links_admin_auth_api',
            'payout_links_batch_summary',
            'payout_links_cancel',
            'payout_links_create',
            'payout_links_reject',
            'payout_links_approve',
            'payout_links_approve_otp',
            'payout_links_bulk_approve',
            'payout_links_bulk_reject',
            'payout_links_bulk_approve_otp',
            'payout_links_update',
            'payout_links_customer_hosted_page',
            'payout_links_fetch_by_id',
            'payout_links_fetch_multiple',
            'payout_links_generate_end_user_otp',
            'payout_links_generate_end_user_otp_cors',
            'payout_links_initiate',
            'payout_links_initiate_cors',
            'payout_links_merchant_on_boarding_status',
            'payout_links_merchant_settings_get',
            'payout_links_merchant_settings_post',
            'payout_links_merchant_summary',
            'payout_links_resend_notification',
            'payout_links_settings_get',
            'payout_links_settings_post',
            'payout_links_status',
            'payout_links_status_cors',
            'payout_links_verify_customer_otp',
            'payout_links_verify_customer_otp_cors',
            'payout_purpose_get',
            'payout_purpose_post',
            'payout_reject',
            'payout_reject_admin_bulk',
            'payout_reject_bulk',
            'payout_retry',
            'payout_update_pull_payout_status',
            'payout_links_bulk_resend_notification_admin',
            'payout_update_status',
            'payout_wf_config_migrate',
            'payout_workflow_retry_admin_bulk',
            'payouts_bulk_amount_type',
            'payouts_bulk_amount_type_update',
            'payouts_bulk_sample_file',
            'payouts_scheduled_time_slots',
            'payouts_summary',
            'payouts_workflow_summary',
            'payouts_workflow_config_get',
            'permission_create',
            'permission_delete',
            'permission_edit',
            'permission_get',
            'permission_get_by_type',
            'permission_get_multiple',
            'permission_get_roles',
            'pg_onboard_merchant',
            'pg_offboard_merchant',
            'pg_sync_balances_merchant',
            'pincode_get',
            'plan_create',
            'plan_fetch',
            'plan_fetch_multiple',
            'pricing_add_plan_rule',
            'buy_pricing_add_plan_rule',
            'pricing_add_plan_rule_bulk',
            'buy_pricing_add_plan_rule_bulk',
            'pricing_create_plan',
            'buy_pricing_create_plan',
            'pricing_delete_plan_rule',
            'pricing_delete_plan_rule_force',
            'buy_pricing_delete_plan_rule_force',
            'pricing_get_gateway_plans',
            'pricing_get_merchant_plans',
            'buy_pricing_get_terminal_plans',
            'pricing_get_plan',
            'buy_pricing_get_plan',
            'pricing_get_plans',
            'pricing_supported_networks',
            'pricing_update_plan_rule',
            'buy_pricing_update_plan_rule',
            'process_pending_bank_transfer',
            'promotion_create',
            'promotion_create_for_event',
            'promotion_deactivate',
            'promotion_update',
            'proxy_merchant_create_support_details',
            'proxy_merchant_edit_support_details',
            'proxy_merchant_get_pricing',
            'proxy_merchant_get_support_details',
            'proxy_merchant_get_terminals',
            'terminals_proxy_gateway_terminal_status',
            'qr_code_download_live',
            'qr_code_download_test',
            'qr_code_create',
            'qr_code_close',
            'qr_code_fetch',
            'qr_code_fetch_multiple',
            'qr_payments_fetch_multiple',
            'qr_payment_fetch_for_qr_code',
            'razorflow_post_slash_command',
            'razorflow_post_slash_command_custom_endpoint',
            'razorx_dummy',
            'razorx_route',
            'read_merchant_options',
            'read_merchant_options_admin',
            'read_options_by_id',
            'read_options_by_ref_id',
            'recon_fetch_batchs_files_multiple',
            'recon_fetch_files_count',
            'reconciliate',
            'reconciliate_via_batch_service',
            'refund_cancel_batch',
            'refund_create',
            'refund_edit',
            'refund_edit_status',
            'refund_fetch_by_id',
            'refund_fetch_creation_data',
            'refund_fetch_fee',
            'refund_fetch_for_customer',
            'refund_fetch_multiple',
            'refund_generate_excel',
            'refund_mark_processed_bulk',
            'refund_reference1_bulk_update',
            'refund_retry_bulk_via_fta',
            'refund_set_unprocessed_config',
            'refund_verify',
            'refund_verify_bulk',
            'refund_verify_failed',
            'refund_verify_failed_bulk',
            'refund_verify_multiple',
            'refund_without_verify_bulk',
            'refunds_fetch_for_customer',
            'recon_service_request_proxy',
            'recon_service_file_upload_proxy',
            'recon_service_workflow_file_upload_proxy',
            'recon_service_admin_request_proxy',
            'downtime_manager_admin',
            'reminder_admin',
            'reminder_next_run',
            'reminder_service',
            'reporting_config_components_get_by_type',
            'reporting_config_create',
            'reporting_config_create_admin',
            'reporting_config_create_full',
            'reporting_config_delete',
            'reporting_config_delete_admin',
            'reporting_config_edit',
            'reporting_config_edit_admin',
            'reporting_config_edit_full',
            'reporting_config_edit_bulk',
            'reporting_config_get',
            'reporting_config_get_admin',
            'reporting_config_list',
            'reporting_config_list_admin',
            'reporting_config_options',
            'reporting_config_types_fetch',
            'reporting_consumer_restrictions',
            'reporting_log_create',
            'reporting_log_create_admin',
            'reporting_log_get',
            'reporting_log_get_admin',
            'reporting_log_list',
            'reporting_log_list_admin',
            'reporting_log_update',
            'reporting_schedule_create',
            'reporting_schedule_delete',
            'reporting_schedule_get',
            'reporting_schedule_update',
            'reporting_schedule_list',
            'reports_fetch_multiple',
            'reports_generate',
            'reports_monthly_banking_invoice',
            'reports_monthly_banking_invoice_admin',
            'reports_monthly_invoice',
            'reports_order_rpp',
            'reports_public_entity',
            'reports_public_entity_file',
            'reports_refund_irctc',
            'reports_transaction_broking',
            'reports_transaction_dsp',
            'reversal_fetch',
            'reversal_fetch_la',
            'reversal_fetch_multiple',
            'reversal_fetch_multiple_la',
            'reward_activate_or_deactivate',
            'reward_create',
            'reward_delete',
            'reward_fetch',
            'reward_terms',
            'reward_metrics',
            'reward_update',
            'role_add_permissions',
            'role_create',
            'role_delete',
            'role_edit',
            'role_get',
            'role_get_multiple',
            'salesforce_event',
            'salesforce_opportunity_details',
            'schedule_assign',
            'schedule_create',
            'schedule_delete',
            'schedule_fetch',
            'schedule_fetch_multiple',
            'schedule_update',
            'schedule_update_next_run',
            'scrooge_dashboard_init',
            'scrooge_expire_instant_refund_mode_config',
            'scrooge_expire_merchant_mode_config',
            'scrooge_fetch_instant_refund_mode_config',
            'scrooge_fetch_merchant_mode_configs',
            'scrooge_processed_refunds_state_change',
            'scrooge_refunds_to_failed_state',
            'scrooge_refresh_fta_modes_cache',
            'scrooge_refund_create',
            'scrooge_refund_create_bulk',
            'scrooge_refunds_bulk_reference1_update',
            'scrooge_refunds_download',
            'scrooge_refunds_download_gateway_file',
            'scrooge_refunds_download_gateway_report',
            'scrooge_refunds_enqueue',
            'scrooge_refunds_get',
            'scrooge_refunds_get_multiple',
            'scrooge_refunds_retry_custom_fund_transfers',
            'scrooge_refunds_retry_source_fund_transfers',
            'scrooge_refunds_retry_with_attempt_appended_id',
            'scrooge_refunds_retry_with_verify',
            'scrooge_refunds_retry_without_verify',
            'scrooge_refunds_update',
            'scrooge_refunds_update_multiple',
            'scrooge_refunds_bulk_verify',
            'scrooge_reports_get_multiple',
            'scrooge_set_instant_refund_mode_config',
            'scrooge_set_merchant_mode_config',
            'send_email_for_pl_service',
            'send_newsletter',
            'send_test_newsletter',
            'send_test_sms',
            'set_channel_action',
            'set_config_keys',
            'set_gateway_downtime_conf',
            'set_redis_keys',
            'setl_admin_fetch',
            'setl_admin_fetch_multiple',
            'setl_entity_download_file',
            'setl_amount',
            'setl_bank_account_create',
            'setl_bank_account_delete',
            'setl_bank_account_get',
            'setl_bank_account_update',
            'setl_channel_state_get',
            'setl_channel_status_update',
            'setl_combined_recon',
            'setl_combined_report',
            'setl_execution_register',
            'setl_set_dcs_object',
            'setl_execution_resume',
            'setl_bulk_reminder_registration',
            'setl_bulk_reminder_es_registration',
            'setl_trigger_es_multiple',
            'setl_fetch_by_id',
            'setl_fetch_multiple',
            'setl_fetch_schedule',
            'setl_fetch_source_details',
            'setl_fetch_transactions',
            'setl_get_details',
            'setl_get_scheduleableEntities',
            'setl_holidays',
            'setl_amount_check',
            'setl_initiate_action',
            'setl_update_bene_name',
            'setl_merchant_config_create',
            'setl_merchant_config_get',
            'setl_org_config_create_or_update',
            'setl_org_config_get',
            'setl_merchant_config_update',
            'setl_merchant_config_bulk_update',
            'setl_migrate_payout',
            'setl_transfer_status_update',
            'setl_ondemand_fund_accounts',
            'setl_ondemand_pricing',
            'settlement_ondemand_enqueue',
            'setl_ondemand_transfer_processed',
            'setl_ondemand_transfer_trigger',
            'setl_ondemand_transfer_payout_update',
            'setl_process_data',
            'setl_process_data_reset',
            'setl_reconcile',
            'setl_replay_status_update',
            'setl_retry',
            'setl_retry_new_service',
            'setl_initiate_new_service',
            'setl_schedule_create',
            'setl_schedule_get',
            'setl_schedule_get_ids',
            'setl_schedule_rename',
            'setl_sms_notification_status',
            'setl_sms_notification_toggle',
            'setl_transaction_hold',
            'setl_transaction_release',
            'setl_trigger_multiple',
            'setl_trigger_report',
            'setl_update_channel_bulk',
            'setl_service_migration_admin',
            'setl_transaction_replay_admin',
            'setl_ledger_inconsistency_debug_admin',
            'setl_nodal_initiate_transfer_admin',
            'settings_delete',
            'settings_fetch',
            'settings_fetch_defined',
            'settings_upsert',
            'settlement_ondemand_create',
            'settlement_ondemand_create_dashboard',
            'settlement_ondemand_feature_validate',
            'settlement_ondemand_blocked',
            'settlement_ondemand_fees',
            'settlement_ondemand_fees_dashboard',
            'settlement_ondemand_fetch',
            'settlement_ondemand_fetch_by_id',
            'settlement_ondemand_razorpayx_webhook',
            'shield_list_items_add_multiple',
            'shield_list_items_delete',
            'shield_list_items_get',
            'shield_list_items_get_multiple',
            'shield_list_items_purge',
            'shield_lists_create',
            'shield_lists_delete',
            'shield_lists_get',
            'shield_lists_get_multiple',
            'shield_rules_create',
            'shield_rules_delete',
            'shield_rules_get',
            'shield_rules_get_multiple',
            'shield_rules_update',
            'shield_settings_ui',
            'shield_risk_threshold_config_get_multiple',
            'shield_risk_threshold_config_get',
            'shield_risk_threshold_config_create',
            'shield_risk_threshold_config_update',
            'shield_risk_threshold_config_delete',
            'shield_merchant_risk_threshold_get_multiple',
            'shield_merchant_risk_threshold_get',
            'shield_merchant_risk_threshold_create',
            'shield_merchant_risk_threshold_update',
            'shield_merchant_risk_threshold_delete',
            'shield_merchant_risk_threshold_bulk_update',
            'sms_callback',
            'splitz_evaluate',
            'splitz_preflight',
            'splitz_preflight_bulk_evaluate',
            'splitz_route',
            'splitz_upload_segment_file',
            'stakeholder_create_v2',
            'stakeholder_fetch_all_v2',
            'stakeholder_fetch_v2',
            'stakeholder_update_v2',
            'submerchants_fetch',
            'submerchants_fetch_multiple',
            'submerchants_fetch_capital_applications',
            'subscription_button_create_subscription',
            'subscription_button_create_subscription_v2',
            'subscription_button_hosted_view',
            'subscription_cancel',
            'subscription_cancel_changes',
            'subscription_cancel_token',
            'subscription_charge_cycle',
            'subscription_create',
            'subscription_create_addon',
            'subscription_delete_offer',
            'subscription_fetch',
            'subscription_fetch_by_id',
            'subscription_fetch_changes',
            'subscription_fetch_due_addons',
            'subscription_fetch_hosted_live',
            'subscription_fetch_hosted_test',
            'subscription_fetch_multiple',
            'subscription_get_revenue_by_source',
            'subscription_item_create',
            'subscription_item_delete',
            'subscription_item_fetch',
            'subscription_item_fetch_multiple',
            'subscription_item_update',
            'subscription_manual_retry',
            'subscription_manual_retry_old',
            'subscription_offer_fetch_discount',
            'subscription_offer_fetch_usage',
            'subscription_offer_preference',
            'subscription_pause',
            'subscription_payment_fetch_by_id',
            'subscription_payment_process',
            'subscription_registration_auto_charge',
            'subscription_registration_cancel_link',
            'subscription_registration_cancel_links_batch',
            'subscription_registration_charge_token',
            'subscription_registration_charge_token_bulk',
            'subscription_registration_create_links',
            'subscription_registration_delete_token',
            'subscription_registration_fetch_link',
            'subscription_registration_fetch_link_internal',
            'subscription_registration_fetch_token',
            'subscription_registration_list_links',
            'subscription_registration_list_tokens',
            'subscription_registration_resend_link',
            'subscription_registration_resend_links_batch',
            'subscription_resume',
            'subscription_settings',
            'subscription_settings_get',
            'subscription_skip_cycle',
            'subscription_test_charge',
            'subscription_update',
            'subscription_update_data',
            'subscription_view_live',
            'subscription_view_live_post',
            'subscription_view_test',
            'subscription_view_test_post',
            'subscriptions_overview',
            'sub_virtual_account_create',
            'sub_virtual_account_list_admin',
            'sub_virtual_account_enable_disable',
            'sub_virtual_account_migrate',
            'survey_create',
            'survey_edit',
            'sync_pg_router_order_bulk',
            'tax_create',
            'tax_delete',
            'tax_get',
            'tax_get_meta_gst_taxes',
            'tax_get_meta_states',
            'tax_group_create',
            'tax_group_delete',
            'tax_group_get',
            'tax_group_list',
            'tax_group_update',
            'tax_list',
            'tax_payments_add_or_update_settings_auto',
            'tax_payments_add_or_update_settings',
            'tax_payments_admin_auth_api',
            'accounting_integrations_admin_routes',
            'invoice_admin_actions',
            'tax_payments_bulk_pay',
            'tax_payments_cancel',
            'tax_payments_challan_download',
            'tax_payments_challan_upload',
            'tax_payments_create',
            'tax_payments_edit',
            'tax_payments_get_all_settings',
            'tax_payments_get_by_id',
            'tax_payments_list',
            'tax_payments_mark_as_paid',
            'tax_payments_monthly_summary',
            'tax_payments_pay',
            'tax_payments_update_challan_file_id',
            'tax_payments_invalid_tan_status',
            'tax_payments_downtime_schedule',
            'tax_payments_downtime_schedules_list',
            'tax_payments_fetch_pending_gst',
            'tax_update',
            'templating_create_namespace',
            'templating_create_template_config',
            'templating_get_template_config',
            'templating_list_namespace',
            'templating_list_template_config',
            'templating_update_template_config',
            'templating_view_template_config',
            'templating_test_pre_processor',
            'templating_render_template',
            'templating_delete_template_config',
            'templating_assign_user_role',
            'templating_revoke_user_role',
            'terminal_add_merchant',
            'terminal_bank_bulk',
            'terminal_check_encrypted_value',
            'terminal_delete',
            'terminal_disable',
            'terminal_edit',
            'terminal_edit_god_mode',
            'terminal_fetch_editable_fields',
            'terminal_edit_external_org',
            'buy_pricing_assign_bulk',
            'terminal_enable',
            'terminal_fetch',
            'terminal_get_banks',
            'terminal_get_wallets',
            'terminal_set_wallets',
            'terminal_onboard',
            'terminal_onboard_callback',
            'terminal_reassign_merchant',
            'terminal_remove_merchant',
            'terminal_restore',
            'terminal_set_banks',
            'terminal_toggle',
            'terminal_update_bulk',
            'terminals_proxy_fetch_terminals_org',
            'terminals_proxy_create_gateway_credential',
            'terminals_proxy_delete_gateway_credential',
            'terminals_proxy_fetch_gateway_credential',
            'terminals_proxy_fetch_terminals_credentials',
            'terminals_universal_proxy',
            'execute_terminal_test_run',
            'fetch_terminal_test_run',
            'fetch_terminal_test_run_by_params',
            'create_terminal_test_instrument',
            'delete_terminal_test_instrument',
            'third_party_health_check',
            'throttle_create_config',
            'throttle_delete_config',
            'throttle_get_config',
            'throttle_migrate_redis',
            'toggle_transaction_hold',
            'toggle_transaction_release',
            'token_fetch_card',
            'token_fetch_vpa',
            'token_registration_token_associate',
            'token_registration_tokens_authenticate',
            'transaction_bulk_update',
            'transaction_create_fees_breakup',
            'transaction_statement_fetch',
            'transaction_statement_fetch_multiple',
            'transaction_statement_fetch_multiple_for_banking',
            'transfer_create',
            'transfer_create_reversal',
            'transfer_debug',
            'transfer_edit',
            'transfer_fetch',
            'transfer_fetch_la',
            'transfer_fetch_multiple',
            'transfer_fetch_multiple_la',
            'transfer_fetch_payment_la',
            'transfer_fetch_reversals',
            'transfer_fetch_reversals_la',
            'transparent_redirect_get',
            'transparent_redirect_post',
            'update_trusted_badge_status',
            'tokenisation_local_cards_bulk',
            'ufh_admin_upload_file',
            'ufh_get_file_signed_url',
            'ufh_get_file_signed_url_admin',
            'ufh_get_file_signed_url_by_mid',
            'ufh_upload_file',
            'unclaimed_merchant_poc_update',
            'update_config_key',
            'update_free_payouts_attributes',
            'create_sub_balances',
            'sub_balance_adjustment',
            'update_fund_loading_downtime_by_id',
            'update_late_auth_config_admin_bulk',
            'update_low_balance_config_admin',
            'update_merchant_notification_config',
            'update_merchant_notification_config_admin',
            'update_merchant_options',
            'update_merchant_options_admin',
            'update_merchant_sla_for_on_hold_payouts',
            'update_partner_intent',
            'update_partner_type',
            'fetch_partner_first_user_experience',
            'update_payment_config',
            'update_payment_config_admin',
            'update_payout_downtime_by_id',
            'update_payout_status',
            'update_wait_timeout',
            'upi_fill_bank',
            'upi_get_bank_list',
            'upi_get_key_list',
            'upi_npci_request',
            'upi_psp_allow',
            'upi_psp_disallow',
            'upi_read_async',
            'upi_transfer_process',
            'upi_transfer_process_test',
            'upi_zero_call',
            'upi_onboarded_terminal_edit_bulk',
            'user_2fa_change_setting',
            'user_access',
            'user_account_lock_unlock_admin',
            'user_account_unlock',
            'user_change_password',
            'user_check_has_set_password',
            'user_set_password',
            'user_confirm',
            'user_confirm_by_data',
            'user_create',
            'user_delete_incorrect_password_count',
            'user_device_detail_save',
            'user_edit_self',
            'user_fetch',
            'user_fetch_admin',
            'user_fetch_for_merchant',
            'user_login_2fa_setup_mobile',
            'user_merchant_mapping_action',
            'user_merchant_upgrade',
            'user_opt_in_status_whatsapp',
            'user_opt_in_whatsapp',
            'user_opt_out_whatsapp',
            'toggle_whatsapp_notifications',
            'user_otp_create',
            'user_resend_otp_2fa',
            'user_resend_verification',
            'user_resend_verification_otp',
            'user_roles_mapping_bulk',
            'user_trigger_2fa_otp',
            'user_update_contact',
            'user_update_contact_admin',
            'user_update_contact_merchant',
            'user_verify_contact',
            'user_verify_email',
            'user_verify_second_factor_auth',
            'user_verify_through_mode',
            'user_contact_update_sent_otp',
            'user_verify_and_update_mobile_otp' ,
            'user_add_email',
            'user_add_email_verify',
            'user_otp_login_2fa_password',
            'validate_checkout_offers',
            'vault_token_create',
            'vault_token_renewal',
            'vendor_payment_bulk_cancel',
            'vendor_payment_bulk_invoice_download',
            'vendor_payment_cancel',
            'vendor_payment_contact_create',
            'vendor_payment_contact_get',
            'vendor_payment_contact_list',
            'vendor_payment_contact_update',
            'vendor_payment_create',
            'vendor_payments_check_existing_invoice',
            'vendor_payment_edit',
            'vendor_payment_execute',
            'vendor_payment_execute_2fa',
            'vendor_settlement_execute_single',
            'vendor_settlement_execute_multiple',
            'vendor_settlement_mark_as_paid',
            'vendor_settlement_fund_accounts',
            'vendor_settlement_vendor_balance',
            'vendor_payment_execute_bulk',
            'vendor_payment_get_by_id',
            'vendor_payment_get_invoice_zip_file',
            'vendor_payment_get_ocr_data',
            'vendor_payment_get_tds_categories',
            'vendor_payment_invoice_get_signed_url',
            'vendor_payment_invoice_upload',
            'vendor_payment_create_file_upload',
            'vendor_payment_get_file_upload',
            'vendor_payment_delete_file_upload',
            'vendor_payment_add_or_update_settings',
            'vendor_payment_get_settings',
            'vendor_payment_get_latest_approvers',
            'vendor_payment_get_timeline_view',
            'vendor_payment_list',
            'vendor_payment_mark_as_paid',
            'vendor_payment_reporting_info',
            'vendor_payment_summary',
            'vendor_payment_update_invoice_file_id',
            'vendor_payment_get_quick_filter_amounts',
            'virtual_account_add_receivers',
            'virtual_account_add_allowed_payer',
            'virtual_account_delete_allowed_payer',
            'virtual_account_banking_fetch_multiple',
            'virtual_account_bulk_close_for_banking',
            'virtual_account_bulk_create_for_banking',
            'virtual_account_close',
            'virtual_account_configs',
            'virtual_account_create',
            'virtual_account_create_for_banking',
            'virtual_account_create_for_internal',
            'virtual_account_debug',
            'virtual_account_edit',
            'virtual_account_expiry_setting_get',
            'virtual_account_expiry_setting_upsert',
            'admin_va_expiry_setting_upsert',
            'admin_va_setting_get',
            'virtual_account_fetch',
            'virtual_account_fetch_multiple',
            'virtual_account_fetch_payments',
            'virtual_account_order_create',
            'virtual_account_validate_vpa',
            'virtual_account_validate_vpa_test',
            'virtual_accounts_close_bulk',
            'virtual_account_number_setting_upsert',
            'virtual_vpa_prefix_save',
            'virtual_vpa_prefix_validate',
            'wallet_service',
            'wallet_service_admin',
            'webhook_analytics',
            'webhook_create',
            'webhook_delete',
            'webhook_edit',
            'webhook_fetch',
            'webhook_fetch_events',
            'webhook_fetch_multiple',
            'webhook_list_events',
            'sms_set_ratelimit_threshold',
            'sms_delete_ratelimit_threshold',
            'suppression_list_remove',
            'webhook_fire',
            'wfs_config_create',
            'wfs_config_get_admin',
            'wfs_config_update',
            'workflow_action_close',
            'workflow_action_details',
            'workflow_action_get_multiple',
            'workflow_action_update',
            'workflow_create',
            'workflow_delete',
            'workflow_get',
            'workflow_get_multiple',
            'workflow_merchants_create_payout_get',
            'workflow_observer_data_fetch',
            'workflow_observer_data_update',
            'workflow_payout_amount_rules',
            'workflow_payout_amount_rules_create',
            'workflow_payout_amount_rules_edit',
            'workflow_payout_amount_rules_get_admin',
            'admin_fetch_role_map',
            'workflow_update',
            'gateway_file_bank_refunds_upload',

            // ledger service
            'create_ledger_account',
            'create_ledger_accounts_on_event',
            'create_ledger_accounts_in_bulk',
            'activate_ledger_account',
            'deactivate_ledger_account',
            'archive_ledger_account',
            'update_ledger_account',
            'update_ledger_account_detail',
            'create_ledger_journal',
            'fetch_journal_by_transactor',
            'update_account_by_entities_and_mid',
            'fetch_accounts_by_entities_and_merchant_id',
            'create_ledger_ledger_config',
            'update_ledger_ledger_config',
            'delete_ledger_ledger_config',
            'request_governor',
            'fetch_ledger',
            'fetch_multiple_ledger',
            'fetch_filter_ledger',
            'fetch_account_form_field_options_ledger',
            'fetch_journal_form_field_options_ledger',
            'replay_journal_rejected_events_ledger',
            'fetch_ledger_config_form_field_options_ledger',
            'fetch_account_types_ledger',
            'delete_merchants_ledger',

            'merchant_risk_data',
            'oauth_application_update_admin',

            'product_tnc_map_create',
            'product_tnc_map_fetch',
            'product_tnc_map_fetch_all',
            'product_tnc_map_update',

            'complete_submerchant_onboarding',

            'merchant_international_enablement_preview',
            'merchant_international_visibility_info',
            'merchant_international_enablement_get',
            'merchant_international_enablement_draft',
            'merchant_international_enablement_submit',
            'merchant_international_enablement_discard',

            // Merchant Fraud
            'bulk_fraud_notify',

            'max_payment_limit_update',
            'execute_max_payment_limit_workflow',

            //Purpose Code
            'purpose_code_fetch',
            'merchant_patch_purpose_code',
            'user_fetch_purpose_code',
            'purpose_code_admin',
            'admin_patch_purpose_code',

            // HS code
            'hs_code_fetch',
            'merchant_patch_hs_code',
            'fetch_hs_code',
            'hs_code_admin_fetch',
            'admin_patch_hs_code',
            'fetch_admin_hs_code',
            // metro
            'metro_project_create',
            'metro_project_credentials_create',
            'metro_project_topic_update',

            // Merchant Risk Notes
            'merchant_risk_notes_get',
            'merchant_risk_notes_create',
            'merchant_risk_notes_delete',

            // Risk Audit Workflow Actions
            'w-actions_merchant_risk_audit_get',

            'banking_axis_invitations_send',
            'draft_invitation_fetch',
            'draft_invitation_accept',
            'decrypt_merchant_website_comment',
            'bulk_regenerate_api_keys',


            'risk_attributes_get',

            'create_risk_action',
            'merchant_workflow_clarification',

            'firs_document_fetch',
            'firs_document_download',
            'country_fetch',
            'state_fetch',

            'raw_address_failed_file',

            // Payment Fraud
            'get_fraud_attributes',
            'save_payment_fraud',

            //relay routes
            'relay_get_apps',
            'relay_get_app_by_id',
            'relay_create_app',
            'relay_update_apps',
            'relay_delete_apps',
            'relay_get_props',
            'relay_create_props',
            'relay_delete_props',
            'relay_update_props',
            'relay_get_pending_props',
            'relay_get_props_history',
            'relay_props_action',
            'relay_create_bulk_props',

            'developer_console_admin_action',

            // Growth Assets
            'growth_get_asset_details',
            'growth_get_template_by_id',
            // Growth pricing routes
            'growth_create_pricing_subscription',
            'growth_get_pricing_subscription_by_mid',
            'growth_check_pricing_subscription',

            // BVS admin dashboard proxy routes
            'bvs_admin_proxy',
            'bvs_admin_proxy_pii',
            'admin_bulk_assign_role',

            // OCR admin dashboard proxy routes
            'ocr_admin_proxy',

            'banking_account_statement_fetch_missing',
            'banking_account_statement_update_missing',
            'banking_account_statement_detect_missing',

            //CAC
            'cac_privileges_fetch',
            'cac_role_fetch_all',
            'admin_fetch_role_map',
            'view_cac_role',
            'cac_role_fetch_role_map',
            //'delete_cac_role',
            'create_cac_role',
            'edit_cac_role',

            // Self serve workflow admin routes
            'workflow_config_create_admin',
            'workflow_config_update_admin',
            'workflow_config_delete_admin',
            'workflow_config_create_bulk_admin',

            '1cc_configs_update',
            '1cc_configs_get',
            '1cc_rto_mlmodel_configs_create_admin',
            '1cc_rto_mlmodel_configs_get_admin',
            '1cc_rto_mlmodel_configs_update_admin',
            '1cc_rto_merchant_model_configs_get_admin',
            '1cc_rto_merchant_model_configs_update_admin',
            '1cc_rto_merchant_model_configs_delete_admin',
            '1cc_rto_merchant_mlmodel_update_admin',
            '1cc_shopify_fetch_meta_fields',
            '1cc_shopify_update_meta_fields',
            '1cc_shopify_fetch_themes',
            '1cc_shopify_insert_theme',
            '1cc_shopify_render_magic_snippet',
            'admin_1cc_whitelist_coupons',
            '1cc_fetch_dashboard_analytics',
            // shipping and cod engine config APIs
            '1cc_create_item_category',
            '1cc_update_item_category',
            '1cc_fetch_item_category',
            '1cc_filter_item_category',
            '1cc_delete_item_category',
            '1cc_config_item_category',
            '1cc_item_category_search_product',
            '1cc_fee_rule_associations',
            '1cc_create_fee_rules',
            '1cc_create_fee_rule',
            '1cc_fetch_fee_rule',
            '1cc_filter_fee_rule',
            '1cc_delete_fee_rule',
            '1cc_create_zone',
            '1cc_update_zone',
            '1cc_add_locations',
            '1cc_remove_locations',
            '1cc_fetch_zone',
            '1cc_filter_zone',
            '1cc_delete_zone',
            '1cc_fetch_all_countries_with_zone',
            '1cc_cod_engine_config_summary',
            '1cc_clear_fee_rule',

            // Terminal downtimes
            'manual_downtime_fetch',
            'downtime_manual_resolve',

            'submerchant_partner_feature_check'
        ],

        //
        // frontend_graphql app is being whitelisted for all routes, since it currently acts
        // similar to dashboard backend. This will change soon, follow details in this link:
        // https://razorpay.slack.com/archives/C6QPQKVLZ/p1616487712140000
        //
        'frontend_graphql' => [
            '*'
        ],

        'salesforce' => [
            'fd_create_ticket',
            'fd_fetch_tickets',

            'banking_account_create_salesforce',
            'banking_account_get_salesforce',
            'bas_internal_salesforce',
        ],

        'salesforce_converge' => [
            'salesforce_converge_get_merchant_details',
            'salesforce_converge_get_terminal_details'
        ],

        'mock_gateways' => [
            'mock_hdfc_enroll',
            'mock_hdfc_auth_enrolled',
            'mock_hdfc_payment',
        ],
        'barricade' => [
            'barricade_payment_verify',
        ],

        // These routes will be hit from the dashboard.
        // We create a new app because these routes when hit
        // won't have any merchant or admin in context.
        'dashboard_guest' => [
            'm2m_referral_link_get_public',
            'user_login',
            'user_mobile_oauth_refresh_token',
            'user_otp_login',
            'user_salesforce_event',
            'verify_user_otp_login',
            'send_verification_otp',
            'verify_verification_otp',
            'user_login_2fa_setup_mobile',
            'user_patch_password',
            'user_login_2fa_setup_verify_mobile',
            'user_register',
            'user_otp_register',
            'verify_user_otp_register',
            'send_salesforce_user_otp',
            'verify_salesforce_user_otp',
            'user_oauth_login',
            'user_oauth_register',
            'user_verify_second_factor_auth',
            'user_otp_login_2fa_password',
            'user_resend_otp_2fa',
            'razorx_guest',
            'org_get_by_hostname',
            'user_reset_password_create',
            'user_merchant_upgrade',
            'user_change_password',
            'user_access',
            'user_fetch',
            'invitation_action',
            'invitation_fetch_by_token',
            'user_resend_verification',
            'user_reset_password_token',
            'merchant_edit_email_create_user',
            // Called during signup flow
            'admin_authentication',
            'admin_verify_second_factor_auth',
            'admin_resend_otp_2fa',
            'admin_lead_verify',
            'merchant_invitation_verify',
            'admin_forgot_password',
            'admin_reset_password',
            'user_confirm_by_data',
            'guest_pincode_get',
            'partner_config_fetch_guest'
        ],

        'dashboard_internal' => [
            'admin_oauth_authenticate',
        ],

        'payout_links' => [
            'contact_types_get_internal',
            'contact_get_internal',
            'contact_create_internal',
            'fund_account_create_internal',
            'fund_account_get_internal',
            'fund_account_list_internal',
            'payout_create_internal',
            'payout_create_2FA_internal',
            'payout_fetch_multiple_internal',
            'payout_fetch_by_id_internal',
            'merchant_fetch_internal',
            'payout_links_send_email',
            'payout_links_send_demo_email',
            'user_fetch',
            'user_fetch_internal',
            'payout_purpose_validate_internal',
            'banking_accounts_list_internal',
            'app_merchant_mapping_create',
            'app_merchant_mapping_update',
            'payout_bulk_update_attachments',
        ],

        'express' => [
            'payment_authorize_google_pay_cards',
            'payment_verify_google_pay_cards',
            'merchant_secret',
            'webhook_fetch',
            'webhook_fetch_multiple',
            'payment_meta_search',
            'payment_authorize_post',
            'payment_get_authenticate_url',
            'payment_get_authenticate_url',
            'payment_get_authentication_entity',
            'payment_get_authorization_entity',
            'dispute_fetch',
            'payment_create_pos',
            'dispute_reason_fetch_internal',
            'payment_meta_fetch_by_payment_id_action',
            'payment_fetch_by_id_internal',
            'order_fetch_by_id_internal',
            'internal_payment_authorize_refund',
        ],

        'cron' => [
            'banking_org_merchant_onboarding_escalations',
            'payments_rearch_backfill',
            'dcc_invoice_generation_cron',
            'payments_api_backfill',
            'fpx_downtime_detection_cron',
            'payment_page_cds_billing_update_cron',
            'merchant_popular_products_cron',
            'capture_cron_for_b2b_payments',
            'settlement_cron_for_b2b_payments',
            'merchant_onboarding_crons',
            'merchant_risk_crons',
            'banking_account_statement_insert_missing_cron',
            'banking_account_statement_fetch_missing_cron',
            'banking_account_statement_automate_recon_cron',
            'banking_account_statement_async_insert_missing_cron',
            'banking_account_statement_detect_missing_cron',

            // Fund Management Payouts
            'ca_check_fund_management_payout_cron',

            'create_test_payouts_for_downtime_detection_icici',
            'create_test_payouts_for_downtime_detection_yesb',
            'check_status_of_test_payouts',
            'add_balance_to_source_for_test_payouts',
            'internal_transactions_cron',
            'payments_notify_cron',
            'merchant_settlements_events_cron',
            'coupon_expiry_alert',
            'fd_consume_webhook',
            // Not actually a cron, but added in this list
            // so the cron app has access to the route.
            'gstin_e_invoice_cron',
            'merchant_bulk_update_pricing_cron',
            // crons for autoKYC'd merchants who have not been verified manually yet
            'merchant_autokyc_soft_limit',
            'merchant_autokyc_hard_limit',
            'merchant_autokyc_escalation',
            'partner_send_weekly_activation_summary_emails',

            //cron route for sending daily transacted submerchant events
            'partner_send_daily_transacted_submerchant_events',

            // cron for generating merchant report
            'merchant_report',

            //Cron to push pending payouts notification to slack app : X
            'payout_notification_to_slack_app',

            //Cron to push events for partners with pending commission balance and Incomplete KYC
            'partner_commission_pending',

            //Cron for sending communication to partners with pending Invoice approvals
            'commissions_invoice_reminder',

            'merchant_onboarding_escalations',
            'merchant_onboarding_cron_jobs',
            'xpress_onboarding_escalations',
            'merchant_card_networks_onboarding_bulk',
            'setcronjob_webhook',
            // The rest are crons
            'entity_tax_update',
            'setl_ledger_inconsistency_debug_cron',
            'setl_initiate',
            'setl_bucket_backfill',
            'setl_bucket_delete',
            'setl_initiate_daily',
            'setl_reconcile_generate',
            'setl_reconcile_test',
            'setl_reconcile_pull',
            'setl_transaction_replay',
            'settlement_ondemand_process',
            'settlement_ondemand_full_enable',
            'settlement_ondemand_restricted_enable',
            'early_settlement_feature_period_disable',
            'settlement_ondemand_partial_scheduled',
            'feature_migration_dcs_scheduled',
            'nodal_initiate_transfer',
            'payment_timeout',
            'payment_auth_timeout',
            'scorecard',
            'banking_scorecard',
            'fix_merchant_data_cron',
            'merchant_daily_report',
            'merchant_post_beneficiary_file',
            'merchant_notify_holiday',
            'payment_auto_capture',
            'payment_capture_gateway_multiple',
            'payment_verify_all',
            'payment_new_verify_all',
            'payment_new_verify_bulk',
            'payment_verify_multiple',
            'payment_verify_captured',
            'payment_capture_verify',
            'refund_generate_excel',
            'payment_refund_authorized',
            'payments_dual_write_sync',
            'create_ledger_journal_cron',
            'payment_capture_reminder',
            'emi_generate_excel',
            'setl_post_details_old',
            'invoice_send_notifications',
            'card_update_saved',
            'invoice_expire_bulk',
            'invoice_delete_bulk',
            'payment_page_expire_cron',
            'batch_process_file',
            'order_refund_multiple_authorized',
            'subscriptions_charge_invoices',
            'subscriptions_retry',
            'subscriptions_expire',
            'subscription_cancel_due',
            'currency_update_rates',
            'currency_update_rates_multiple',
            'merchant_activation_migrate',
            'schedule_migration',
            'offer_deactivate',
            'merchant_patch_beneficiary_code',
            'payment_update_on_hold',
            'bank_transfer_refund_retry',
            'reports_transaction_dsp',
            'schedule_process_tasks',
            'merchant_create_invoice_entities',
            'merchant_invoice_entities_verify',
            'merchant_payout',
            'gateway_file_create',
            'generate_gifu_file',
            'generate_nium_settlement_file',
            'merchant_invoice_reminder',
            'process_on_hold_transactions_for_import',
            'generate_settlement_file_opgsp_import',
            'send_opgsp_import_invoices',
            'reports_refund_irctc',
            'merchant_payout_mail',
            'geoip_update',
            'fund_transfer_attempt_reconcile',
            'fund_transfer_attempt_recon_report',
            'admin_lock_old_accounts',
            'fund_transfer_attempt_process',
            'daily_reconciliation_summary_fetch',
            'hourly_reconciliation_summary_fetch',
            'bank_transfer_payment_receiver_backfill',
            'refund_processed_at_backfill',
            'admin_mdr_update',
            'merchant_post_beneficiary_api',
            'setl_verify',
            'billdesk_reconcile_cancelled',
            'merchant_es_sync_cron',
            'entity_balance_id_update',
            'scrooge_refund_verify_bulk',
            'payouts_process_queued',
            'payouts_process_queued_new',
            'payout_service_data_migration',
            'ps_data_migration_redis_clean_up',
            'payouts_process_on_hold',
            'payouts_process_on_hold_partner_bank',
            'payouts_auto_cancel_on_expiry',
            'payouts_create_failure_processing_cron',
            'payouts_update_failure_processing_cron',
            'card_settlement_generate_file',
            'payouts_process_batch',
            'payouts_process_scheduled',
            'payout_service_process_scheduled_payout',
            'migration_multi_va_on_x',
            'payments_downtime_trigger_cron',
            'payment_card_vault_migrate',
            'virtual_account_close_cron',
            'virtual_accounts_close_inactive_cron',
            'gateway_downtime_detection_purge_keys',
            'downtime_detection_cron',
            'phonepe_downtime_detection_cron',
            'subscription_registration_auto_charge',
            'token_pause_not_supported_card_tokens',
            'fund_transfer_attempts_process_fts',
            'cps_sync_gateway_entities_cron',
            'reconciliate',
            'mailing_list_remove_suspended_merchant',
            'order_transfer_process_pending',
            'order_transfer_process_pending_key_merchants',
            'order_transfer_process_failed',
            'payment_transfer_process_pending',
            'payment_transfer_process_pending_key_merchants',
            'transfer_settlement_status_update',
            'banking_account_statement_process_cron',
            'banking_account_statement_process_pool',
            'banking_account_send_notification_to_spoc_cron',
            'banking_account_statement_channel_fetch',
            'create_merchant_options_admin',
            'transaction_settled_data_fix',
            'commissions_invoice_generate',
            'banking_account_gateway_balance_fetch',
            'merchant_poc_update',
            'merchant_poc_update_with_time',
            'unclaimed_merchant_poc_update',
            'terminal_migrate_cron',
            'hitachi_terminal_currency_update_cron',
            'terminal_service_sync_delete',
            'retry_penny_testing_cron',
            'retry_store_legal_documents_cron',
            'payment_links_bulk_expire',
            'payment_links_es_cleanup',
            'fee_recovery_payout_process',
            'fts_bulk_attempts_initiate',
            'fts_bulk_beneficiary_initiate',
            'fts_one_off_db_migrate_cron',
            'fts_bulk_transfer_publish',
            'fts_account_balance_alert',
            'tokens_upi_vpa_bulk_cron',
            'low_balance_config_alert_cron',
            'payouts_intermediate_transactions_cron_update',
            'terminals_proxy_delete_submerchant',
            'terminals_proxy_create_submerchant',
            'terminals_proxy_update_recurring',
            'cps_backfill_entities',
            'vault_token_renewal',
            'tax_payments_payout_cron',
            'tax_payments_payout_cancel_cron',
            'tax_payments_mail_cron',
            'accounting_integration_bank_statement_fetch_trigger_cron',
            'accounting_integration_zoho_bank_statement_sync_cron',
            'vendor_payment_ocr_accuracy_cron',
            'mpans_tokenize_existing',
            'terminal_mpans_tokenize_existing',
            'qr_code_mpans_tokenize_existing',
            'setl_service_migration',
            'setl_service_blocked_migration',
            'setl_entity_alerts',
            'vendor_payment_upcoming_mail_cron',
            'payout_links_expire_cron',
            'tax_payments_add_penalty_cron',
            'bulk_create_fund_accounts',
            'add_ondemand_pricing_if_absent',
            'gateway_downtimes_archive',
            'banking_accounts_auditor_daily_updates',
            'gateway_payment_upi_data_cron',
            'dispute_merchant_emails_initiate',
            'dispute_refund_initiate',
            'dispute_initiate_risk_assessment',
            'reward_expire_cron',
            'trusted_badge_eligibility_cron',
            'tokenisation_local_cards',
            'tokenisation_local_cards_recurring',
            'tokenisation_global_cards',
            'tokenisation_global_customer_local_cards',
            'nps_survey_process_scheduled',
            'freshchat_extract_report_cron',
            'freshchat_retrieve_report_cron',
            'loc_cron',
            'los_cron',
            'care_service_cron_proxy',
            'cmma_service_cron_proxy',
            'p2p_retrieve_banks_cron',
            'health_checker_periodic_cron',
            'health_checker_milestone_cron',
            'health_checker_risk_score_cron',
            'health_checker_retry_cron',
            'health_checker_reminder_cron',
            'fraud_checker_milestone_cron',
            'payment_analytics_partition_cron',
            'checkout_orders_partition_cron',
            'payout_outbox_partition_cron',
            'audit_info_partition_cron',
            'fees_breakup_partition_cron',
            'orphan_payouts_count_cron',
            'banking_account_service_cron_routes',
            'merchant_methods_hdfc_debit_emi',
            'affordability_methods_migration',
            'merchant_action_notification_cron',
            'merchant_risk_identify_blacklist_country_alerts',
            'payout_send_pending_approval_email',
            'payout_send_pending_approval_reminder',
            'payouts_pending_push_notification_cron',
            'terminal_fill_enabled_wallets',
            'refresh_payments_ongoing_downtimes_cron',
            'refresh_payments_resolved_downtimes_cron',
            'refresh_payments_scheduled_downtimes_cron',
            'push_to_datalake',
            'rbl_in_progress_lead_to_sales_force',
            // Optimizer settlements cron
            'setl_optimizer_settlement_cron',
            'dispute_deduction_reversal_cron',

            'bank_transfer_process_test_x_demo_cron',
            'payouts_batch_create_x_demo_cron',
            'growth_filter_and_sync_cron',
            'growth_slack_csv_cron',
            'payments_card_es_sync_cron',
            'initiate_payouts_consistency_check',
            'developer_console_maintenance',
            'firs_collect_and_zip_cron',

            'payouts_service_redis_key_set',
            'payout_service_idempotency_key_feature_remove',
            'ledger_outbox_retry',
            'downtime_auto_resolve_cron',
            'ledger_outbox_partition_cron',
            'token_hq_cron',

            'b2b_send_notification',

            //Order Outbox
            'order_outbox_retry',
            'order_outbox_partition_cron',
        ],

        'subscriptions' => [
            'payment_fetch_by_id',
            'payment_fetch_multiple',
            'invoice_create',
            'invoice_fetch',
            'invoice_fetch_multiple',
            'invoice_get_count',
            'customer_fetch_by_id',
            'payment_create_subscriptions',
            'payment_capture',
            'payment_refund',
            'webhook_fire',
            'merchant_fetch_config_internal',
            'subscription_manual_retry',
            'token_fetch_card',
            'token_fetch_vpa',
            'subscription_fetch_emandate_detail',
            'subscription_fetch_card_mandate_detail',
            'subscription_payment_fetch_by_id',
            'subscription_fetch_by_id',
            'subscription_fetch_by_id_data_fix',
            'subscription_cancel_token',
            'merchant_fetch_keys',
            'entity_origin_create',
            'currency_fetch_all_proxy',
            'feature_get_all',
            'feature_get_status',
            'invoice_update_billing_period',
            'create_credit_note',
            'credit_note_list',
            'credit_note_get',
            'credit_note_apply',
            'subscription_offer_fetch_discount',
            'subscription_offer_preference',
            'offer_fetch_by_id',
        ],

        'payment_links' => [
            'internal_feature_get_all',
            'merchant_fetch_config_internal',
            'send_email_for_pl_service',
            'customer_fetch_by_id',
            'create_merchant_options',
            'read_merchant_options',
            'order_create',
            'payment_fetch_by_id',
            'payment_fetch_by_id_internal',
            'order_payments',
            'invoice_fetch',
            'invoice_fetch_multiple',
            'read_options_by_ref_id',
            'invoice_update',
            'invoice_delete',
            'invoice_cancel',
            'invoice_get_count',
            'customer_create',
            'order_fetch_by_id',
            'order_fetch_by_id_1cc',
            'merchant_features_fetch',
            'payment_links_sign_payload',
            'payment_links_payment_by_id',
            'currency_fetch_rates_proxy',
            'order_edit',
            'virtual_account_close',
            'batch_stats',
            'invoice_send_notification_proxy',
            'virtual_account_create_for_internal',
            'payment_links_sign_payload_internal',
            'payment_refund',
            'entity_origin_create',
        ],

        'ezetap-api' => [
            'payment_fetch_by_id',
            'qr_code_create',
            'qr_code_close',
            'qr_code_fetch',
            'qr_payment_fetch_for_qr_code',
            'qr_code_fetch_multiple',
            'payment_refund',
            'payment_fetch_refunds',
            'payment_fetch_refund_by_id',
        ],

        'no_code_apps' => [
            'order_create',
            'merchant_fetch_config_internal',
            'payment_fetch_by_id_internal',
            'order_fetch_by_id_internal',
            'order_fetch_by_id',
            'user_fetch_internal',
        ],

        'mandate_hq' => [
            'get_issuer_from_iin',
        ],

        'kotak' => [
            'bank_transfer_process',
            'bank_transfer_notify',
        ],

        'yesbank' => [
            'bank_transfer_process',
            'bank_transfer_notify',
        ],

        'icici' => [
            'bank_transfer_process_icici',
        ],

        'hdfc_ecms' => [
            'bank_transfer_process_hdfc_ecms',
        ],

        'hdfc_otc' => [
            'offline_challan_validate',
            'offline_payment_credit',
        ],

        'rbl' => [
            'banking_account_webhook_account_info',
            'banking_account_create_lead',
        ],

        'los'  => [
            'los_mail',
            'internal_merchant_payments_count',
            'internal_merchant_fetch',
            'user_fetch_entity',
            'user_fetch_internal',
            'merchant_fetch_internal_users',
            'internal_feature_bulk_assign',
            'internal_feature_bulk_remove',
            'internal_feature_get_all',
            'user_fetch_by_verified_contact_internal',
            'internal_pincode_get',
            'role_list_admins_internal',
        ],

        'capital_scorecard_client' => [
            'internal_merchant_fetch',
        ],

        'capital_cards_m2p' =>[
            'capital_cards_m2p_webhook',
        ],

        'capital_cards_client' => [
            'user_fetch',
            'user_fetch_entity',
            'merchant_fetch_internal_users',
            'internal_merchant_fetch',
            'capital_cards_mail',
            'feature_add_internal',
            'internal_fd_create_ticket',
            'corp_card_banking_account_create',
            'workflow_config_create_internal',
            'fetch_authz_roles_by_role_id',
            'credits_create_bulk_internal',
        ],

        'capital_collections_client' => [
            'internal_merchant_fetch',
            'merchant_balance_create',
            'internal_balance_fetch_by_merchant_id',
            'internal_balance_fetch_by_merchant_id_old',
            'credit_repayment_transaction_create',
            'capital_transaction_create',
            'capital_multiple_transaction_create',
            'internal_balance_fetch_by_id',
            'internal_balance_fetch_multiple_by_ids',
            'user_fetch_entity',
            'merchant_fetch_internal_users',
            'feature_add_internal',
            'feature_delete_internal',
            'feature_get_multiple_internal',
            'contact_create_internal',
            'fund_account_create_internal',
            'payout_create_on_internal_contact'
        ],

        'loc'  => [
            'loc_mail',
            'user_fetch',
            'feature_delete_entity_internal',
            'feature_add_internal',
            'feature_get_multiple_internal'
        ],

        'capital_early_settlements' => [
            'settlement_ondemand_linked_account',
            'internal_balances_fetch_by_merchant_ids',
            'merchant_la_fetch'
        ],

        'leegality' => [
            'leegality_webhook',
        ],

        // BharatQR routes are not authenticated
        // currently, so this is not in internal
        // auth

        // 'bharatqr' => [
        //     'gateway_payment_callback_bharatqr',
        // ],

        'mailgun' => [
            'reconciliate',
            'emandate_debit_reconcile',
            'bank_transfer_process_file',
            'bank_transfer_process_file_rbl',
            'bank_transfer_process_file_yesbank',
            'vendor_payment_email_integration_webhook'
        ],

        'raven' => [

        ],

        'scrooge' => [
            'refunds_reversal_create',
            'internal_merchant_fetch',
            'refund_update_status',
            'refund_gateway_call',
            'scrooge_refund_create',
            'refunds_reconcile_bulk',
            'scrooge_refund_replay',
            'refund_verify_call',
            'scrooge_verify_refund_call',
            'refund_fetch_status',
            'scrooge_entities_fetch',
            'scrooge_fetch_refund_email_data',
            'scrooge_fetch_refund_transaction_data',
            'feature_get_multiple_internal',
            'scrooge_public_entities_fetch',
            'fund_transfer_attempt_modes',
            'scrooge_refund_reference1_bulk_update',
            'refund_scrooge_fetch_fee',
            'refund_scrooge_payment_update',
            'refund_scrooge_transaction_create',
            'payout_create_internal',
            'payout_create_2FA_internal',
            'refund_edit_internal',
            'scrooge_refund_back_write',
            'payment_fetch_card_metadata',
        ],

        'thirdwatch_reports' => [
            'currency_fetch_rates_internal'
        ],

        'thirdwatch' => [
            'user_details',
        ],

        'thirdwatch_cod_score' => [
            '1cc_shipping_service_merchant_config_create',
            '1cc_shipping_service_merchant_config_update_by_type',
            '1cc_shipping_service_remove_shipping_providers',
            '1cc_shipping_service_connect_shipping_providers',
            'third_watch_address_cod_score',
            'update_shopify_1cc_config',
            '1cc_shipping_service_merchant_config_assign_shopify_dark',
            '1cc_shipping_service_disable_shopify_dark',
            'update_fetch_coupons_url_dark',
            'update_coupon_validity_url_dark',
            'update_cod_slabs_dark',
            'update_serviceability_url_dark',
            'update_merchant_platform_dark',
            'update_merchant_1cc_config_dark',
            'update_merchant_1cc_coupon_config',
            'update_shipping_slabs_dark',
            'update_cod_serviceability_slabs_dark',
            'zipcode_add',
            'zipcode_remove',
            '1cc_update_shipping_provider_config',
        ],

        'xpayroll' => [
            'user_details',
            'user_all_roles',
            'payout_create_internal',
            'payout_create_on_internal_contact',
            'payout_create_2FA_internal',
            'contact_create_internal',
            'fund_account_create_internal',
            'banking_accounts_list_internal',
            'tax_payments_internal_icici_action',
        ],

        'razorflow' => [
            'scrooge_refunds_get_razorflow',
            'razorflow_admin_fetch_terminal_by_id',
            'razorflow_admin_fetch_entity_by_id',
            'razorflow_admin_fetch_terminal_multiple',
            'razorflow_admin_fetch_entity_multiple',
            'scrooge_refunds_get_multiple_razorflow',
        ],

        'hosted' => [
            'merchant_secret',
            'payment_acknowledge',
            'apspdcl_bridge',
            'webhook_fetch',
            'webhook_fetch_multiple',
            'internal_feature_bulk_assign',
            'internal_feature_bulk_remove',
            'internal_merchant_fetch',
        ],

        //
        // Here by h2h, we mean routes which are hit by AWS lambda triggers
        //
        'h2h' => [
            'setl_reconcile_h2h',
            'lambda_post_h2h',
            'reconciliate',
            'setl_notify_h2h',
            'bank_transfer_process_file_rbl',
            'bank_transfer_process_file_yesbank',
            'bank_transfer_process_file',
            'setl_process_pos_file',
            'custom_setl_read_file',
            'segment_create_update',
            'firs_document_categorize',
            'automate_merchant_master_firs',
            'process_settlement_repatriation',
            'process_opgsp_settlement_repatriation',
        ],

        'merchants-risk' => [
            'merchant_update_fraud_type',
        ],

        'auth_service' => [
            'oauth_merchant_notify',
            'merchant_create_app_access_mapping',
            'merchant_delete_app_access_mapping',
            'merchant_get_org_details',
            'merchant_banking_accounts_webhook',
            'user_details_unified',
        ],

        'reporting' => [
            'merchant_associated_accounts_fetch',
            'internal_merchant_fetch'
        ],

        'vajra' => [
            'gateway_downtime_vajra_webhook',
            'cps_downtime_vajra_webhook',
        ],

        'fts'  => [
            'update_fts_nodal_beneficiary',
            'update_fts_fund_transfer',
            'fts_channel_notification',
            'fetch_nodal_beneficiary_code',
            'payout_create_internal',
        ],

        'reminders' => [
            'reminder_send',
            'p2p_reminder_send',
            'tax_payments_reminders_callback',
            'payout_links_reminder_callback',
            'payout_links_expire_callback',
            'test_payout_links_expire_callback',
            'merchant_international_enablement_reminder',
            'developer_console_maintenance',
            'emerchantpay_apm_onboard_maf',
            'payouts_summary_email',
        ],

        'batch' => [
            'subscription_registration_nach_migration',
            'invoice_create',
            'batch_send_mail',
            'batch_send_sms',
            'merchant_sub_create_batch',
            'merchant_bulk_onboarding_admin',
            'setl_pos_create',
            'payment_page_create_file_upload_record',
            'bulk_invoice_create',
            'bulk_contact_create',
            'bulk_submerchant_assign',
            'payout_bulk_create',
            'payout_bulk_approve',
            'reconciliate_via_batch_service',
            'fund_account_bulk_create',
            'bulk_contact_create',
            'partner_submerchant_map',
            'iin_batch_process_record',
            'buy_pricing_assign_bulk',
            'pricing_add_plan_rule_bulk',
            'virtual_account_edit_bulk',
            'buy_pricing_add_plan_rule_bulk',
            'loc_bulk_withdrawal_update',
            'subscription_registration_charge_token',
            'subscription_registration_charge_token_bulk',
            'subscription_registration_create_links',
            'virtual_account_create',
            'oauth_token_create',
            'merchant_inheritance_parent_set_bulk',
            'entity_bulk_update',
            'merchants_access_map_upsert_bulk',
            'adj_add_batch',
            'settlement_ondemand_feature_enable',
            'merchant_tags_batch',
            'early_settlement_feature_period_create',
            'bank_transfer_process_icici_internal',
            'bank_transfer_process_yesbank_internal',
            'reporting_log_create',
            'bank_transfer_process_rbl_internal',
            'update_admin_through_batch',
            'bank_transfer_edit_payer_account_internal',
            'refund_create_batch_service',
            'credits_create_bulk_batch',
            'terminal_create_bulk',
            'mpans_bulk',
            'upi_terminal_onboarding_bulk',
            'upi_onboarded_terminal_edit_bulk',
            'banking_account_comments_create_batch',
            'banking_account_activation_details_via_batch',
            'create_payment_config_bulk_via_batch',
            'linked_account_create_batch',
            'payment_transfer_batch',
            'transfer_create_reversal_batch',
            'fetch_partner_referral_batch',

            'app_merchant_mapping_create',
            'app_merchant_mapping_update',

            'partner_config_bulk_upsert',
            'scrooge_refunds_retry_custom_fund_transfers',
            'scrooge_refunds_retry_custom_fund_transfers_batch',
            'payout_links_batch_process',
            'nach_batch_process',
            'emandate_batch_process',
            'health_checker',
            'dispute_automation',
            'create_exec_risk_action',
            'bulk_risk_action_status_comment',
            'onboard_old_accounts_to_ledger',
            'raw_address_create_batch_service',
            'fulfillment_order_update',
            '1cc_cod_eligibility_attribute_upsert_batch',
            'chargeback_poc',
            'whitelisted_domain',
            'debit_note_batch',
            'create_fraud_batch',
            'post_batch_bulk_fraud_notify',
            'payment_transfer_retry_batch',
            'vault_migrate_token_bulk',
            'token_hq_charge_batch',
            'create_local_tokens_from_consents_bulk',
            'create_ledger_journal_batch',
            'merchant_upload_miq_admin',
        ],

        'stork' => [
            // Storks needs connected applications against a merchant to fan
            // out the same event to former entities as well.
            'merchant_get_app_access_mapping',
            'webhook_send_email',
        ],

        'mtu_lambda' => [
            // Accessing this route from lambda for updating merchant mtu
            'merchant_mtu_update',
        ],

        //
        // Accessing the routes for automation merchants, only the whitelisting of merchants has been added further
        // in BasicAuth layer.
        //
        'automation' => [
            '*'
        ],

        // Razorpay Capital
        // Financial Data Service
        'perfios' => [
            'financial_data_service_perfios_webhook',
        ],

        'settlements_service' => [
            'setl_transaction_replay',
            'merchant_la_fetch',
            'merchant_fetch_internal',
            'create_settlement_entry',
            'get_global_config',
            'setl_execution_reminder',
            'setl_status_update',
            'setl_transactions_verify',
            'setl_get_transaction_details',
            'payout_create_internal',
            'payout_create_2FA_internal',
            'payout_fetch_by_id_internal',
            'setl_adj_add',
            'merchant_fetch_internal_users'
        ],

        'partnerships' => [
            'fetch_commission_configs',
            'fetch_partner_commission_invoice_feature',
            'prts_fetch_merchant_entities'
        ],

        'terminals_service' => [
            'feature_get_multiple_internal',
            'internal_merchant_fetch',
            'internal_payment_instruments_fetch',
            'internal_merchant_workflow_details_fetch',
            'internal_merchants_fetch',
            'internal_buy_pricing_get_plan',
            'merchant_create_terminal_internal',
            'buy_pricing_get_plan',
            'pricing_add_plan_rule_bulk',
            'merchant_methods_edit_internal',
            'terminal_fetch_by_id_internal',
            'internal_merchant_checkout_preferences',
            'internal_merchant_auto_disabled_methods',
            'terminal_edit_internal',
            'internal_send_merchant_email',
            'feature_get_merchants_internal',
            'feature_get_all_internal',
            'internal_merchants_fetch_by_params',
            'salesforce_details_internal',
            'collect_info_merchant_details_internal',
            'methods_update_merchants_internal',
        ],
        'spinnaker' => [
            'throttle_create_config_spinnaker',
            'add_verify_disabled_gateway',
            'spinnaker_reminder_service',
            'edge_update_rate_limit_spinnaker'
        ],

        'mozart' => [
            'gateway_first_data_pares_store'
        ],

        'card_payment_service' => [
            'api_entity_fetch',
            'cps_card_entity_create',
            'cps_iin_flow_disable',
            'internal_payment_pricing',
            'internal_pricing',
            'internal_merchant_risk_notification',
            'fetch_iin_by_token_iin',
            'payment_fetch_card_metadata',
            'update_token_on_authorized',
            'internal_token_create',
            'internal_transactions'
        ],

        'nbplus_payment_service' => [
            'internal_payment_pricing',
            'internal_pricing',
            'internal_merchant_risk_notification',
        ],

        'upi_payment_service' => [
            'internal_payment_pricing',
            'internal_merchant_risk_notification',
        ],

        'workflows' => [
            'payout_approve_internal',
            'payout_reject_internal',
            'workflow_state_callback',
            'workflow_state_callback_update',
            'merchant_assign_pricing_internal',
            'cb_invoice_workflow_callback'
        ],

        'pg_router' => [
            'api_entity_fetch',
            'internal_payment_authorize_refund',
            'internal_fetch_config_by_id',
            'internal_fetch_configs',
            'api_entity_fetch',
            'internal_order_update',
            'internal_transactions',
            'payment_verify_new',
            'payment_timeout_new',
            'internal_merchant_fetch',
            'payment_notify',
            'order_fetch_by_id_internal_admin',
            'order_fetch_by_id_internal',
            'payment_update_reference6',
            'internal_validate_order_token_params',
            'internal_validate_order_transfer_params',
            'internal_validate_order_bank',
            'internal_validate_order_amount',
            'internal_validate_order_currency',
            'internal_validate_order_checkout_config',
            'internal_validate_order_tpv',
            'internal_create_order_relations',
            'internal_create_order_bank_account',
            'recon_update_data',
            'internal_payment_pricing',
            'internal_pricing',
            'internal_merchant_risk_notification',
            'internal_sign_payload',
            'internal_generate_coproto',
            'adj_transaction_create',
            'refund_scrooge_transaction_create',
            'internal_token_create',
        ],

        'freshdesk_webhook' => [
            'fd_customer_dispute',
            'fd_consume_webhook',
        ],
        'yellowmessenger' => [
            'care_service_chat_proxy',
        ],

        'smart_routing' => [
            'gateway_downtime_for_payment',
            'buy_pricing_terminal_cost',
        ],

        'gupshup' => [
            'gupshup_incoming_messages_callback',
        ],

        'bvs' => [
            'fund_account_validate',
            'banking_account_beneficiary_fetch',
        ],

        'account_service' => [
            'account_service_details_fetch',
            'account_service_details_fetch_reverse_map',
            'account_service_updated_accounts_fetch',
        ],

        'downtime_service' => [
            'gateway_downtime_service_webhook',
        ],

        'sms_sync'  =>  [
            'terminal_test_save_otp',
        ],

        'merchant_risk_alerts' => [
            'merchant_risk_alerts_foh_workflow',
            'merchant_risk_alerts_details',
            'merchant_risk_alerts_dispute_details',
            'merchant_risk_alerts_set_dedupe_key',
            'internal_create_risk_action'
        ],

        'cyber_crime_helpdesk'  => [
            'cyber_crime_helpdesk_send_mail_to_lea',
            'cybercrime_helpdesk_workflow_action'
        ],

        'care' => [
            'fd_insert_into_db',
            'merchant_ids_fetch_for_user_contact',
            'user_fetch_primary_user_contact',
            'internal_workflow_action_get_multiple',
            'payment_fetch_multiple',
            'internal_merchant_fetch',
            'internal_merchant_submission_date',
            'internal_merchant_get_rejection_reasons',
            'myoperator_v1_proxy_get',
            'myoperator_v2_proxy_post',
            'freshdesk_update_ticket_internal',
            'fd_fetch_ticket',
            'fd_fetch_tickets',
            'user_fetch_internal',
            'internal_fd_create_ticket',
            'internal_fd_post_ticket_reply',
            'internal_fetch_merchant_freshdesk_tickets',
            'setl_fetch_multiple',
            'refund_fetch_multiple',
            'merchant_fetch_keys',
            'merchant_activation_clarifications_fetch_internal',
            'merchant_activation_clarifications_save_internal',
            'merchant_nc_revamp_eligibility_internal',
            'merchant_document_upload_internal',
        ],

        'cmma' => [
            'internal_merchant_partnership',
            'internal_merchant_details_fetch',
            'internal_merchant_activation_status',
            'internal_merchant_fetch',
            'freshdesk_update_ticket_internal',
            'internal_fd_create_ticket',
            'internal_fd_fetch_agents',
            'internal_fd_add_note',
            'internal_fd_fetch_agent_detail_for_ticket',
            'internal_create_risk_action'
        ],

        'pgos' => [
            'merchant_entities_info'
        ],

        'disputes' => [
            'payment_refund_internal',
            'dispute_bulk_create_internal',
        ],

        'banking_account_service' => [
            'external_bvs_validation_request',
            'bas_tokenize_values',
            'bas_archive_banking_account_dependencies',
            'bas_unarchive_banking_account_dependencies',
            'bas_get_merchant_attributes',
            'banking_account_activation_detail_slot_booking',
            'bas_ca_lead_to_sales_force',
            'bas_ca_lead_status_to_sales_force',
            'bas_ca_lead_to_freshdesk',
            'bas_banking_accounts_create',
            'bas_banking_accounts_notifications',
            'merchant_fetch_internal',
            'internal_merchant_fetch',
        ],

        'myoperator' => [
            'care_service_myoperator_webhook_proxy',
        ],

        'payouts_service' => [
            'create_payout_entry',
            'payouts_service_dual_write',
            'credit_transfer_create',
            'delete_card_meta_data_and_vault_token',
            'fund_account_get_internal',
            'banking_account_fetch_by_account_number',
            'banking_account_fetch_by_balance_id',
            'create_reversal_entry',
            'create_FTA_payout_service',
            'rename_attachments_for_payouts',
            'create_ledger_payout_service',
            'deduct_credits_via_payout_service',
            'reverse_credits_via_payout_service',
            'create_pricing_for_payout_service',
            'internal_merchant_fetch',
            'payout_purpose_get_internal',
            'bulk_payout_purpose_post',
            'create_workflow_for_payout',
            'payment_fetch_by_id_internal',
            'create_payment_payout_service_axis_cc',
            'update_payout_payout_service',
            'user_fetch_internal',
            'fetch_actor_info_internal',
            'on_hold_merchant_slas_internal',
            'internal_balances_queued',
            'dcc_payouts_details_fetch',
            'decrement_free_payouts_payouts_service',
            'rollback_free_payouts',
            'contact_create_internal',
            'fund_account_create_internal',
            'payment_fetch_card_metadata',
            'workflow_state_callback',
            'workflow_state_callback_update',
            'payouts_service_mail_and_sms',
            'payouts_source_update',
            'status_details_source_update',
        ],

        'ledger' => [
            'activate_ledger_account',
            'deactivate_ledger_account',
            'archive_ledger_account',
            'create_ledger_account',
            'create_ledger_accounts_on_event',
            'create_ledger_accounts_in_bulk',
            'update_ledger_account',
            'update_ledger_account_detail',
            'create_ledger_journal',
            'fetch_journal_by_transactor',
            'update_account_by_entities_and_mid',
            'fetch_accounts_by_entities_and_merchant_id',
            'create_ledger_ledger_config',
            'update_ledger_ledger_config',
            'delete_ledger_ledger_config',
            'request_governor',
            'fetch_ledger',
            'fetch_multiple_ledger',
            'fetch_filter_ledger',
            'fetch_account_form_field_options_ledger',
            'fetch_journal_form_field_options_ledger',
            'replay_journal_rejected_events_ledger',
            'fetch_ledger_config_form_field_options_ledger',
            'ledger_fetch_multiple_transactions',
            'fetch_account_types_ledger',
            'delete_merchants_ledger',
        ],

        'payout_link_customer_page' => [
            'payout_links_customer_hosted_page_data',
            'payout_links_customer_hosted_page_demo_data',
        ],

        'card_vault' => [
            'token_status'
        ],

        'growth_internal' => [
            'growth_pricing_bundle_email',
            'growth_pricing_bundle_add_amount_credits',
        ],

        'affordability' => [
            'get_affordability_suite',
            'merchant_fetch_methods_internal',
            'get_or_create_customer_internal',
            'customer_fetch_by_id_internal',
            'internal_merchant_details_fetch',
        ],

        'checkout_service' => [
            'contact_get_checkout',
            'merchant_policy_details',
            'fetch_payment_config_checkout_internal',
            'payments_downtime',
            'feature_get_all_internal',
            'internal_1cc_configs_get',
            'customer_truecaller_auth_internal',
            'fetch_trusted_badge_status',
            'invoice_fetch_for_checkout_internal',
            'merchant_fetch_config_for_checkout_internal',
            'order_fetch_internal_checkout',
            'merchant_methods_offers_checkout_internal',
            'merchant_validate_public_auth_over_internal_auth',
            'customer_fetch_tokens_internal',
            'checkout_personalisation_internal',
            'internal_feature_bulk_fetch',
            'customer_fetch_internal_for_checkout',
            'checkout_1cc_configs_get',
        ],

        'trusted_badge' => [
            'trusted_badge_get_experiment_list',
            'trusted_badge_put_experiment_list',
        ],

        'tokenization' => [
            'internal_feature_bulk_assign',
            'internal_feature_bulk_remove',
        ],

        'recon' => [
            'test_mailgun',
            'payment_create_upi_unexpected',
            'upi_transfer_process_internal',
            'payment_callback_bharatqr_internal',
            'payment_upi_authorize_failed',
            'internal_fail',
            'internal_reconcile',
            'internal_receive',
            'recon_update_data',
            'payment_nbplus_authorize_failed',
            'payment_card_authorize_failed',
            'payment_card_recon_create_transaction'
        ],

        'smart_collect' => [
            'bank_transfer_process_internal'
        ],
        'consumer_app' => [
            'customer_one_cc_get_or_create_global',
            'customer_fetch_by_id_global',
            '1cc_get_shopify_configs',
            '1cc_shopify_order',
            'order_fetch_by_id_internal',
        ],
        'address_service' => [
            'internal_1cc_configs_get',
            'internal_1cc_shopify_customer_addresses_get',
            'raw_address_create_bulk',
        ],
        'magic_checkout_service' => [
            'internal_1cc_prepay_cod_configs_get',
            'internal_1cc_configs_get',
            'update_shopify_1cc_credentials',
            '1cc_get_shopify_configs',
            '1cc_get_woocommerce_configs',
            'internal_sign_payload',
        ],
        'rto_prediction_service_api_web' => [
            'internal_1cc_order_review',
        ],
    ];

    //
    // Apps that receive a debug error response by default. We do
    // this because the receiving app may required extra information
    // like internal_error_code to correctly handle exceptions
    //
    const DEBUG_APPS = [
        'subscriptions',
        'cron',
    ];

    public static $tlsRoutes = [
        'offline_challan_validate',
        'offline_payment_credit',
    ];

    protected static $jsonpRoutes = [
        'checkout',
        'payment_create_jsonp',
        'payment_get_status',
        'merchant_public_get_banks',
        'merchant_methods',
        'merchant_methods_downtime',
        'payment_get_flows',
        'payment_get_iin_details',
    ];

    protected static $s2sJsonRoutes = [
        'payment_create_private_json',
        'payment_create_checkout_json'
    ];

    protected static $checkoutRoutes = [
        'payment_create_checkout',
        'payment_redirect_3ds',
        'payment_redirect_3ds_get'
    ];

    protected static $ajaxRoutes = [
        'payment_create_ajax'
    ];

    protected static $skipCardMetaCallToVault = [
        'admin_fetch_entity_by_id',
        'admin_fetch_entity_multiple',
        'customer_fetch_token',
        'customer_fetch_tokens',
        'otp_verify',
        'payment_timeout',
        'payment_timeout_new',
        'merchant_checkout_preferences',
        'payment_fetch_card_details',
        'payment_notify',
        'token_fetch_card',
        'token_fetch',
        'payment_verify_new',
        'payment_fetch_multiple',
        'customer_get_saved_status',
        'customer_fetch_tokens_internal',
        'reconciliate_via_batch_service',
        'customer_truecaller_verify',
        '1cc_customer_truecaller_verify',
    ];

    protected static $rearchRoutes = [
        'payment_create_ajax',
        'payment_create_private_old',
        'payment_create_private_json',
        'payment_create_checkout',
    ];

    protected static $nbRearchRoutes = [
        'payment_create_ajax',
        'payment_create_checkout',
        'payment_create_private_old',
        'payment_create_private_json',
    ];

    /**
     * A route can belong to multiple features, mapped here
     */
    public static $routeNameToFeaturesMap = [
        // Bank LMS APIs
        'banking_account_bank_lms_fetch_multiple'       => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_fetch_by_id'          => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_patch_lead'           => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_activity_list'        => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_comments_list'        => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_comment_create'       => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_download_mis'         => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_send_complete_mis'    => [Feature::RBL_BANK_LMS_DASHBOARD],
        'banking_account_bank_lms_assign_bank_poc'      => [Feature::RBL_BANK_LMS_DASHBOARD],
        'fetch_branch_list'                             => [Feature::RBL_BANK_LMS_DASHBOARD],
        'fetch_rm_list'                                 => [Feature::RBL_BANK_LMS_DASHBOARD],
        //
        'capital_cards_service'                => [Feature::CAPITAL_CARDS],
        'capital_cards_onboarding'             => [Feature::CAPITAL_CARDS_ELIGIBLE],
        'capital_virtual_cards_generate_token' => [Feature::CAPITAL_CARDS],
        'loc_service'                          => [Feature::WITHDRAW_LOC, Feature::WITHDRAWAL_ES_AMAZON, Feature::CASH_ON_CARD],
        'feature_dummy'                        => [Feature::DUMMY],
        'payment_create_wallet'                => [Feature::S2SWALLET, Feature::S2S],
        'payment_create_upi'                   => [Feature::S2SUPI, Feature::S2S],
        'payment_create_openwallet'            => [Feature::OPENWALLET],
        'payment_create_razorpaywallet'        => [Feature::RAZORPAY_WALLET],
        'payment_create_recurring'             => [Feature::CHARGE_AT_WILL],
        'payment_create_nach_register'         => [Feature::CHARGE_AT_WILL],
        'payment_create_private_old'           => [Feature::S2S],
        'payment_create_private_json'          => [Feature::S2S_JSON],
        'payment_create_checkout_json'         => [Feature::JSON_V2],
        'payment_charge_token'                 => [Feature::AUTH_SPLIT],
        'recurring_token_pre_debit_notify'     => [Feature::AUTH_SPLIT],
        'reports_transaction_broking'          => [Feature::BROKING_REPORT],
        'reports_transaction_dsp'              => [Feature::DSP_REPORT],
        'reports_order_rpp'                    => [Feature::RPP_REPORT],
        'payment_payout'                       => [Feature::PAYOUT],
        'payout_create'                        => [Feature::PAYOUT],
        'payout_validate'                      => [Feature::PAYOUT],
        'payouts_batch_create'                 => [Feature::PAYOUT, Feature::PAYOUTS_BATCH],
        'payout_approve_bulk'                  => [Feature::PAYOUT],
        'payout_reject_bulk'                   => [Feature::PAYOUT],
        'payout_update_status'                 => [Feature::PAYOUT],
        'payout_create_with_otp'               => [Feature::PAYOUT],
        'composite_payout_create_with_otp'     => [Feature::PAYOUT],
        'payout_create_2FA'                    => [Feature::PAYOUT],
        'payout_send_2FA_otp'                  => [Feature::PAYOUT],
        'undo_payout_creation'                 => [Feature::PAYOUT],
        'resume_payout_creation'               => [Feature::PAYOUT],
        'payout_fetch_by_id'                   => [Feature::PAYOUT],
        'payout_approve'                       => [Feature::PAYOUT],
        'payout_2fa_approve'                   => [Feature::PAYOUT],
        'payout_reject'                        => [Feature::PAYOUT],
        'payout_create_internal'               => [Feature::PAYOUT],
        'payout_create_2FA_internal'           => [Feature::PAYOUT],
        'customer_get_wallet_balance'          => [Feature::OPENWALLET],
        'customer_get_wallet_statement'        => [Feature::OPENWALLET],
        'payment_transfer'                     => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'payment_fetch_transfers'              => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'transfer_create'                      => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'transfer_fetch_multiple'              => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'transfer_fetch'                       => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'transfer_create_reversal'             => [Feature::MARKETPLACE, Feature::OPENWALLET],
        'la_transfer_create_reversal'          => [Feature::ALLOW_REVERSALS_FROM_LA],
        'plan_create'                          => [Feature::SUBSCRIPTIONS],
        'plan_fetch'                           => [Feature::SUBSCRIPTIONS],
        'subscription_settings'                => [Feature::SUBSCRIPTIONS],
        'subscription_settings_get'            => [Feature::SUBSCRIPTIONS],
        'subscriptions_overview'               => [Feature::SUBSCRIPTIONS],
        'subscription_pause'                   => [Feature::SUBSCRIPTIONS],
        'subscription_resume'                  => [Feature::SUBSCRIPTIONS],
        'subscription_delete_offer'            => [Feature::SUBSCRIPTIONS],
        'plan_fetch_multiple'                  => [Feature::SUBSCRIPTIONS],
        'subscription_create'                  => [Feature::SUBSCRIPTIONS],
        'subscription_fetch'                   => [Feature::SUBSCRIPTIONS],
        'subscription_fetch_multiple'          => [Feature::SUBSCRIPTIONS],
        'subscription_manual_retry_old'        => [Feature::SUBSCRIPTIONS],
        'subscription_manual_retry'            => [Feature::SUBSCRIPTIONS],
        'payment_create_subscriptions'         => [Feature::SUBSCRIPTIONS],
        'qr_code_create'                       => [Feature::QR_CODES],
        'qr_code_close'                        => [Feature::QR_CODES],
        'qr_code_fetch'                        => [Feature::QR_CODES],
        'qr_code_fetch_multiple'               => [Feature::QR_CODES],
        'qr_payments_fetch_multiple'           => [Feature::QR_CODES],
        'qr_payment_fetch_for_qr_code'         => [Feature::QR_CODES],
        'virtual_account_create'               => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_edit'                 => [Feature::VIRTUAL_ACCOUNTS],
        'merchant_virtual_account_edit'        => [Feature::EDIT_SINGLE_VA_EXPIRY],
        'virtual_account_close'                => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_fetch'                => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_fetch_multiple'       => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_fetch_payments'       => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_configs'              => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_add_receivers'        => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_add_allowed_payer'    => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_delete_allowed_payer' => [Feature::VIRTUAL_ACCOUNTS],
        'virtual_account_create_for_banking'   => [Feature::VIRTUAL_ACCOUNTS_BANKING],
        'bharat_qr_pay_test'                   => [Feature::VIRTUAL_ACCOUNTS, Feature::BHARAT_QR, Feature::QR_CODES],
        'reports_refund_irctc'                 => [Feature::IRCTC_REPORT],
        'payment_validate_vpa_old'             => [Feature::ENABLE_VPA_VALIDATE],
        'payment_validate_vpa'                 => [Feature::ENABLE_VPA_VALIDATE],
        // Account APIs
        'beta_account_create'                  => [Feature::MARKETPLACE],
        'beta_account_fetch'                   => [Feature::MARKETPLACE],
        'beta_account_fetch_multiple'          => [Feature::MARKETPLACE],
        'beta_account_post_bank_account'       => [Feature::MARKETPLACE],
        'beta_account_fetch_setl_destinations' => [Feature::MARKETPLACE],
        'la_fetch'                             => [Feature::MARKETPLACE],
        'linked_account_update_bank_account'   => [Feature::MARKETPLACE, Feature::LA_BANK_ACCOUNT_UPDATE],
        'on_demand_settlement'                 => [Feature::ES_ON_DEMAND],
        'on_demand_settlement_fees'            => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_create'           => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_fetch'            => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_fetch_by_id'      => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_feature_validate' => [Feature::ES_ON_DEMAND_RESTRICTED],
        'settlement_ondemand_create_dashboard' => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_fees'             => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_fees_dashboard'   => [Feature::ES_ON_DEMAND],
        'settlement_ondemand_blocked'          => [Feature::ES_ON_DEMAND],
        'card_issuer_validate'                 => [Feature::BIN_ISSUER_VALIDATOR],
        'iin_list_by_flow'                     => [Feature::IIN_LISTING],
        'iin_get'                              => [Feature::BIN_API],
        'mpans_issue'                          => [Feature::ISSUE_MPANS],
        'mpans_fetch'                          => [Feature::ISSUE_MPANS],
        'account_create'                       => [Feature::SUBMERCHANT_ONBOARDING],
        'account_list'                         => [Feature::SUBMERCHANT_ONBOARDING],
        'account_fetch'                        => [Feature::SUBMERCHANT_ONBOARDING],
        'account_fetch_by_external_id'         => [Feature::SUBMERCHANT_ONBOARDING],
        'account_edit'                         => [Feature::SUBMERCHANT_ONBOARDING],
        'account_action'                       => [Feature::SUBMERCHANT_ONBOARDING],
        'merchant_activation_update_partner'   => [Feature::PARTNER_ACTIVATE_MERCHANT],
        'merchant_activation_status_partner'   => [Feature::PARTNER_ACTIVATE_MERCHANT],
        'enable_es_scheduled'                  => [Feature::ES_ON_DEMAND],
        'create_virtual_account_from_order'    => [Feature::OFFLINE_PAYMENTS],
        'payment_status_count'                 => [Feature::PAYMENT_STATUS_AGGREGATE],
        'order_create_admin'                   => [Feature::ALLOW_FORCE_TERMINAL_ID],
        'bbps_bill_payments'                   => [Feature::FEATURE_BBPS],
    ];

    /**
     * A route can belong to multiple features, mapped here
     *  if feature is enabled for a org: then access will be denied
     */
    public static $routeNameToOrgLevelFeaturesMap = [
        'merchant_bank_account_update' => [Feature::ORG_BANK_ACCOUNT_UPDATE_SS],
        'fd_create_ticket'             => [Feature::ORG_FRESHDESK_CREATE_TICKET],
        'fd_reserve_balance_ticket'    => [Feature::ORG_FRESHDESK_CREATE_TICKET],
        'merchant_sub_create'          => [Feature::ORG_SUB_MERCHANT_CREATE],
        'merchant_activation_save'     => [Feature::ORG_HIDE_ACTIVATION_FORM],
    ];

    /**
     * A route can belong to multiple features, mapped here
     *  if feature is enabled for a org and merchant both: then it will allow access
     */
    public static $orgAndMerchantNameFeaturesMap = [
        // white_labelled_invoices
        'invoice_create'                        => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_update'                        => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_issue'                         => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_delete'                        => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_cancel'                        => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_fetch'                         => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_fetch_multiple'                => [Feature::WHITE_LABELLED_INVOICES],
        'invoice_send_notification_private'     => [Feature::WHITE_LABELLED_INVOICES],
        // white_labelled_route
        'payment_transfer'                      => [Feature::WHITE_LABELLED_ROUTE],
        'transfer_create'                       => [Feature::WHITE_LABELLED_ROUTE],
        'payment_fetch_transfers'               => [Feature::WHITE_LABELLED_ROUTE],
        'transfer_fetch'                        => [Feature::WHITE_LABELLED_ROUTE],
        'transfer_fetch_multiple'               => [Feature::WHITE_LABELLED_ROUTE],
//        'payment_fetch_multiple'                => [Feature::WHITE_LABELLED_ROUTE],
        'transfer_create_reversal'              => [Feature::WHITE_LABELLED_ROUTE],
        'transfer_edit'                         => [Feature::WHITE_LABELLED_ROUTE],
        // white_labelled_virtual_accounts
        'virtual_account_create'                => [Feature::WHITE_LABELLED_VA],
        'virtual_account_fetch'                 => [Feature::WHITE_LABELLED_VA],
        'virtual_account_fetch_multiple'        => [Feature::WHITE_LABELLED_VA],
        'virtual_account_fetch_payments'        => [Feature::WHITE_LABELLED_VA],
        'payment_bank_transfer_fetch'           => [Feature::WHITE_LABELLED_VA],
        'payment_upi_transfer_fetch'            => [Feature::WHITE_LABELLED_VA],
        'virtual_account_add_receivers'         => [Feature::WHITE_LABELLED_VA],
        'virtual_account_close'                 => [Feature::WHITE_LABELLED_VA],
        // white_labelled_qrcodes
        'qr_code_create'                        => [Feature::WHITE_LABELLED_QRCODES],
        'qr_code_close'                         => [Feature::WHITE_LABELLED_QRCODES],
        'qr_code_fetch_multiple'                => [Feature::WHITE_LABELLED_QRCODES],
        'qr_payment_fetch_for_qr_code'          => [Feature::WHITE_LABELLED_QRCODES],
        'qr_code_fetch'                         => [Feature::WHITE_LABELLED_QRCODES],
        // white_labelled_payment_links
        'payment_links_create' => [Feature::WHITE_LABELLED_PL],
        'payment_links_fetch_multiple' => [Feature::WHITE_LABELLED_PL],
        'payment_links_update' => [Feature::WHITE_LABELLED_PL],
        'payment_links_cancel' => [Feature::WHITE_LABELLED_PL],
    ];

    /*
     * Routes that can be accessed by other org admins.
     * primarily razorpay org
     */
    public static $crossOrgRoutes = [
        'org_edit',
        'org_get',
        'role_edit',
        'schedule_create',
        'schedule_delete',
        'schedule_update',
        'schedule_assign',
        'admin_dummy_account_test',
        'merchant_invoice_update_gstin',
        'setl_retry',
        'merchant_invoice_add_bulk',
        'pricing_create_plan',
        'pricing_get_plans',
        'pricing_get_merchant_plans',
        'pricing_get_gateway_plans',
        'pricing_get_plan',
        'pricing_add_plan_rule',
        'pricing_delete_plan_rule_force',
        'pricing_update_plan_rule',
        'merchant_schedule_bulk',
        'methods_update_merchants',
        'merchant_pricing_bulk',
        'merchant_tags_bulk',
        'gateway_create_rule',
        'gateway_update_rule',
        'gateway_delete_rule',
        'setl_org_config_create_or_update',
        'setl_org_config_get',
    ];

    /**
     * Avoid having any kind of bulk routes here! The entity mapping
     * should be done correctly if you are adding bulk routes.
     *
     * Strongly suggested to understand the flow before adding any new
     * route to this array.
     *
     * NOTE: If you are adding any new source_type here, ensure it's
     * present in the morph map in ApiServiceProvider class.
     *
     * @var array
     */
    public static $idempotentRoutesConfig = [
        'payout_create' => [
            IdempotencyKey\Entity::SOURCE_TYPE  => Entity::PAYOUT,
            IdempotencyKey\Entity::HEADER_KEY   => RequestHeader::X_PAYOUT_IDEMPOTENCY,
        ],
        'payout_create_internal' => [
            IdempotencyKey\Entity::SOURCE_TYPE  => Entity::PAYOUT,
            IdempotencyKey\Entity::HEADER_KEY   => RequestHeader::X_PAYOUT_IDEMPOTENCY,
        ],
        'payout_create_2FA_internal' => [
            IdempotencyKey\Entity::SOURCE_TYPE  => Entity::PAYOUT,
            IdempotencyKey\Entity::HEADER_KEY   => RequestHeader::X_PAYOUT_IDEMPOTENCY,
        ],
        'payouts_batch_create' => [
            IdempotencyKey\Entity::SOURCE_TYPE => Entity::PAYOUTS_BATCH,
            IdempotencyKey\Entity::HEADER_KEY  => RequestHeader::X_PAYOUT_BATCH_IDEMPOTENCY,
        ],
        'payout_create_on_internal_contact' => [
            IdempotencyKey\Entity::SOURCE_TYPE => Entity::PAYOUT,
            IdempotencyKey\Entity::HEADER_KEY  => RequestHeader::X_PAYOUT_IDEMPOTENCY,
        ],
        'transfer_create' => [
            IdempotencyKey\Entity::SOURCE_TYPE => Entity::TRANSFER,
            IdempotencyKey\Entity::HEADER_KEY  => RequestHeader::X_TRANSFER_IDEMPOTENCY,
        ],
    ];
    /**
     * Config array which contains Idempotency Routes
     * for which 409 Conflict http status is thrown when duplicate
     * request is received but the first request is still being processed.
     *
     * The routes added here must be present in
     * self::$idempotentRoutesConfig array.
     * @var string[]
     */
    public static $httpStatusCodeConflictIdempotentRoutes = [
        'transfer_create',
    ];

    /**
     * Routes with Wildcard permission allowed for restricted orgs
     * @var array
     */
    public static $restrictedOrgWildCardRoutes = [
        'admin_logout',
        'admin_get_app_auth',
    ];

    public static $serviceEligibleForIPWhitelist = [
        'api_payouts',
        'api_fund_account_validation'
    ];

    public static $routeServiceMappingForIpWhitelisting = [

        'contact_create'        => 'api_payouts',
        'contact_list'          => 'api_payouts',
        'contact_get'           => 'api_payouts',
        'contact_update'        => 'api_payouts',
        'fund_account_create'   => 'api_payouts',
        'fund_account_list'     => 'api_payouts',
        'fund_account_get'      => 'api_payouts',
        'payout_create'         => 'api_payouts',
        'payout_validate'       => 'api_payouts',
        'payouts_batch_create'  => 'api_payouts',
        'payout_fetch_multiple' => 'api_payouts',
        'payout_fetch_by_id'    => 'api_payouts',
        'payout_cancel'         => 'api_payouts',

        'fund_account_validate'             => 'api_fund_account_validation',
        'fund_account_validate_fetch'       => 'api_fund_account_validation',
        'fund_account_validate_fetch_by_id' => 'api_fund_account_validation'
    ];



    // Sets TRACE level to CRITICAL for these routes
    const CRITICAL_ROUTES = [
        'payment_create',
        'payment_create_private',
        'payment_create_recurring',
        'payment_create_nach_register',
        'payment_create_private_old',
        'payment_create_private_json',
        'payment_create_checkout',
        'payment_create_aeps',
        'payment_create_jsonp',
        'payment_mandate_hq_redirect_authenticate',
        'payment_create_ajax',
        'payment_create_fees',
        'payment_calculate_fees',
        'payment_create_wallet',
        'payment_create_openwallet',
        'payment_create_razorpaywallet',
        'payment_create_upi',
        'payment_callback_post',
        'payment_callback_get',
        'payment_callback_with_key_post',
        'payment_callback_with_key_get',
        'payment_get_status',
        'payment_otp_submit',
        'payment_otp_resend',
        'payment_otp_resend_json',
        'payment_otp_generate',
        'payment_topup_ajax',
        'payment_topup_post',
        'payment_redirect_callback',
        'gateway_payment_callback_bharatqr',
        'upi_transfer_process',
    ];

    const WORKFLOW_EXECUTE_ROUTE_NAME = 'action_request_execute';

    const WORKFLOW_APPROVE_ROUTE_NAME = 'action_checker_create';

    /**
     * S2S payment routes
     */
    const S2S_PAYMENT_ROUTES = [
        'payment_create_private',
        'payment_create_private_old',
        'payment_create_private_json',
        'payment_create_recurring',
        'payment_create_nach_register',
        'payment_create_aeps',
        'payment_create_openwallet',
        'payment_create_razorpaywallet'
    ];

    const SUBSCRIPTION_PROXY_ROUTES = [
        'plan_create',
        'plan_fetch',
        'plan_fetch_multiple',
        'subscription_create',
        'subscription_fetch',
        'subscription_fetch_multiple',
        'subscription_cancel',
        'addon_fetch',
        'addon_fetch_multiple',
        'addon_delete',
        'subscription_create_addon',
        'subscription_fetch_due_addons',
        'subscription_test_charge',
        'subscription_manual_retry',
        // Crons
        'subscriptions_expire',
        // 'subscriptions_charge_invoices',
        // 'subscriptions_retry',
        'subscription_update_data',
        'subscription_payment_process',
        'subscription_view_live',
        'subscription_view_test',
        'subscription_view_test_post',
        'subscription_view_live_post',
        'subscription_charge_cycle',
        'subscription_skip_cycle',
        'subscription_item_create',
        'subscription_item_fetch',
        'subscription_item_fetch_multiple',
        'subscription_item_update',
        'subscription_item_delete',
        'subscription_update',
        'subscription_fetch_changes',
        'subscription_cancel_changes',
        'subscription_fetch_hosted_test',
        'subscription_fetch_hosted_live',
        'subscription_settings',
        'subscription_settings_get',
        'subscriptions_overview',
        'subscription_clear_feature',
        'subscription_pause',
        'subscription_resume',
        'subscription_delete_offer',
        'subscription_get_revenue_by_source',
        'subscription_offer_fetch_usage',
    ];

    const EXCEL_STORE_PROXY_ROUTES = [
        'excel_store_list_pages',
        'excel_store_create_page',
        'excel_store_update_page',
        'excel_store_get_records',
        'excel_store_update_records',
        'excel_store_delete_records',
        'excel_store_page_by_url',
    ];
    const FILTER_RESPONSE_FIELDS_ROUTES = [
        'merchant_activation_details',
    ];

    /**
     * Register all routes here whose
     * exception/errors needs to be send to DataLake.
     */
    const FAILURE_EVENTS_INTERCEPTOR_ROUTES = [
        'user_register',
        'merchant_edit_pre_signup_details',
        'user_confirm_by_data',
        'merchant_instant_activation_post',
        'merchant_activation_upload_file',
        'merchant_activation_save',
        'merchant_tnc_save',
        'merchant_tnc_details_by_mid',
        'merchant_document_upload',
        'user_login',
        'verify_user_otp_login',
        'user_reset_password_create',
    ];

    // These routes are redirected after a feature check
    // Others in SUBSCRIPTION_PROXY_ROUTES are redirected blindly
    const SUBSCRIPTION_FEATURE_PROXY_ROUTES = [
        //'plan_create',
        //'plan_fetch',
        //'plan_fetch_multiple',
        //'subscription_create',
        //'subscription_fetch',
        //'subscription_fetch_multiple',
        //'subscription_cancel',
        //'addon_fetch',
        //'addon_fetch_multiple',
        //'addon_delete',
        //'subscription_create_addon',
        //'subscription_fetch_due_addons',
        //'subscription_test_charge',
        //'subscription_manual_retry',
    ];

    const ROUTES_THROUGH_MASTER_REPLICA = [
        'admin_fetch_entity_multiple',
        'admin_fetch_entity_by_id',
        'external_admin_fetch_entity_multiple',
        'external_admin_fetch_entity_by_id',
        'razorflow_admin_fetch_entity_multiple',
        'razorflow_admin_fetch_entity_by_id',
    ];

    const TYPEFORM_SECURITY = [
        'consume_typeform_webhook',
        'consume_survey_typeform_webhook',
    ];

    //
    // Routes for which Request Logging is enabled.
    // These routes have been tested to work with RequestLogHandler middleware
    //
    const REQUEST_LOG_ROUTES = [
        'payout_create',
        'payout_create_with_otp',
        'composite_payout_create_with_otp',
        'payout_create_2FA',
        'fund_account_validate',
        'banking_account_beneficiary_fetch',
        'payout_approve',
        'payout_reject',
    ];

    /**
     * Banking specific private routes that user can access on API
     */
    const PRIVATE_BANKING_ROUTES = [
        'banking_account_statement_fetch',

        //contact related routes
        'contact_create',
        'contact_list',
        'contact_get',
        'contact_update',

        // fund_account related routes
        'fund_account_create',
        'fund_account_list',
        'fund_account_get',
        // FAV routes
        'fund_account_validate',
        'fund_account_validate_fetch',
        'fund_account_validate_fetch_by_id',

        // payout approval routes
        'payout_approve',
        'payout_reject',

        //payout related routes
        'payout_create',
        'payout_validate',
        'payouts_batch_create',
        'payout_fetch_multiple',
        'payout_fetch_by_id',
        'payout_cancel',

        //payout_links related routes
        'payout_links_create',
        'payout_links_update',
        'payout_links_fetch_multiple',
        'payout_links_fetch_by_id',
        'payout_links_cancel',

        //transaction related routes
        'transaction_statement_fetch',
        'transaction_statement_fetch_multiple',
        'transaction_statement_fetch_multiple_for_banking',

        //accounting integration routes for tally plugin
        'accounting_integration_tally_invoices',
        'accounting_integration_tally_fetch_invoice',
        'accounting_integration_tally_cancel_invoice',
        'accounting_integration_tally_fetch_payment',
        'accounting_integration_tally_acknowledge_payment',
        'accounting_integration_tally_integrate',
        'accounting_integration_tally_cash_flow_acknowledge',
        'accounting_integration_tally_cash_flow_update_mapping',
        'accounting_integration_tally_fetch_cash_flow_entries',
        'accounting_integration_tally_ack_bank_transactions',
        'accounting_integration_tally_get_bank_transactions',
        'accounting_integration_tally_create_contact',
        'accounting_integration_tally_sync_status',
        'accounting_integration_add_or_update_settings',
        'accounting_integration_tally_tax_slab_rates',
        'accounting_integration_tally_banking_accounts',
        'accounting_integration_update_rx_tally_ledger_mapping',
    ];

    //
    // Banking specific routes for which sensitive data will be scrubbed from logs.
    //
    const BANKING_SPECIFIC_ROUTES = [
        'mob_ca_lms_routes',
        'merchant_activation_needs_clarification',
        'payout_create',
        'payout_validate',
        'payout_create_internal',
        'payout_create_2FA_internal',
        'payouts_batch_create',
        'payout_create_with_otp',
        'composite_payout_create_with_otp',
        'merchant_activation_otp_send',
        'payout_create_2FA',
        'payout_send_2FA_otp',
        'undo_payout_creation',
        'resume_payout_creation',
        'payout_bulk_create',
        'payout_bulk_approve',
        'payout_approve_bulk',
        'payout_reject_bulk',
        'payout_approve',
        'payout_2fa_approve',
        'merchant_ip_config_create',
        'merchant_ip_config_fetch',
        'payout_reject',
        'user_mobile_oauth_refresh_token',
        'payout_fetch_by_id',
        'payout_fetch_multiple',
        'payout_cancel',
        'payout_update_status',
        'payout_purpose_get',
        'payout_purpose_post',
        'payout_fetch_reversals',
        'payouts_process_queued',
        'payouts_process_queued_new',
        'payout_service_data_migration',
        'ps_data_migration_redis_clean_up',
        'payouts_process_on_hold',
        'payouts_process_on_hold_partner_bank',
        'payouts_auto_cancel_on_expiry',
        'payouts_process_batch',
        'payouts_process_scheduled',
        'payout_service_process_scheduled_payout',
        'payouts_summary',
        'payouts_workflow_summary',
        'payouts_workflow_config_get',
        'payouts_service_mail_and_sms',
        'payout_links_fetch_multiple',
        'payout_links_fetch_by_id',
        'payout_links_create',
        'payout_links_update',
        'payout_links_generate_end_user_otp',
        'payout_links_generate_end_user_otp_cors',
        'payout_links_verify_customer_otp',
        'payout_links_verify_customer_otp_cors',
        'payout_links_cancel',
        'payout_links_status',
        'payout_links_status_cors',
        'payout_update_pull_payout_status',
        'payout_links_bulk_resend_notification_admin',
        'payout_links_customer_hosted_page',
        'payout_links_shopify_app_install',
        'payout_links_shopify_app_uninstall',
        'payout_links_integrate_app',
        'payout_links_fetch_shopify_order',
        'payout_links_integration_details',
        'payout_links_batch_summary',
        'payout_links_batch_create',

        'vendor_payment_contact_list',
        'vendor_payment_invoice_upload',
        'vendor_payment_create_file_upload',
        'vendor_payment_get_file_upload',
        'vendor_payment_delete_file_upload',
        'vendor_payment_add_or_update_settings',
        'vendor_payment_get_settings',
        'vendor_payment_get_latest_approvers',
        'vendor_payment_get_timeline_view',
        'vendor_payment_contact_get',
        'vendor_payment_contact_create',
        'vendor_payment_contact_update',
        'vendor_payment_create_vendor_advance',
        'vendor_payment_get_vendor_advance',
        'vendor_payment_list_vendor_advance',
        'vendor_payment_create',
        'vendor_payments_check_existing_invoice',
        'vendor_payment_list',
        'vendor_payment_list_vendors',
        'vendor_sign_up_create_business_info',
        'vendor_sign_up_get_business_info_status',
        'vendor_payment_get_by_id',
        'vendor_payment_execute_bulk',
        'vendor_payment_execute',
        'vendor_payment_execute_2fa',
        'vendor_settlement_execute_single',
        'vendor_settlement_execute_multiple',
        'vendor_settlement_mark_as_paid',
        'vendor_settlement_fund_accounts',
        'vendor_settlement_vendor_balance',
        'vendor_payment_summary',
        'vendor_payment_get_tds_categories',
        'vendor_payment_edit',
        'vendor_payment_cancel',
        'vendor_payment_accept',
        'vendor_payment_bulk_cancel',
        'vendor_payment_get_ocr_data',
        'vendor_payment_mark_as_paid',
        'vendor_payment_reporting_info',
        'vendor_payment_bulk_invoice_download',
        'vendor_payment_update_invoice_file_id',
        'vendor_payment_get_invoice_zip_file',
        'vendor_payment_get_quick_filter_amounts',
        'vendor_payment_get_auto_processed_invoice',
        'accounting_integrations_proxy_routes',
        'accounting_integrations_invite_resend',

        'vendor_invoices_list',
        'vendor_invoice_create',
        'vendor_portal_list_tds_categories',
        'vendor_portal_upload_invoice',
        'vendor_portal_get_ocr_data',
        'vendor_portal_get_vendor_preferences',
        'vendor_portal_update_vendor_preferences',
        'vendor_invoice_get_by_id',
        'vendor_portal_invoice_get_signed_url',
        'vendor_portal_invites_list',

        'x_apps_get_all_settings',
        'x_apps_add_or_update_settings',

        'accounts_receivable_all_routes',
        'business_reporting_all_proxy_routes',

        'invite_to_vendor_portal',
        'resend_invite_to_vendor_portal',

        'payout_links_added_fund_accounts',
        'payout_links_added_fund_accounts_cors',
        'payout_links_initiate',
        'payout_links_initiate_cors',
        'payout_links_merchant_settings_get',
        'payout_links_merchant_settings_post',
        'payout_links_merchant_on_boarding_status',
        'payout_links_merchant_summary',
        'payout_links_resend_notification',

        // Accounting Payouts
        'accounting_payouts_integration_status',
        'accounting_integration_get_all_settings',
        'accounting_payouts_cash_flow_list_ba',
        'accounting_payouts_cash_flow_update_ba_mapping',
        'accounting_payouts_integration_app_get_url',
        'accounting_payouts_integration_app_initiate',
        'accounting_payouts_integration_status_app',
        'accounting_payouts_app_credentials',
        'accounting_payouts_delete_integration',
        'accounting_payouts_sync_status',
        'accounting_payouts_sync',
        'accounting_payouts_sync_internal',
        'accounting_payouts_waitlist',

        'accounting_integration_get_organization',
        'accounting_integration_set_organization',
        'accounting_integration_get_chart_of_accounts',
        'accounting_integration_put_chart_of_accounts',
        'accounting_integration_sync_chart_of_accounts',
        'accounting_integration_bank_statement_fetch_trigger_merchant',
        'accounting_integration_bank_transactions_sync_status',
        'accounting_integration_check_bank_ledger_mapping_required',
        'accounting_integration_tally_invoices',
        'accounting_integration_tally_fetch_invoice',
        'accounting_integration_tally_cancel_invoice',
        'accounting_integration_tally_fetch_payment',
        'accounting_integration_tally_acknowledge_payment',
        'accounting_integration_tally_integrate',
        'accounting_integration_tally_delete_integration',
        'accounting_integration_tally_cash_flow_acknowledge',
        'accounting_integration_tally_cash_flow_update_mapping',
        'accounting_integration_tally_fetch_cash_flow_entries',
        'accounting_integration_tally_ack_bank_transactions',
        'accounting_integration_tally_get_bank_transactions',
        'accounting_integration_tally_create_contact',
        'accounting_integration_tally_sync_status',
        'accounting_integration_add_or_update_settings',
        'accounting_integration_tally_tax_slab_rates',
        'accounting_integration_tally_banking_accounts',
        'accounting_integration_update_rx_tally_ledger_mapping',
        'accounting_integration_get_bank_statement_report',

        'contact_get',
        'contact_list',
        'contact_create',
        'corporate_card_get',
        'corporate_card_update',
        'corporate_card_list',
        'bulk_contact_create',
        'contact_update',
        'contact_delete',
        'contact_types_get',
        'contact_types_post',
        'contact_create_internal',
        'contact_create_address',
        'contact_fetch_addresses',
        'contact_fetch_address',

        'banking_account_beneficiary_fetch',
        'fund_account_validate',
        'fund_account_validate_fetch',
        'fund_account_validate_fetch_by_id',
        'fund_account_get',
        'fund_account_list',
        'fund_account_create',
        'fund_account_update',
        'fund_account_create_public',
        'fund_account_bulk_create',

        'banking_account_statement_generate',

        //'bank_transfer_process',
        //'bank_transfer_process_icici',
        //'bank_transfer_process_file',
        //'bank_transfer_process_file_rbl',
        //'bank_transfer_process_rbl',
        //'bank_transfer_process_rbl_test',
        //'bank_transfer_process_rbl_internal',
        //'bank_transfer_process_test',
        'banking_account_create_dashboard',
        'banking_account_bank_lms_fetch_multiple',
        'banking_account_bank_lms_fetch_by_id',
        'banking_account_bank_lms_patch_lead',
        'banking_account_bank_lms_activity_list',
        'banking_account_bank_lms_comments_list',
        'banking_account_bank_lms_comment_create',
        'fetch_branch_list',
        'fetch_rm_list',
        'banking_account_bank_lms_download_mis',
        'banking_account_bank_lms_send_complete_mis',
        'banking_account_bank_lms_assign_bank_poc',
        'get_banking_account_slot_booking_details',
        'banking_account_create',
        'banking_account_create_admin',
        'banking_account_service_lms_routes_all',
        'banking_account_service_lms_routes_ops',
        'banking_account_create_lms_mob',
        'banking_account_update_lms_mob',
        'bas_tokenize_values',
        'banking_accounts_get',
        'banking_account_update_dashboard',
        'banking_account_verify_otp',
        'banking_account_activation_detail_create',
        'banking_account_activation_detail_update',
        'banking_account_activation_detail_update_internal',
        'banking_account_activation_mis_download',
        'banking_account_activation_mis_report',
        'banking_account_webhook_account_info',
        'banking_account_create_lead',

        'banking_account_gateway_balance_fetch',

        'fund_transfer_attempt_process',
        'on_demand_settlement',

        //workflow
        'payout_workflow_retry_admin_bulk',
        'payout_approve_internal',
        'payout_reject_internal',
        'workflow_state_callback',
        'workflow_state_callback_update',
        'wf_config_create',
        'wf_config_update',
        'wf_config_get',

        'tax_payments_pay',
        'tax_payments_bulk_pay',
        'tax_payments_get_all_settings',
        'tax_payments_add_or_update_settings_auto',
        'tax_payments_add_or_update_settings',
        'tax_payments_list',
        'tax_payments_monthly_summary',
        'tax_payments_get_by_id',
        'tax_payments_create',
        'tax_payments_mark_as_paid',
        'tax_payments_challan_upload',
        'tax_payments_update_challan_file_id',
        'tax_payments_edit',
        'tax_payments_cancel',
        'tax_payments_challan_download',
        'tax_payments_invalid_tan_status',
        'tax_payments_downtime_schedule',
        'tax_payments_downtime_schedules_list',
        'tax_payments_fetch_pending_gst',

        // NPS routes
        'survey_create',
        'survey_edit',
        'nps_survey_process_scheduled',
        'pending_survey_get',
        'update_survey_tracker',
        'consume_survey_typeform_webhook',

        //TPV - Third party validation
        //- validations on source accounts through which money gets loaded to va.
        'admin_tpv_create',
        'admin_tpv_edit',
        'admin_fetch_tpvs',
        'merchant_fetch_tpvs',
        'merchant_tpv_create',
        'admin_merchants_tpvs_create',

        'sub_virtual_account_transfer_with_otp',
        'sub_virtual_account_transfer_list',

        // Low Balance Configs for X - Autoload
        'create_low_balance_config_admin',
        'update_low_balance_config_admin',
        'enable_low_balance_config_admin',
        'disable_low_balance_config_admin',
        'delete_low_balance_config_admin',
        'list_low_balance_config_admin',

        'payout_upload_attachment',
        'payout_update_attachments',
        'payout_download_attachments',
        'payout_report_get_attachment_signed_url',
        'payout_report_get_attachment_details',
        'payout_get_attachment_signed_url',

        // Bulk Payouts
        'payouts_batch_validate',

        // self serve workflow
        'workflow_config_create',
        'workflow_config_update',
        'workflow_config_delete',
        'payouts_bulk_reject_owner',
        'payout_links_bulk_reject_owner',
        'fetch_pending_payouts_summary',
        'fetch_pending_payout_links_summary',
        'payout_partner_bank_status'
    ];

    const PAYOUT_LINKS_SPECIFIC_PUBLIC_ROUTES = [
        'payout_links_customer_hosted_page',
        'payout_links_generate_end_user_otp',
        'payout_links_verify_customer_otp',
        'payout_links_added_fund_accounts',
        'payout_links_initiate',
        'payout_links_generate_end_user_otp_cors',
        'payout_links_verify_customer_otp_cors',
        'payout_links_initiate_cors',
        'payout_links_added_fund_accounts_cors',
        'payout_links_status',
        'payout_links_status_cors',
    ];

    // For routes that need to exposed on OAuth but not Private Auth
    // NOTE: Route needs to exist in some other Auth (Proxy) otherwise it won't get registered
    // TODO: Need to move `payout_create_with_otp`, `user_otp_create`, `payout_approve`, `payout_reject` here
    const OAUTH_SPECIFIC_ROUTES = [
        'payouts_summary',
        'banking_accounts_list',
//        'payout_create_2FA'    // TODO: check if this is needed
//        'payout_send_2FA_otp'  // TODO: check if this is needed
    ];

    public static $routesWithV2Prefix = [
        'stakeholder_create_v2',
        'stakeholder_update_v2',
        'stakeholder_fetch_v2',
        'stakeholder_fetch_all_v2',
        'account_create_v2',
        'account_fetch_v2',
        'account_edit_v2',
        'account_delete_v2',
        'document_upload_v2',
        'document_get_v2',
        'document_download_v2',
        'link_account_documents_v2',
        'link_stakeholder_documents_v2',
        'get_account_documents_v2',
        'get_stakeholder_documents_v2',
        'product_config_fetch_v2',
        'product_config_update_v2',
        'product_config_create_v2',
        'business_unit_tnc_fetch_v2',
        'product_config_tnc_fetch_v2',
        'product_config_tnc_accept_v2',
        'onboarding_webhook_create',
        'onboarding_webhook_fetch',
        'onboarding_webhook_fetch_all',
        'onboarding_webhook_update',
        'onboarding_webhook_delete',
        'app_fetch_tokens_v2',
        'app_delete_tokens_v2',
    ];

    // Routes for header X_DASHBOARD_USER_2FA_VERIFIED should be true
    // By Sending this flag as true dashboard clarifies that user is verified by 2FA in its current
    //
    // NOTE: Currently this feature is under razorx with merchant id,
    // so add only proxy auth routes which have merchant Id
    public static $twoFactorAuthRequiredRoutes = [
        'merchant_replace_key'                  => [Mode::LIVE],
        'merchant_bank_account_update'          => [Mode::LIVE, Mode::TEST],
        'merchant_bank_account_file_upload'     => [Mode::LIVE, Mode::TEST],
        'merchant_edit_email_self_serve'        => [Mode::LIVE, Mode::TEST],
        'email_user_status_for_email_update'    => [Mode::LIVE, Mode::TEST],
    ];

    public static $bankingDisabledRoutes = [
        'merchant_get_tags',
        'currency_fetch_all_proxy',
        'merchant_partner_configs_fetch',
        'setl_holidays',
        'setl_amount',
        'user_fetch_purpose_code'
    ];

    // Route specific config for running read queries on mysql db:
    // Incase the connection is not being forced to slave or master while reading data from DB,
    // Heartbeat lag checker decides where the queries should be routed: master or slave-replica.
    //
    // There are 3 levels of permissible limits of lag checker:
    // 1. `master`      : all the read queries of that route are routed to master irrespective of lag.
    // 2. `heartbeat`   : if the slave db is almost in-sync with master, read queries are routed to slave.
    //                      check connections.heartbeat_check.time_threshold config for the permissible lag limit
    // 3. `slave`       : if the slave db is lagging behind master within permissible time limit, read queries are
    //                      routed to slave. check connections.heartbeat_check.slave_time_threshold config for limit.
    public static $heartbeatRoutesConfig = [
        'worker:beneficiary_registration'                   => HeartbeatLagChecker::MASTER,
        'payment_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'order_fetch'                                       => HeartbeatLagChecker::SLAVE,
        'admin_fetch_entity_multiple'                       => HeartbeatLagChecker::SLAVE,
        'external_admin_fetch_entity_multiple'              => HeartbeatLagChecker::SLAVE,
        'admin_fetch_terminal_multiple'                     => HeartbeatLagChecker::SLAVE,
        'payment_verify'                                    => HeartbeatLagChecker::HEARTBEAT,
        'payment_verify_all'                                => HeartbeatLagChecker::HEARTBEAT,
        'payment_new_verify_all'                            => HeartbeatLagChecker::HEARTBEAT,
        'payment_new_verify_bulk'                           => HeartbeatLagChecker::MASTER,
        'payment_verify_bulk'                               => HeartbeatLagChecker::HEARTBEAT,
        'payment_verify_multiple'                           => HeartbeatLagChecker::HEARTBEAT,
        'payment_verify_captured'                           => HeartbeatLagChecker::HEARTBEAT,
        'payment_capture_verify'                            => HeartbeatLagChecker::MASTER,
        'setl_initiate'                                     => HeartbeatLagChecker::SLAVE,
        'setl_initiate_daily'                               => HeartbeatLagChecker::SLAVE,
        'checkout_public'                                   => HeartbeatLagChecker::SLAVE,
        'checkout_onyx'                                     => HeartbeatLagChecker::SLAVE,
        'checkout_embedded'                                 => HeartbeatLagChecker::SLAVE,
        'checkout_hdfcvas'                                  => HeartbeatLagChecker::SLAVE,
        'checkout_hosted'                                   => HeartbeatLagChecker::SLAVE,
        'checkout_hosted_get'                               => HeartbeatLagChecker::SLAVE,
        'checkout'                                          => HeartbeatLagChecker::MASTER,
        'merchant_checkout_preferences'                     => HeartbeatLagChecker::MASTER,
        'payment_create'                                    => HeartbeatLagChecker::MASTER,
        'payment_create_private'                            => HeartbeatLagChecker::MASTER,
        'payment_create_aeps'                               => HeartbeatLagChecker::MASTER,
        'payment_create_subscriptions'                      => HeartbeatLagChecker::MASTER,
        'payment_create_recurring'                          => HeartbeatLagChecker::MASTER,
        'payment_create_private_old'                        => HeartbeatLagChecker::MASTER,
        'payment_create_checkout'                           => HeartbeatLagChecker::MASTER,
        'payment_create_checkout_get'                       => HeartbeatLagChecker::MASTER,
        'payment_create_jsonp'                              => HeartbeatLagChecker::MASTER,
        'payment_create_ajax'                               => HeartbeatLagChecker::MASTER,
        'payment_create_fees'                               => HeartbeatLagChecker::MASTER,
        'payment_fees'                                      => HeartbeatLagChecker::MASTER,
        'payment_create_wallet'                             => HeartbeatLagChecker::MASTER,
        'payment_create_upi'                                => HeartbeatLagChecker::MASTER,
        'payment_create_openwallet'                         => HeartbeatLagChecker::MASTER,
        'payment_create_razorpaywallet'                     => HeartbeatLagChecker::MASTER,
        'payment_redirect_to_authorize'                     => HeartbeatLagChecker::MASTER,
        'payment_redirect_to_authorize_get'                 => HeartbeatLagChecker::MASTER,
        'payment_redirect_to_authorize_post'                => HeartbeatLagChecker::MASTER,
        'payment_callback_ajax_with_key_get'                => HeartbeatLagChecker::MASTER,
        'payment_callback_post'                             => HeartbeatLagChecker::MASTER,
        'payment_callback_get'                              => HeartbeatLagChecker::MASTER,
        'payment_callback_with_key_post'                    => HeartbeatLagChecker::MASTER,
        'payment_callback_with_key_get'                     => HeartbeatLagChecker::MASTER,
        'batch_fetch_multiple'                              => HeartbeatLagChecker::SLAVE,
        'refund_fetch_multiple'                             => HeartbeatLagChecker::SLAVE,
        'card_fetch_multiple'                               => HeartbeatLagChecker::SLAVE,
        'merchant_fetch_multiple'                           => HeartbeatLagChecker::SLAVE,
        'credits_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'virtual_account_fetch_multiple'                    => HeartbeatLagChecker::SLAVE,
        'webhook_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'schedule_fetch_multiple'                           => HeartbeatLagChecker::SLAVE,
        'setl_fetch_multiple'                               => HeartbeatLagChecker::SLAVE,
        'setl_amount_check'                                 => HeartbeatLagChecker::SLAVE,
        'adj_fetch_multiple'                                => HeartbeatLagChecker::SLAVE,
        'emi_plans_fetch_multiple'                          => HeartbeatLagChecker::SLAVE,
        'customer_fetch_multiple'                           => HeartbeatLagChecker::SLAVE,
        'invoice_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'item_fetch_multiple'                               => HeartbeatLagChecker::SLAVE,
        'plan_fetch_multiple'                               => HeartbeatLagChecker::SLAVE,
        'subscription_fetch_multiple'                       => HeartbeatLagChecker::SLAVE,
        'addon_fetch_multiple'                              => HeartbeatLagChecker::SLAVE,
        'offer_fetch_multiple'                              => HeartbeatLagChecker::SLAVE,
        'offer_fetch_subscription'                          => HeartbeatLagChecker::SLAVE,
        'subscription_offer_fetch_discount'                 => HeartbeatLagChecker::SLAVE,
        'subscription_offer_preference'                     => HeartbeatLagChecker::SLAVE,
        'reports_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'p2p_fetch_multiple'                                => HeartbeatLagChecker::SLAVE,
        'payout_fetch_multiple'                             => HeartbeatLagChecker::MASTER,
        'undo_payout_creation'                              => HeartbeatLagChecker::MASTER,
        'resume_payout_creation'                            => HeartbeatLagChecker::MASTER,
        'transfer_fetch_multiple'                           => HeartbeatLagChecker::SLAVE,
        'reversal_fetch_multiple'                           => HeartbeatLagChecker::SLAVE,
        'reversal_fetch_multiple_la'                        => HeartbeatLagChecker::SLAVE,
        'transfer_fetch_multiple_la'                        => HeartbeatLagChecker::SLAVE,
        'dispute_fetch_multiple'                            => HeartbeatLagChecker::SLAVE,
        'dispute_fetch_multiple_count'                      => HeartbeatLagChecker::SLAVE,
        'oauth_token_fetch_multiple'                        => HeartbeatLagChecker::SLAVE,
        'oauth_application_fetch_multiple'                  => HeartbeatLagChecker::SLAVE,
        'beta_account_fetch_multiple'                       => HeartbeatLagChecker::SLAVE,
        'submerchants_fetch_multiple'                       => HeartbeatLagChecker::SLAVE,
        'submerchants_fetch_capital_applications'           => HeartbeatLagChecker::SLAVE,
        'transaction_statement_fetch_multiple'              => HeartbeatLagChecker::SLAVE,
        'transaction_statement_fetch_multiple_for_banking'  => HeartbeatLagChecker::SLAVE,
        'transaction_statement_fetch_multiple_for_banking_internal'        => HeartbeatLagChecker::SLAVE,
        'batch_fetch_by_id'                                 => HeartbeatLagChecker::MASTER,
        'batch_process_by_id'                               => HeartbeatLagChecker::MASTER,
        'payment_fetch_by_id'                               => HeartbeatLagChecker::MASTER,
        'payment_fetch_refund_by_id'                        => HeartbeatLagChecker::MASTER,
        'refund_fetch_by_id'                                => HeartbeatLagChecker::MASTER,
        'card_fetch_by_id'                                  => HeartbeatLagChecker::MASTER,
        'credits_fetch_by_id'                               => HeartbeatLagChecker::MASTER,
        'setl_fetch_by_id'                                  => HeartbeatLagChecker::MASTER,
        'org_setl_fetch_by_id'                              => HeartbeatLagChecker::MASTER,
        'adj_fetch_by_id'                                   => HeartbeatLagChecker::MASTER,
        'admin_fetch_terminal_by_id'                        => HeartbeatLagChecker::MASTER,
        'non_org_admin_fetch_terminal_by_id'                => HeartbeatLagChecker::MASTER,
        'admin_fetch_entity_by_id'                          => HeartbeatLagChecker::MASTER,
        'external_admin_fetch_entity_by_id'                 => HeartbeatLagChecker::MASTER,
        'emi_plan_fetch_by_id'                              => HeartbeatLagChecker::MASTER,
        'order_fetch_by_id'                                 => HeartbeatLagChecker::MASTER,
        'order_fetch_by_id_1cc'                             => HeartbeatLagChecker::MASTER,
        'customer_fetch_by_id'                              => HeartbeatLagChecker::MASTER,
        'offer_fetch_by_id'                                 => HeartbeatLagChecker::MASTER,
        'payout_fetch_by_id'                                => HeartbeatLagChecker::MASTER,
        'fund_account_validate_fetch_by_id'                 => HeartbeatLagChecker::MASTER,
        'payment_get_status'                                => HeartbeatLagChecker::MASTER,
        'payment_otp_submit'                                => HeartbeatLagChecker::MASTER,
        'payment_otp_submit_private'                        => HeartbeatLagChecker::MASTER,
        'payment_otp_resend'                                => HeartbeatLagChecker::MASTER,
        'payment_otp_resend_private'                        => HeartbeatLagChecker::MASTER,
        'payment_topup_ajax'                                => HeartbeatLagChecker::MASTER,
        'payment_topup_post'                                => HeartbeatLagChecker::MASTER,
        'payment_redirect_callback'                         => HeartbeatLagChecker::MASTER,
        'payment_redirect_3ds'                              => HeartbeatLagChecker::MASTER,
        'payment_refund'                                    => HeartbeatLagChecker::MASTER,
        'payment_payout'                                    => HeartbeatLagChecker::MASTER,
        'payment_get_flows'                                 => HeartbeatLagChecker::MASTER,
        'payment_bank_transfer_fetch'                       => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_axis'                     => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_get'                      => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_post'                     => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_kotak'                    => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_kotak_cancel'             => HeartbeatLagChecker::MASTER,
        'gateway_emandate_callback_npci_nb'                 => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_corporation'              => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_canara_post'              => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_canara_get'               => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_amazonpay'                => HeartbeatLagChecker::MASTER,
        'gateway_payment_callback_amazonpay_post'           => HeartbeatLagChecker::MASTER,
        'payments_multiple_authorize_refund'                => HeartbeatLagChecker::HEARTBEAT,
        'payment_timeout'                                   => HeartbeatLagChecker::HEARTBEAT,
        'payment_refund_authorized'                         => HeartbeatLagChecker::HEARTBEAT,
        'mock_hdfc_enroll'                                  => HeartbeatLagChecker::SLAVE,
        'mock_hdfc_payment'                                 => HeartbeatLagChecker::SLAVE,
        'mock_hdfc_auth_enrolled'                           => HeartbeatLagChecker::SLAVE,
        'mock_hdfc_3dsecure'                                => HeartbeatLagChecker::SLAVE,
        'mock_acs'                                          => HeartbeatLagChecker::SLAVE,
        'mock_atom_payment'                                 => HeartbeatLagChecker::SLAVE,
        'mock_axis_migs_payment'                            => HeartbeatLagChecker::SLAVE,
        'mock_first_data_payment'                           => HeartbeatLagChecker::SLAVE,
        'mock_axis_genius_payment'                          => HeartbeatLagChecker::SLAVE,
        'mock_paytm_payment'                                => HeartbeatLagChecker::SLAVE,
        'mock_mobikwik_payment'                             => HeartbeatLagChecker::SLAVE,
        'mock_billdesk_payment'                             => HeartbeatLagChecker::SLAVE,
        'mock_ebs_payment'                                  => HeartbeatLagChecker::SLAVE,
        'mock_esigner_payment'                              => HeartbeatLagChecker::SLAVE,
        'mock_emandate_payment'                             => HeartbeatLagChecker::SLAVE,
        'mock_esigner_legaldesk_payment'                    => HeartbeatLagChecker::SLAVE,
        'mock_sharp_payment_post'                           => HeartbeatLagChecker::SLAVE,
        'mock_sharp_payment_get'                            => HeartbeatLagChecker::SLAVE,
        'mock_amex_payment'                                 => HeartbeatLagChecker::SLAVE,
        'mock_card_fss_payment'                             => HeartbeatLagChecker::SLAVE,
        'mock_sharp_payment_submit'                         => HeartbeatLagChecker::SLAVE,
        'mock_netbanking_payment'                           => HeartbeatLagChecker::SLAVE,
        'mock_netbanking_payment_get'                       => HeartbeatLagChecker::SLAVE,
        'mock_wallet_payment'                               => HeartbeatLagChecker::SLAVE,
        'mock_wallet_payment_get'                           => HeartbeatLagChecker::SLAVE,
        'mock_wallet_payment_with_paymentid'                => HeartbeatLagChecker::SLAVE,
        'mock_generate_reconciliation'                      => HeartbeatLagChecker::SLAVE,
        'mock_upi_payment'                                  => HeartbeatLagChecker::SLAVE,
        'mock_aeps_payment'                                 => HeartbeatLagChecker::SLAVE,
        'mock_event_tracker'                                => HeartbeatLagChecker::SLAVE,
        'batch_process_file'                                => HeartbeatLagChecker::MASTER,
        'bank_transfer_refund_retry'                        => HeartbeatLagChecker::MASTER,
        'fund_transfer_attempt_process'                     => HeartbeatLagChecker::MASTER,
        'virtual_account_refund_excess'                     => HeartbeatLagChecker::MASTER,
        'subscriptions_charge_invoices'                     => HeartbeatLagChecker::MASTER,
        'merchant_payout'                                   => HeartbeatLagChecker::MASTER,
        'payment_auto_capture'                              => HeartbeatLagChecker::SLAVE,
        'payment_capture_gateway_multiple'                  => HeartbeatLagChecker::HEARTBEAT,
        'refund_generate_excel'                             => HeartbeatLagChecker::HEARTBEAT,
        'order_refund_multiple_authorized'                  => HeartbeatLagChecker::HEARTBEAT,
        'gateway_file_create'                               => HeartbeatLagChecker::SLAVE,
        'subscriptions_retry'                               => HeartbeatLagChecker::SLAVE,
        'subscriptions_expire'                              => HeartbeatLagChecker::SLAVE,
        'subscription_cancel_due'                           => HeartbeatLagChecker::SLAVE,
        'payment_update_on_hold'                            => HeartbeatLagChecker::HEARTBEAT,
        'scrooge_refund_verify_bulk'                        => HeartbeatLagChecker::SLAVE,
        'merchant_daily_report'                             => HeartbeatLagChecker::SLAVE,
        'merchant_post_beneficiary_file'                    => HeartbeatLagChecker::SLAVE,
        'merchant_post_beneficiary_api'                     => HeartbeatLagChecker::SLAVE,
        'merchant_notify_holiday'                           => HeartbeatLagChecker::SLAVE,
        'merchant_create_invoice_entities'                  => HeartbeatLagChecker::SLAVE,
        'merchant_invoice_correction'                       => HeartbeatLagChecker::SLAVE,
        'bank_transfer_payment_receiver_backfill'           => HeartbeatLagChecker::SLAVE,
        'bank_transfer_payment_terminal_backfill'           => HeartbeatLagChecker::SLAVE,
        'refund_processed_at_backfill'                      => HeartbeatLagChecker::SLAVE,
        'refund_reference1_backfill'                        => HeartbeatLagChecker::SLAVE,
        'refund_edit_internal'                              => HeartbeatLagChecker::MASTER,
        'refund_reference1_bulk_update'                     => HeartbeatLagChecker::SLAVE,
        'fund_transfer_attempt_reconcile'                   => HeartbeatLagChecker::SLAVE,
        'merchant_activation_migrate'                       => HeartbeatLagChecker::SLAVE,
        'merchant_payout_mail'                              => HeartbeatLagChecker::SLAVE,
        'schedule_migration'                                => HeartbeatLagChecker::SLAVE,
        'schedule_process_tasks'                            => HeartbeatLagChecker::SLAVE,
        'setl_reconcile_generate'                           => HeartbeatLagChecker::SLAVE,
        'setl_reconcile_test'                               => HeartbeatLagChecker::SLAVE,
        'setl_reconcile_pull'                               => HeartbeatLagChecker::SLAVE,
        'setl_verify'                                       => HeartbeatLagChecker::SLAVE,
        'setl_post_details_old'                             => HeartbeatLagChecker::SLAVE,
        'nodal_initiate_transfer'                           => HeartbeatLagChecker::SLAVE,
        'entity_balance_id_update'                          => HeartbeatLagChecker::SLAVE,
        'geoip_update'                                      => HeartbeatLagChecker::SLAVE,
        'emi_generate_excel'                                => HeartbeatLagChecker::SLAVE,
        'invoice_send_notifications'                        => HeartbeatLagChecker::SLAVE,
        'invoice_expire_bulk'                               => HeartbeatLagChecker::SLAVE,
        'payment_link_expire_cron'                          => HeartbeatLagChecker::SLAVE,
        'billdesk_reconcile_cancelled'                      => HeartbeatLagChecker::SLAVE,
        'setcronjob_webhook'                                => HeartbeatLagChecker::SLAVE,
        'currency_update_rates'                             => HeartbeatLagChecker::SLAVE,
        'currency_update_rates_multiple'                    => HeartbeatLagChecker::SLAVE,
        'admin_lock_old_accounts'                           => HeartbeatLagChecker::SLAVE,
        'merchant_es_sync_cron'                             => HeartbeatLagChecker::SLAVE,
        'payment_auth_notify'                               => HeartbeatLagChecker::SLAVE,
        'payment_capture_reminder'                          => HeartbeatLagChecker::SLAVE,
        'card_update_saved'                                 => HeartbeatLagChecker::SLAVE,
        'merchant_patch_beneficiary_code'                   => HeartbeatLagChecker::SLAVE,
        'fund_transfer_attempt_recon_report'                => HeartbeatLagChecker::SLAVE,
        'entity_tax_update'                                 => HeartbeatLagChecker::SLAVE,
        'reports_transaction_dsp'                           => HeartbeatLagChecker::SLAVE,
        'reports_refund_irctc'                              => HeartbeatLagChecker::SLAVE,
        'scorecard'                                         => HeartbeatLagChecker::SLAVE,
        'offer_deactivate'                                  => HeartbeatLagChecker::SLAVE,
        'daily_reconciliation_summary_fetch'                => HeartbeatLagChecker::SLAVE,
        'admin_mdr_update'                                  => HeartbeatLagChecker::SLAVE,
        'merchant_razorx_evaluate'                          => HeartbeatLagChecker::SLAVE,
        'payment_get_flows_private'                         => HeartbeatLagChecker::SLAVE,
        'org_get_by_hostname'                               => HeartbeatLagChecker::SLAVE,
        'merchant_analytics'                                => HeartbeatLagChecker::SLAVE,
        'inspector_view_get'                                => HeartbeatLagChecker::SLAVE,
        'account'                                           => HeartbeatLagChecker::SLAVE,
        'merchant_methods'                                  => HeartbeatLagChecker::SLAVE,
        'merchant_methods_downtime'                         => HeartbeatLagChecker::SLAVE,
        'merchant_get_tags'                                 => HeartbeatLagChecker::MASTER,
        'merchant_activation_details'                       => HeartbeatLagChecker::MASTER,
        'user_fetch'                                        => HeartbeatLagChecker::MASTER,
        'invoice_fetch'                                     => HeartbeatLagChecker::MASTER,
        'invoice_view_live'                                 => HeartbeatLagChecker::MASTER,
        'merchant_features_fetch'                           => HeartbeatLagChecker::MASTER,
        'customer_get_saved_status'                         => HeartbeatLagChecker::SLAVE,
        'payment_fetch_card_details'                        => HeartbeatLagChecker::MASTER,
        'transfer_fetch'                                    => HeartbeatLagChecker::MASTER,
        'merchant_product_switch'                           => HeartbeatLagChecker::MASTER,
        'card_check_recurring'                              => HeartbeatLagChecker::MASTER,
        'customer_fetch_tokens'                             => HeartbeatLagChecker::MASTER,
        'customer_create'                                   => HeartbeatLagChecker::HEARTBEAT,
        'merchant_fetch_config'                             => HeartbeatLagChecker::SLAVE,
        'merchant_fetch_config_internal'                    => HeartbeatLagChecker::SLAVE,
        'merchant_fetch_config_for_checkout_internal'       => HeartbeatLagChecker::SLAVE,
        'virtual_account_fetch'                             => HeartbeatLagChecker::MASTER,
        'otp_post'                                          => HeartbeatLagChecker::SLAVE,
        'otp_verify'                                        => HeartbeatLagChecker::MASTER,
        '1cc_otp_verify'                                    => HeartbeatLagChecker::MASTER,
        'otp_verify_app'                                    => HeartbeatLagChecker::MASTER,
        'sms_callback'                                      => HeartbeatLagChecker::SLAVE,
        'worker:es_sync'                                    => HeartbeatLagChecker::MASTER,
        'worker:run_shield_check'                           => HeartbeatLagChecker::SLAVE,
        'worker:web_hook'                                   => HeartbeatLagChecker::SLAVE,
        'worker:attempt_status_check'                       => HeartbeatLagChecker::MASTER,
        'worker:attempts_recon'                             => HeartbeatLagChecker::MASTER,
        'worker:fund_transfer'                              => HeartbeatLagChecker::MASTER,
        'worker:batch'                                      => HeartbeatLagChecker::HEARTBEAT,
        'worker:merchant_invoice'                           => HeartbeatLagChecker::SLAVE,
        'worker:invoice_action'                             => HeartbeatLagChecker::MASTER,
        'worker:attempt_recon'                              => HeartbeatLagChecker::MASTER,
        'worker:capture'                                    => HeartbeatLagChecker::HEARTBEAT,
        'worker:bulk_refund'                                => HeartbeatLagChecker::MASTER,
        'worker:gateway_files'                              => HeartbeatLagChecker::SLAVE,
        'worker:irctc_batch'                                => HeartbeatLagChecker::MASTER,
        'worker:batch_notify'                               => HeartbeatLagChecker::HEARTBEAT,
        'setl_amount'                                       => HeartbeatLagChecker::SLAVE,
        'setl_combined_report'                              => HeartbeatLagChecker::SLAVE,
        'setl_combined_recon'                               => HeartbeatLagChecker::SLAVE,
        'balance_fetch'                                     => HeartbeatLagChecker::SLAVE,
        'fetch_partner_intent'                              => HeartbeatLagChecker::MASTER,
        'reporting_log_get'                                 => HeartbeatLagChecker::SLAVE,
        'fetch_merchant_balance_configs'                    => HeartbeatLagChecker::SLAVE,
        'fetch_payment_config'                              => HeartbeatLagChecker::SLAVE,
        'fetch_payment_merchant_actions'                    => HeartbeatLagChecker::SLAVE,
        'currency_fetch_all_proxy'                          => HeartbeatLagChecker::SLAVE,
        'fetch_product_status'                              => HeartbeatLagChecker::SLAVE,
        'get_instant_refunds_pricing_merchant'              => HeartbeatLagChecker::SLAVE,
        'merchant_balance_fetch'                            => HeartbeatLagChecker::HEARTBEAT,
        'merchant_fetch_keys'                               => HeartbeatLagChecker::SLAVE,
        'merchant_gst_fetch'                                => HeartbeatLagChecker::SLAVE,
        'payment_page_list'                                 => HeartbeatLagChecker::SLAVE,
        'payment_button_list'                               => HeartbeatLagChecker::SLAVE,
        'reminder_next_run'                                 => HeartbeatLagChecker::SLAVE,
        'user_fetch_for_merchant'                           => HeartbeatLagChecker::SLAVE,
        'reward_expire_cron'                                => HeartbeatLagChecker::MASTER,
        'trusted_badge_eligibility_cron'                    => HeartbeatLagChecker::SLAVE,
        'user_access'                                       => HeartbeatLagChecker::MASTER,
        'user_fetch_entity'                                 => HeartbeatLagChecker::SLAVE,
        'payout_links_shopify_app_install'                  => HeartbeatLagChecker::MASTER,
        'payout_links_shopify_app_uninstall'                => HeartbeatLagChecker::MASTER,
        'payout_links_shopify_app_customers_redact'         => HeartbeatLagChecker::SLAVE,
        'payout_links_shopify_app_shop_redact'              => HeartbeatLagChecker::SLAVE,
        'payout_links_shopify_customers_data_request'       => HeartbeatLagChecker::SLAVE,
        'create_local_tokens_from_consents_bulk'            => HeartbeatLagChecker::SLAVE,
        'ledger_outbox_retry'                               => HeartBeatLagChecker::MASTER,
        'order_outbox_retry'                                => HeartBeatLagChecker::MASTER,
    ];

    public static $terminalsServiceFormRequestsRoutes = [
        'create_iir_discrepancy_answer',
        'create_iir_discrepancy_answer_admin',
    ];

    /*
     * Route specific config to move the read queries to replica connection.
     */
    public static $forceReplicaRoutes = [
        'pricing_get_merchant_plans',
        'payment_update_on_hold',
        'payment_page_get_details',
        'payment_button_get_details',
        'subscription_registration_list_tokens',
        'contact_list_internal',
        'payment_new_verify_all',
        'payment_verify_captured',
        'emi_generate_excel',
        'setl_fetch_source_details',
        'subscription_cancel_token',
        'payment_timeout',
        'payment_auth_timeout',
        'setl_service_migration',
        'setl_service_blocked_migration',
        'contact_list',
        'workflow_get_multiple',
        'payment_capture_gateway_multiple',
        'banking_account_statement_generate',
        'payment_fetch_multiple',
        'order_fetch',
        'admin_fetch_entity_multiple',
        'external_admin_fetch_entity_multiple',
        'admin_fetch_terminal_multiple',
        'checkout_public',
        'checkout_onyx',
        'checkout_embedded',
        'checkout_hdfcvas',
        'checkout_hosted',
        'checkout_hosted_get',
        'batch_fetch_multiple',
        'refund_fetch_multiple',
        'card_fetch_multiple',
        'merchant_fetch_multiple',
        'credits_fetch_multiple',
        'virtual_account_fetch_multiple',
        'webhook_fetch_multiple',
        'schedule_fetch_multiple',
        'setl_fetch_multiple',
        'setl_amount_check',
        'adj_fetch_multiple',
        'emi_plans_fetch_multiple',
        'customer_fetch_multiple',
        'invoice_fetch_multiple',
        'item_fetch_multiple',
        'plan_fetch_multiple',
        'subscription_fetch_multiple',
        'addon_fetch_multiple',
        'offer_fetch_multiple',
        'offer_fetch_subscription',
        'subscription_offer_fetch_discount',
        'subscription_offer_preference',
        'reports_fetch_multiple',
        'p2p_fetch_multiple',
        'transfer_fetch_multiple',
        'reversal_fetch_multiple',
        'reversal_fetch_multiple_la',
        'transfer_fetch_multiple_la',
        'dispute_fetch_multiple',
        'dispute_fetch_multiple_count',
        'oauth_token_fetch_multiple',
        'oauth_application_fetch_multiple',
        'beta_account_fetch_multiple',
        'submerchants_fetch_multiple',
        'submerchants_fetch_capital_applications',
        'transaction_statement_fetch_multiple',
        'transaction_statement_fetch_multiple_for_banking',
        'transaction_statement_fetch_multiple_for_banking_internal',
        'mock_hdfc_enroll',
        'mock_hdfc_payment',
        'mock_hdfc_auth_enrolled',
        'mock_hdfc_3dsecure',
        'mock_acs',
        'mock_atom_payment',
        'mock_axis_migs_payment',
        'mock_first_data_payment',
        'mock_axis_genius_payment',
        'mock_paytm_payment',
        'mock_mobikwik_payment',
        'mock_billdesk_payment',
        'mock_ebs_payment',
        'mock_esigner_payment',
        'mock_emandate_payment',
        'mock_esigner_legaldesk_payment',
        'mock_sharp_payment_post',
        'mock_sharp_payment_get',
        'mock_amex_payment',
        'mock_card_fss_payment',
        'mock_sharp_payment_submit',
        'mock_netbanking_payment',
        'mock_netbanking_payment_get',
        'mock_wallet_payment',
        'mock_wallet_payment_get',
        'mock_wallet_payment_with_paymentid',
        'mock_generate_reconciliation',
        'mock_upi_payment',
        'mock_aeps_payment',
        'mock_event_tracker',
        'scrooge_refund_verify_bulk',
        'merchant_daily_report',
        'merchant_post_beneficiary_file',
        'merchant_post_beneficiary_api',
        'merchant_notify_holiday',
        'merchant_create_invoice_entities',
        'merchant_invoice_correction',
        'bank_transfer_payment_receiver_backfill',
        'bank_transfer_payment_terminal_backfill',
        'refund_processed_at_backfill',
        'refund_reference1_backfill',
        'refund_reference1_bulk_update',
        'fund_transfer_attempt_reconcile',
        'merchant_activation_migrate',
        'merchant_payout_mail',
        'schedule_migration',
        'schedule_process_tasks',
        'setl_reconcile_generate',
        'setl_reconcile_test',
        'setl_reconcile_pull',
        'setl_verify',
        'setl_post_details_old',
        'nodal_initiate_transfer',
        'entity_balance_id_update',
        'geoip_update',
        'invoice_send_notifications',
        'invoice_expire_bulk',
        'payment_link_expire_cron',
        'billdesk_reconcile_cancelled',
        'setcronjob_webhook',
        'currency_update_rates',
        'currency_update_rates_multiple',
        'admin_lock_old_accounts',
        'merchant_es_sync_cron',
        'payment_auth_notify',
        'payment_capture_reminder',
        'card_update_saved',
        'merchant_patch_beneficiary_code',
        'fund_transfer_attempt_recon_report',
        'entity_tax_update',
        'reports_transaction_dsp',
        'reports_refund_irctc',
        'scorecard',
        'offer_deactivate',
        'daily_reconciliation_summary_fetch',
        'admin_mdr_update',
        'merchant_razorx_evaluate',
        'payment_get_flows_private',
        'org_get_by_hostname',
        'merchant_analytics',
        'inspector_view_get',
        'account',
        'merchant_methods',
        'merchant_methods_downtime',
        'customer_get_saved_status',
        'customer_fetch_tokens',
        'merchant_fetch_config',
        'merchant_fetch_config_internal',
        'merchant_fetch_config_for_checkout_internal',
        'otp_post',
        'sms_callback',
        'worker:run_shield_check',
        'worker:web_hook',
        'worker:merchant_invoice',
        'setl_amount',
        'setl_combined_report',
        'setl_combined_recon',
        'balance_fetch',
        'reporting_log_get',
        'fetch_merchant_balance_configs',
        'fetch_payment_config',
        'fetch_payment_merchant_actions',
        'currency_fetch_all_proxy',
        'fetch_product_status',
        'get_instant_refunds_pricing_merchant',
        'merchant_balance_fetch',
        'merchant_fetch_keys',
        'merchant_gst_fetch',
        'payment_page_list',
        'payment_button_list',
        'reminder_next_run',
        'user_fetch_for_merchant',
        'user_fetch_entity',
        'create_local_tokens_from_consents_bulk',
    ];

    /*
     * Routes added in this list will not fetch refunds data from
     * scrooge microservice instead it will use from api Monolith
     */
    public static $forceRefundsLoadFromApiRoutes = [
        'admin_fetch_entity_by_id',
        'scrooge_public_entities_fetch',
        'payment_fetch_refunds',
        'payment_fetch_refund_by_id',
        'refund_fetch_multiple',
        'refund_fetch_by_id',
        'scrooge_refund_reference1_bulk_update',
        'refund_edit',
        'refund_update_status',
        'reconciliate_via_batch_service',
        'refund_verify_call',
        'refund_gateway_call',
        'scrooge_fetch_refund_transaction_data',
        // following route will soon deprecate the usage of refunds table
        // https://razorpay.slack.com/archives/CNXC0JHQF/p1649071336054049
        'payment_verify_new',
        'payment_verify_captured',
        'payment_new_verify_all',
    ];

    // Routes added in this list for ramping up fta source fetch from scrooge
    public static $loadRefundsFromScroogeForFtaRoutes = [
           'update_fts_fund_transfer',
     ];

    public static $skipApiDocumentation = [

    ];

    public static $robotRoutes = [
        "pages_robots_txt"
    ];

    public static $fetchFromWDAService = [
        'scorecard'                                        =>  'wda_scorecard_migration',
        'order_fetch'                                      =>  'wda_order_fetch_migration',
        'order_payments'                                   =>  'wda_order_payments_migration',
        'payment_fetch_multiple'                           =>  'wda_payment_fetch_multiple_migration',
        'admin_fetch_entity_by_id'                         =>  'wda_migration_admin',
        'admin_fetch_entity_multiple'                      =>  'wda_migration_admin',
        'external_admin_fetch_entity_multiple'             =>  'wda_migration_admin',
        'merchant_fetch_payment_failure_analysis'          =>  'wda_merchant_fetch_payment_failure_analysis_migration',
        'transaction_statement_fetch_multiple_for_banking' =>  'wda_transaction_statement_fetch_multiple_for_banking_migration',
        'merchant_onboarding_crons'                        =>  'wda_merchant_onboarding_crons'
    ];

    /**
     * @var Router
     */
    protected $router;

    /**
     * @var BasicAuth
     */
    protected $ba;

    /**
     * @var Application
     */
    protected $app;

    public function __construct($app)
    {
        $this->app = $app;

        $this->router = $app['router'];

        $this->ba = $app['basicauth'];
    }

    public function getCurrentRouteName()
    {
        return $this->router->currentRouteName();
    }

    public function getCurrentRouteMethod()
    {
        return $this->router->getCurrentRequest()->getMethod();
    }

    /**
     * Check if provided route is critical route.
     * If null then check for current route
     *
     * @param  string  $route
     * @return boolean
     */
    public function isCriticalRoute($route = null)
    {
        if ($route === null)
        {
            $route = $this->getCurrentRouteName();
        }

        return in_array($route, self::CRITICAL_ROUTES, true);
    }

    /**
     * Check if provided route has a service mapping for ip whitelist.
     * If null then check for current route
     *
     * @param  string  $route
     * @return boolean
     */
    public static function getServiceMappingForIpWhitelist($route = null)
    {
        if((empty($route) === true) or
            (array_key_exists($route, self::$routeServiceMappingForIpWhitelisting) === false))
        {
            return null;
        }

         return self::$routeServiceMappingForIpWhitelisting[$route];
    }

    public static function getDefaultServicesEligibleForIpWhitelist()
    {
        return self::$serviceEligibleForIPWhitelist;
    }

    public function getUrl($routeName, array $parameters = [], $key = '', $secret = '')
    {
        if (($secret === '') and
            ($key !== ''))
        {
            // It's a public auth.
            $parameters['key_id'] = $key;
            $key = '';
        }

        $urlSegment = \URL::route($routeName, $parameters, false);

        $url = $this->getSchemaHostAndAuth($key, $secret) . $urlSegment;

        return $url;
    }

    public function getUrlWithPublicAuth($routeName, array $parameters = [], $key = '')
    {
        // If current request was on keyless public auth, append the x_entity_id query for public urls
        // only if the same is not required in route parameters in which case it will be there in $parameters already.
        if (($key === '') and ($this->ba->isKeylessPublicAuth() === true))
        {
            if (str_contains(self::$apiRoutes[$routeName][1], '{x_entity_id}') === false)
            {
                $parameters['x_entity_id'] = $this->ba->getKeylessXEntityId();
            }
        }
        // For a partner token authenticated route, keep the token in the public URL
        // OR case happens for mock gateways in s2s redirect flow, when we receive rediret/authorize.
        // we don't set the partner auth, hence there is a check on account id
        else if ((($key === '') and ($this->ba->isPartnerAuth() === true)) or
            (($key === '') and ($this->ba->isDirectAuth() === true) and (empty($this->ba->authCreds->creds['account_id']) === false)))
        {
            $parts = explode(BasicAuth::PARTNER_CALLBACK_KEY_DELIMITER, $this->ba->getPublicKey());
            // Todo: For bc there is another explode attempt, to be removed soon after this deploy.
            $parts = count($parts) === 1 ? explode('~', $this->ba->getPublicKey()) : $parts;

            $key                         = $parts[0];
            $parameters['account_id']    = $this->ba->getAccountId();
        }

        // Else continue with the key_id flow
        else if ($key === '')
        {
            $key = $this->ba->getPublicKey();
        }

        return $this->getUrl($routeName, $parameters, $key);
    }

    public function getUrlWithPublicAuthInQueryParam($routeName, array $parameters = [])
    {
        // TODO: Deprecate this method, remove it's usage and use following directly
        return $this->getUrlWithPublicAuth($routeName, $parameters);
    }

    public function getUrlWithPublicCallbackAuth(array $parameters = [], $key = '', $route = 'payment_callback_with_key_post')
    {
        // If key is not passed, we get the same from basic auth instance
        if ($key === '')
        {
            $key = $this->ba->getPublicKey();
        }

        // For public callback routes, if key is not available(case of key less flow)
        // we use the non-key corresponding route, which would work anyway with key less flow
        // because the route has payment id.
        if (($key === '') and (in_array($route, self::$publicCallback, true) === true))
        {
            $route = str_replace('with_key_', '', $route);
        }

        $url = $this->getUrl($route, $parameters, $key);

        return $url;
    }

    public function getPublicCallbackUrlWithHash($pid, $key = '', $route = 'payment_callback_with_key_post')
    {
        $hash = $this->getHashOf($pid);

        $parameters = ['x_entity_id' => $pid, 'hash' => $hash];

        return $this->getUrlWithPublicCallbackAuth($parameters, $key, $route);
    }

    public function getUrlWithAuth($relativeUrl, $key = '', $secret = '')
    {
        return $this->getSchemaHostAndAuth($key, $secret) . $relativeUrl;
    }

    public static function getBankingSpecificRoutes()
    {
        return self::BANKING_SPECIFIC_ROUTES;
    }

    public static function getRequestLogRoutes()
    {
        return self::REQUEST_LOG_ROUTES;
    }

    protected function getSchemaHostAndAuth($key = '', $secret = '')
    {
        [$schema, $host, $port] = $this->getSchemaHostAndPort();

        $auth = '';
        if ($key !== '')
        {
            $auth = $key;
            if ($secret !== '')
            {
                $auth .= ':' . $secret;
            }

            $auth .= '@';
        }

        $url = $schema . $auth . $host;

        if (($port !== 80) and
            ($port !== 443))
        {
            $url .= ':' . $port;
        }

        return $url;
    }

    protected function getSchemaHostAndPort()
    {
        $request = \Request::getFacadeRoot();

        $schema = $request->getScheme() . '://';

        $host = $request->getHost();

        $port = (int) $request->getPort();

        return [$schema, $host, $port];
    }

    public function getHost()
    {
        $request = \Request::getFacadeRoot();

        $host = $request->getHost();

        return $host;
    }

    // @codingStandardsIgnoreStart
    public function getDoNotLogURLs()
    {
        $doNotLogUrls = [
            'v1/payments/create/jsonp',
            'payments/create/jsonp',
            self::$apiRoutes['payment_create_jsonp'][1],
            'v1/payments/{id}/mandate_hq/authenticate/{hash}',
            'v1/payments',
            'v1/payments/create',
            'v1/payments/create/recurring',
            'v1/payments/create/redirect',
            'v1/payments/create/checkout',
            'v1/payments/create/jsonp',
            'v1/payments/create/ajax',
            'v1/payments/create/fees',
            'v1/payments/create/wallet',
            'v1/payments/create/upi'
        ];

        return $doNotLogUrls;
    }
    // @codingStandardsIgnoreEnd

    public static function isJsonpRoute($route)
    {
        $jsonpRoutes = self::$jsonpRoutes;

        return in_array($route, $jsonpRoutes);
    }

    public static function skipCardMetaCall($route): bool
    {
        $skipRouteList = self::$skipCardMetaCallToVault;

        return (in_array($route, $skipRouteList, true) === true);
    }

    public static function isRearchRoute($route)
    {
        $rearchRoutes = self::$rearchRoutes;

        return (in_array($route, $rearchRoutes, true) === true);
    }

    public static function isNbRearchRoute($route): bool
    {
        return (in_array($route, self::$nbRearchRoutes, true) === true);
    }

    public static function isJsonRoute($route)
    {
        $jsonpRoutes = self::$s2sJsonRoutes;

        return (in_array($route, $jsonpRoutes, true) === true);
    }

    public static function isCheckoutPaymentCreateRoute($route)
    {
        $jsonpRoutes = self::$checkoutRoutes;

        return (in_array($route, $jsonpRoutes, true) === true);
    }

    public static function isAjaxPaymentCreateRoute($route)
    {
        $jsonpRoutes = self::$ajaxRoutes;

        return (in_array($route, $jsonpRoutes, true) === true);
    }

    public function addRouteGroups($groups)
    {
        foreach ($groups as $group)
        {
            foreach (self::$$group as $routeName)
            {
                //ignores the routes which are explicitly specified to have v2 prefix.
                if (in_array($routeName, self::$routesWithV2Prefix, true) === false)
                {
                    $this->addRoute($routeName);
                }
            }
        }
    }

    public function addV2RouteGroups($groups)
    {
        foreach ($groups as $group)
        {
            foreach (self::$$group as $routeName)
            {
                //only adds the routes which are explicitly specified to have v2 prefix.
                if (in_array($routeName, self::$routesWithV2Prefix, true) === true)
                {
                    $this->addRoute($routeName);
                }
            }
        }
    }

    public function isWDAServiceRoute()
    {
        $routeName = $this->getCurrentRouteName();

        return array_key_exists($routeName, self::$fetchFromWDAService);
    }

    public function getWdaRouteExperimentName()
    {
        $routeName = $this->getCurrentRouteName();

        if(array_key_exists($routeName, self::$fetchFromWDAService) === true)
        {
            return self::$fetchFromWDAService[$routeName];
        }

        return null;
    }

    /**
     * Checks if current route is a route public api.
     * Currently we check if the route is in $routesWithV2Prefix array.
     * @return bool
     */
    public function isRoutePublicApi()
    {
        $routeName = $this->getCurrentRouteName();

        //TODO: When v3 version of public onboarding routes are created, include them here.
        return (in_array($routeName, self::$routesWithV2Prefix, true) === true);
    }

    public function isRazorpayXRoute(): bool
    {
        $routeName = $this->getCurrentRouteName();

        $pos = strpos($routeName, 'payout');

        return ($pos !== false);
    }

    public function isApplicableForMerchantIdempotency(): bool
    {
        $routeName = $this->getCurrentRouteName();
        $routeMethod = $this->getCurrentRouteMethod();

        // Currently allowing only for defined routes for idempotency and for POST routes.
        // Keeping only for POST routes since we don't see a use case for other methods currently.
        if ((array_key_exists($routeName, self::$idempotentRoutesConfig) === true) and
            ($routeMethod === Requests::POST))
        {
            return true;
        }

        return false;
    }

    public function getEntityForIdempotencyRequest()
    {
        $routeName = $this->getCurrentRouteName();

        return self::$idempotentRoutesConfig[$routeName][IdempotencyKey\Entity::SOURCE_TYPE] ?? null;
    }

    public function getHeaderKeyForIdempotencyRequest()
    {
        $routeName = $this->getCurrentRouteName();

        return self::$idempotentRoutesConfig[$routeName][IdempotencyKey\Entity::HEADER_KEY] ?? null;
    }

    public function httpStatusCodeConflictForIdempotency()
    {
        $routeName = $this->getCurrentRouteName();

        return (in_array($routeName, self::$httpStatusCodeConflictIdempotentRoutes) === true);
    }

    public function getEntitiesForIdempotencyRequest()
    {
        $sourceTypes = [];

        foreach (self::$idempotentRoutesConfig as $idempotentRouteConfig => $routeName)
        {
            $sourceTypes[] = $routeName[IdempotencyKey\Entity::SOURCE_TYPE] ?? null;
        }

        return array_unique(array_filter($sourceTypes));
    }

    protected function addRoute($name)
    {
        $info = self::$apiRoutes[$name];

        $methods = explode(',', $info[0]);
        $uri     = $info[1];
        $action  = $info[2];

        $env = $this->app->environment();

        // For 'any' we have to register all the methods, there is no http verb called 'any'.
        if ($methods === ['any'])
        {
            $methods = Router::$verbs;
        }

        $route = $this->router->match($methods, $uri, ['as' => $name, 'uses' => $action]);

        if (strpos($uri, '{path?}') !== false)
        {
            $route->where(['path' => '.*']);
        }

        //
        // Attach middleware if required, for the route.
        // Note that the order below does not matter since middleware priority is defined
        // in Kernel.php::$middlewarePriority
        //

        // We add the web middleware group, conditionally to routes which require cookie / session access.
        $route->middleware('error_handler_setter_for_php_laravel_upgrade');
        if (in_array($name, self::$dynamicLifeTimeSession, true) === true)
        {
            $route->middleware('sessionMinimumLifetime');
        }

        if (in_array($name, self::$session, true) === true)
        {
            $route->middleware('web');
        }

        if ($this->isDashboardBackendRoute($name) === true)
        {
            $route->middleware('dashboard_response_headers');
        }

        // Add the 'throttle' middleware to all routes, EXCEPT those defined in the `$skipThrottling` array
        if (in_array($name, self::$skipThrottling, true) === false)
        {
            $route->middleware('throttle');
        }

        // Add the subscription_proxy middleware only for SUBSCRIPTION_PROXY_ROUTES
        if (in_array($name, self::SUBSCRIPTION_PROXY_ROUTES, true) === true)
        {
            $route->middleware('subscription_proxy');
        }

        if (in_array($name, self::EXCEL_STORE_PROXY_ROUTES, true) === true)
        {
            $route->middleware('excel_store_proxy');
        }

        if (in_array($name, self::FAILURE_EVENTS_INTERCEPTOR_ROUTES, true) === true)
        {
            $route->middleware('failure_interceptor');
        }

        if (in_array($name, array_keys(self::$idempotentRoutesConfig, true), true) === true)
        {
            $route->middleware('merchant_idempotency_handler');
        }

        if (in_array($name, self::REQUEST_LOG_ROUTES, true) === true)
        {
            $route->middleware('request_log_handler');
        }

        if ((env('GENERATE_API_DOCS', false) === true) and
            (in_array($name, self::$skipApiDocumentation, true) === false))
        {
            $route->middleware('save_api_details');
        }

        //to filter response fileds based on the user role i.e. controlling api response view for user roles
        if (in_array($name, self::FILTER_RESPONSE_FIELDS_ROUTES, true) === true)
        {
            $route->middleware('filter_response_fields');
        }
    }

    public function defineAllExtraRoutes()
    {
        $this->router
            ->any('{all}',
                [
                    'as'   => 'api_catch_all',
                    'uses' => '\RZP\Http\Controllers\PublicController@getCatchAllRoute'
                ])
            ->where('all', '.*');
    }

    public function defineRootApiRoute()
    {
        $this->router
            ->get('/',
                [
                    'as'   => 'api_root',
                    'uses' => '\RZP\Http\Controllers\PublicController@getRoot'
                ]);
    }

    public function defineRobotsSubRoutes()
    {
        $robotRouteNames = self::$robotRoutes;

        foreach ($robotRouteNames as $robotRouteName)
        {
            $info = self::$apiRoutes[$robotRouteName];

            $uri    = $info[1];
            $action = $info[2];

            $this->router
                ->get($uri, [
                    'as' => $robotRouteName,
                    'uses' => '\\RZP\\Http\\Controllers\\'. $action
                ])
                ->middleware('throttle');
        }
    }

    public function defineStatusApiRoute()
    {
        $this->router
            ->get('/v1/healthcheck',
                [
                    'as'   => 'api_status',
                    'uses' => '\RZP\Http\Controllers\PublicController@getStatus'
                ])->middleware('proxysql');
    }

    public function getApiRouteInCategory($category)
    {
        return array_intersect_key(self::$apiRoutes, array_flip(self::$$category));
    }

    public static function getApiRoutes(): array
    {
        return self::$apiRoutes;
    }

    public static function getApiRoute($name)
    {
        return self::$apiRoutes[$name];
    }

    public function isWorkflowExecuteOrApproveCall()
    {
        $routeName = $this->getCurrentRouteName();

        if (($routeName === self::WORKFLOW_EXECUTE_ROUTE_NAME) or
            ($routeName === self::WORKFLOW_APPROVE_ROUTE_NAME))
        {
            return true;
        }

        return false;
    }

    /**
     * Returns an array of feature names to which the current route is mapped under
     *
     * @param $route
     *
     * @return array
     */
    public static function getFeaturesForRoute($route) : array
    {
        $features = self::$routeNameToFeaturesMap;

        return $features[$route] ?? [];
    }

    /**
     * Returns an array of feature names to which the current route is mapped under
     *
     * @param $route
     *
     * @return array
     */
    public static function getOrgLevelFeaturesForRoute($route) : array
    {
        $features = self::$routeNameToOrgLevelFeaturesMap;

        return $features[$route] ?? [];
    }

    public static function getOrgAndMerchantFeaturesForRoute($route) : array
    {
        $features = self::$orgAndMerchantNameFeaturesMap;

        return $features[$route] ?? [];
    }


    /**
     * Returns the array of features, one of which is required to
     * access the current route.
     *
     * @return array
     */
    public function getCurrentRouteFeatures(): array
    {
        $currentRoute = $this->getCurrentRouteName();
        //
        // A route can belong to multiple features
        // This fetches an array of all features mapped to the route
        //
        return self::getFeaturesForRoute($currentRoute);
    }

    /**
     * Returns the array of features, one of which is required to
     * access the current route.
     *
     * @return array
     */
    public function getCurrentRouteOrgLevelFeatures(): array
    {
        $currentRoute = $this->getCurrentRouteName();
        //
        // A route can belong to multiple features
        // This fetches an array of all features mapped to the route
        //
        return self::getOrgLevelFeaturesForRoute($currentRoute);
    }


    public function getCurrentRouteOrgAndMerchantFeatures(): array
    {
        $currentRoute = $this->getCurrentRouteName();
        //
        // A route can belong to multiple features
        // This fetches an array of all features mapped to the route
        //
        return self::getOrgAndMerchantFeaturesForRoute($currentRoute);
    }

    public function isS2SPaymentRoute(): bool
    {
        $currentRoute = $this->getCurrentRouteName();

        return (in_array($currentRoute, self::S2S_PAYMENT_ROUTES, true) === true);
    }

    public function isSubscriptionFeatureProxyRoute(): bool
    {
        $currentRoute = $this->getCurrentRouteName();

        return (in_array($currentRoute, self::SUBSCRIPTION_FEATURE_PROXY_ROUTES, true) === true);
    }

    public function isSubscriptionProxyRoute(): bool
    {
        $currentRoute = $this->getCurrentRouteName();

        return (in_array($currentRoute, self::SUBSCRIPTION_PROXY_ROUTES, true) === true);
    }

    public static function isDebugApp(string $app = null): bool
    {
        return (in_array($app, self::DEBUG_APPS, true) === true);
    }

    public function getHashOf(string $string): string
    {
        $secret = $this->app->config->get('app.key');

        return hash_hmac('sha1', $string, $secret);
    }

    public function getTLSConfig(): array
    {
        return $this->app->config->get('applications.tls_config');
    }

    public function routeThroughMasterReplica(): bool
    {
        $routeName = $this->app['request.ctx']->getRoute();

        return (in_array($routeName, self::ROUTES_THROUGH_MASTER_REPLICA, true) === true);
    }

    /**
     * if route is being hit by dashboard backend
     * @param $name
     * @return bool
     */
    protected function isDashboardBackendRoute($name) : bool
    {
        if ((in_array($name, self::$internalApps['merchant_dashboard']) === true) or
            (in_array($name, self::$internalApps['admin_dashboard']) === true) or
            (in_array($name, self::$internalApps['dashboard_guest']) === true) or
            (in_array($name, self::$internalApps['dashboard_internal']) === true))
        {
            return true;
        }

        return false;
    }
}
