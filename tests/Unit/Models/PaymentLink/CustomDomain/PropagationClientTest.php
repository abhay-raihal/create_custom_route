<?php

namespace Unit\Models\PaymentLink\CustomDomain;

use Faker\Factory as Faker;
use RZP\Exception\IntegrationException;
use RZP\Tests\Unit\Models\PaymentLink\BaseTest;
use Rzp\CustomDomainService\Propagation\V1;
use RZP\Models\PaymentLink\CustomDomain\PropagationClient;

class PropagationClientTest extends BaseTest
{
    use BaseCDSClientTrait;

    /**
     * @var \Faker\Generator
     */
    private $faker;

    /**
     * {@inheritDoc}
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->faker = Faker::create();

        $this->api = \Mockery::mock(V1\PropagationAPI::class);
    }

    /**
     * @group nocode_cds
     * @group nocode_cds_app_client
     * @return void
     */
    public function testCreateApp()
    {
        $data = [
            PropagationClient::DOMAIN_NAME_KEY => $this->faker->domainName,
        ];

        $this->mockApi("Check", $data);

        $res = $this->client->checkPropagation($data);

        $this->assertNotNull(array_get($res, PropagationClient::PROPAGATED_KEY));
        $this->assertEquals($data[PropagationClient::DOMAIN_NAME_KEY], $res[PropagationClient::DOMAIN_NAME_KEY]);
    }

    /**
     * @group nocode_cds
     * @group nocode_cds_app_client
     * @return void
     */
    public function testCreateAppFailure()
    {
        $data = [
            PropagationClient::DOMAIN_NAME_KEY => $this->faker->domainName,
        ];

        $this->mockApi("Check", $data, new V1\TwirpError("internal_error", "error"));

        $this->expectException(IntegrationException::class);
        $this->expectExceptionMessage("Could not receive proper response from custom domain service");

        $this->client->checkPropagation($data);
    }

    protected function getResponse($method, $data = [])
    {
        $defaultData = [
            PropagationClient::PROPAGATED_KEY   => true,
            PropagationClient::DOMAIN_NAME_KEY  => $this->faker->domainName,
        ];

        $res = [
            "Check" => new V1\CheckResponse(array_merge($defaultData, $data))
        ];

        return $res[$method];
    }

    protected function setClient()
    {
        $this->client = new PropagationClient;

        $this->client->setApi($this->api);
    }
}
