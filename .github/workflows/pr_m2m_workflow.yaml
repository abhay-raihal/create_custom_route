name: PR Approval Workflow For Partner LMS

on:
  pull_request_review:
    types: [ submitted ]
  pull_request:
    types: [ synchronize, labeled, unlabeled ]
env:
  commit_id: ${{ github.event.pull_request.head.sha }}
jobs:
  cancel:
    name: Cancel or Skip workflow
    if: always()
    runs-on: [ self-hosted, api ]
    steps:
      - name: Cancel Previous Runs
        timeout-minutes: 3
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          workflow_id: "pr_m2m_workflow.yaml"
          access_token: ${{ secrets.GIT_TOKEN }}

  run_partnerLms_sanity_on_pr_approval:
    name: Partner LMS sanity workflow
    if: ${{ (github.event.review.state == 'approved' || contains(github.event.pull_request.labels.*.name, 'approved')) }}
    runs-on: [ self-hosted, api ]
    needs: [ cancel ]
    steps:
      - name: Get Build Image Workflow Status
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH: ${{ github.event.pull_request.head.ref }}
          WORKFLOW: build_images.yml
        run: |
          echo "WORKFLOW_STATUS=$(sh ./.github/actions/getWorkflowStatus.sh)" >> $GITHUB_ENV
      - name: Check Workflow Status
        run: echo $WORKFLOW_STATUS
              # Log Workflow Status outputs the logs for Get Build Image Workflow Status workflow
      - name: Log Workflow Status
        env:
          GITHUB_TOKEN: ${{ github.token }}
          BRANCH: ${{ github.event.pull_request.head.ref }}
          WORKFLOW: build_images.yml
          API_HEADER: "Accept: application/vnd.github.v3+json"
        run: |
          cat build_image_workflow_log.txt
      - name: Checkout Codebase
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_BOT_TOKEN }}
      # checkout the feature branch post back-merge of master
      - uses: razorpay/checkout-action@08eef2bd6ada50786812e7351457a762856a532f
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set New commit Id in Github env post backmerge
        id: new_commit
        run: echo "GIT_NEW_COMMIT_AFTER_MERGE=$(git rev-parse --verify HEAD)" >> $GITHUB_ENV

      - name: Hotfix Check
        if: contains(github.event.pull_request.head.ref, 'hotfix')
        id: hotfix
        run: echo "::set-output name=flag::true"

      - name: Revert Check
        if: contains(github.event.pull_request.head.ref, 'revert-')
        id: revert
        run: echo "::set-output name=flag::true"

      - name: SkipLmsRuns Check
        if: contains(github.event.pull_request.labels.*.name, 'skipLmsRuns')
        id: skipLmsRuns
        run: echo "::set-output name=flag::true"

      - name: Check Pre Condition for BVT
        id: bvt_pre_conditions
        if: ${{ !steps.hotfix.outputs.flag && !steps.revert.outputs.flag && !steps.skipLmsRuns.outputs.flag && !startsWith(github.event.pull_request.head.ref, 'beta_') && env.GIT_NEW_COMMIT_AFTER_MERGE == env.commit_id && env.WORKFLOW_STATUS == 'success' }}
        run: |
          echo "::set-output name=flag::true"

      - name: Skip check if BVT conditions not met
        if: ${{ !steps.bvt_pre_conditions.outputs.flag }}
        run: |
          echo "Step skipped as no test file added or change"
          echo "BVT condition not met hence skip this step before approval"
          curl -X POST -H "Content-Type: application/json" -H "Authorization: token ${{ github.token }}" \
          -d '{ "state" : "success" , "context" : "pr-approval-workflow/argo/partner-lms-tests" , "description" : "Skipped as BVT Conditions not met", "target_url" : "https://github.com/${{ github.repository }}" }' \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}
          exit 0

      - name: Get Latest Master Commit for Dashboard
        if: ${{ steps.bvt_pre_conditions.outputs.flag }}
        uses: actions/github-script@v3
        id: DASHBOARD_COMMIT_ID
        with:
          github-token: ${{ secrets.GIT_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.repos.listCommits({
                owner: context.payload.repository.owner.login,
                repo: 'dashboard',
                sha: 'master',
                per_page: 10
            })
            var commit_id = ''
            for(let i = 0; i < response.data.length; i++) {
                const commit_check_resp = await github.checks.listForRef({
                      owner: context.payload.repository.owner.login,
                      repo: 'dashboard',
                      ref: response.data[i].sha,
                })
                var allCheckPassed = true
                for(let j = 0; j < commit_check_resp.data.check_runs.length; j++) {
                    if(commit_check_resp.data.check_runs[j].status !== 'completed') {
                      allCheckPassed = false
                    }
                }
                if(allCheckPassed == true) {
                    commit_id = response.data[i].sha
                    break
                }
            }
            console.log('Dashboard Commit ID: ' + commit_id)
            return commit_id

      - name: Get Latest Master Commit for Partner-LMS
        if: ${{ steps.bvt_pre_conditions.outputs.flag }}
        uses: actions/github-script@v3
        id: PARTNER_LMS_COMMIT_ID
        with:
#          path: partner-lms
          github-token: ${{ secrets.GIT_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.repos.listCommits({
                owner: context.payload.repository.owner.login,
                repo: 'frontend-x',
                path: 'partner-lms',
                sha: 'master',
                per_page: 10
            })
            var commit_id = ''
            for(let i = 0; i < response.data.length; i++) {
                const commit_check_resp = await github.checks.listForRef({
                      owner: context.payload.repository.owner.login,
                      repo: 'frontend-x',
                      ref: response.data[i].sha,
                })
                var allCheckPassed = true
                for(let j = 0; j < commit_check_resp.data.check_runs.length; j++) {
                    if(commit_check_resp.data.check_runs[j].status !== 'completed') {
                      allCheckPassed = false
                    }
                }
                if(allCheckPassed == true) {
                    commit_id = response.data[i].sha
                    break
                }
            }
            console.log('PARTNER_LMS_COMMIT_ID: ' + commit_id)
            return commit_id

      - name: Execute Partner LMS Sanity tests
        if: ${{ steps.bvt_pre_conditions.outputs.flag }}
        uses: fjogeleit/http-request-action@52ba495021567f279f4a6577ac8fb73672197af8
        with:
          url: 'https://argo.dev.razorpay.in/api/v1/events/argo-workflows/partner-lms'
          method: 'POST'
          bearerToken: ${{ secrets.ARGO_TOKEN }}
          data: >
            {
                "meta": {
                    "kube_manifests_ref": "master"
                },
                "roast": {
                    "roast_commit_id": "latest",
                    "mode": "partner-lms-tests",
                    "include_groups": "partner_lms_tests",
                    "repo_name": "api",
                    "report_name": "RX UI PR Approval-partner-lms-${{ github.event.pull_request.head.sha }}"
                },
                "self": {
                    "name": "api",
                    "repository_name": "razorpay/api",
                    "commit_id": "${{ github.event.pull_request.head.sha }}",
                    "pr_number": "${{ github.event.pull_request.number }}"
                },
                "dependencies": [
                    {
                        "name": "dashboard",
                        "repository_name": "razorpay/dashboard",
                        "commit_id": "${{ steps.DASHBOARD_COMMIT_ID.outputs.result }}",
                        "ephemeral_db": false
                    },
                    {
                        "name": "partner-lms",
                        "repository_name": "razorpay/frontend-x",
                        "commit_id": "${{ steps.PARTNER_LMS_COMMIT_ID.outputs.result }}",
                        "ephemeral_db": false
                    }
                ]
            }
